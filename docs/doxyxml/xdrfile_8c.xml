<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.9.1">
  <compounddef id="xdrfile_8c" kind="file" language="C++">
    <compoundname>xdrfile.c</compoundname>
    <includes local="no">stdio.h</includes>
    <includes local="no">stdlib.h</includes>
    <includes local="no">string.h</includes>
    <includes local="no">math.h</includes>
    <includes local="no">limits.h</includes>
    <includes refid="xdrfile_8h" local="yes">gmxcpp/xdrfile.h</includes>
    <incdepgraph>
      <node id="422">
        <label>gmxcpp/xdrfile.h</label>
        <link refid="xdrfile_8h"/>
      </node>
      <node id="418">
        <label>stdlib.h</label>
      </node>
      <node id="421">
        <label>limits.h</label>
      </node>
      <node id="419">
        <label>string.h</label>
      </node>
      <node id="420">
        <label>math.h</label>
      </node>
      <node id="417">
        <label>stdio.h</label>
      </node>
      <node id="416">
        <label>src/xdrfile.c</label>
        <link refid="xdrfile.c"/>
        <childnode refid="417" relation="include">
        </childnode>
        <childnode refid="418" relation="include">
        </childnode>
        <childnode refid="419" relation="include">
        </childnode>
        <childnode refid="420" relation="include">
        </childnode>
        <childnode refid="421" relation="include">
        </childnode>
        <childnode refid="422" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <innerclass refid="structXDR" prot="public">XDR</innerclass>
    <innerclass refid="structXDR_1_1xdr__ops" prot="public">XDR::xdr_ops</innerclass>
    <innerclass refid="structXDRFILE" prot="public">XDRFILE</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="xdrfile_8c_1a44d01ba0a136b8e27ad362f5a823d14e" prot="public" static="no">
        <name>_FILE_OFFSET_BITS</name>
        <initializer>64</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/wes/libgmxcpp/src/xdrfile.c" line="25" column="9" bodyfile="/home/wes/libgmxcpp/src/xdrfile.c" bodystart="25" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="xdrfile_8c_1a1d95eeccc21a227ad1f5b1a5e24026b6" prot="public" static="no">
        <name>F77_FUNC</name>
        <param><defname>name</defname></param>
        <param><defname>NAME</defname></param>
        <initializer>name ## _</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/wes/libgmxcpp/src/xdrfile.c" line="44" column="9" bodyfile="/home/wes/libgmxcpp/src/xdrfile.c" bodystart="44" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="xdrfile_8c_1a81614c1c74435848f95702a1306294d8" prot="public" static="no">
        <name>xdr_getpos</name>
        <param><defname>xdrs</defname></param>
        <initializer>(*(xdrs)-&gt;x_ops-&gt;x_getpostn)(xdrs)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/wes/libgmxcpp/src/xdrfile.c" line="133" column="9" bodyfile="/home/wes/libgmxcpp/src/xdrfile.c" bodystart="133" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="xdrfile_8c_1a3499bb7f8951dd669844b876449df160" prot="public" static="no">
        <name>xdr_setpos</name>
        <param><defname>xdrs</defname></param>
        <param><defname>pos</defname></param>
        <initializer>(*(xdrs)-&gt;x_ops-&gt;x_setpostn)(xdrs, pos)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/wes/libgmxcpp/src/xdrfile.c" line="135" column="9" bodyfile="/home/wes/libgmxcpp/src/xdrfile.c" bodystart="135" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="xdrfile_8c_1ac02a1d873f6383c060c6d55c8fbca0ee" prot="public" static="no">
        <name>xdr_destroy</name>
        <param><defname>xdrs</defname></param>
        <initializer>do {                                                    \
                if ((xdrs)-&gt;x_ops-&gt;x_destroy)                   \
                        (*(xdrs)-&gt;x_ops-&gt;x_destroy)(xdrs);      \
        } while (0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/wes/libgmxcpp/src/xdrfile.c" line="137" column="9" bodyfile="/home/wes/libgmxcpp/src/xdrfile.c" bodystart="137" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="xdrfile_8c_1ae8c63f0332b93349364233724764db50" prot="public" static="no">
        <name>FIRSTIDX</name>
        <initializer>9</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/wes/libgmxcpp/src/xdrfile.c" line="755" column="9" bodyfile="/home/wes/libgmxcpp/src/xdrfile.c" bodystart="755" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="xdrfile_8c_1a24d182985b6e4703ddec36263434691d" prot="public" static="no">
        <name>LASTIDX</name>
        <initializer>(sizeof(magicints) / sizeof(*magicints))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/wes/libgmxcpp/src/xdrfile.c" line="757" column="9" bodyfile="/home/wes/libgmxcpp/src/xdrfile.c" bodystart="757" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="xdrfile_8c_1a56e9e94294d93e8fdd87af5e163d3ef0" prot="public" static="no">
        <name>MAX_FORTRAN_XDR</name>
        <initializer>1024</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/wes/libgmxcpp/src/xdrfile.c" line="1731" column="9" bodyfile="/home/wes/libgmxcpp/src/xdrfile.c" bodystart="1731" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="xdrfile_8c_1ae9604ef7292ce7549f06fa293bc0f8a7" prot="public" static="no">
        <name>xdr_getlong</name>
        <param><defname>xdrs</defname></param>
        <param><defname>longp</defname></param>
        <initializer>(*(xdrs)-&gt;x_ops-&gt;x_getlong)(xdrs, longp)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/wes/libgmxcpp/src/xdrfile.c" line="2079" column="9" bodyfile="/home/wes/libgmxcpp/src/xdrfile.c" bodystart="2079" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="xdrfile_8c_1a80090030e1695a524a456a4cead77692" prot="public" static="no">
        <name>xdr_putlong</name>
        <param><defname>xdrs</defname></param>
        <param><defname>longp</defname></param>
        <initializer>(*(xdrs)-&gt;x_ops-&gt;x_putlong)(xdrs, longp)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/wes/libgmxcpp/src/xdrfile.c" line="2081" column="9" bodyfile="/home/wes/libgmxcpp/src/xdrfile.c" bodystart="2081" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="xdrfile_8c_1ad7d74a25fcaf3e122972818abc2626c2" prot="public" static="no">
        <name>xdr_getbytes</name>
        <param><defname>xdrs</defname></param>
        <param><defname>addr</defname></param>
        <param><defname>len</defname></param>
        <initializer>(*(xdrs)-&gt;x_ops-&gt;x_getbytes)(xdrs, addr, len)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/wes/libgmxcpp/src/xdrfile.c" line="2083" column="9" bodyfile="/home/wes/libgmxcpp/src/xdrfile.c" bodystart="2083" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="xdrfile_8c_1a94ae8a1cfba1ce191c0cfee03578c029" prot="public" static="no">
        <name>xdr_putbytes</name>
        <param><defname>xdrs</defname></param>
        <param><defname>addr</defname></param>
        <param><defname>len</defname></param>
        <initializer>(*(xdrs)-&gt;x_ops-&gt;x_putbytes)(xdrs, addr, len)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/wes/libgmxcpp/src/xdrfile.c" line="2085" column="9" bodyfile="/home/wes/libgmxcpp/src/xdrfile.c" bodystart="2085" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="xdrfile_8c_1a962b13566bca4583fdc076e93c047f1b" prot="public" static="no">
        <name>BYTES_PER_XDR_UNIT</name>
        <initializer>4</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/wes/libgmxcpp/src/xdrfile.c" line="2088" column="9" bodyfile="/home/wes/libgmxcpp/src/xdrfile.c" bodystart="2088" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="xdrfile_8c_1a3055ce94f85d6aeec3b736d93b93a46a" prot="public" static="no">
        <name>xdr_op</name>
        <enumvalue id="xdrfile_8c_1a3055ce94f85d6aeec3b736d93b93a46aa667ca633eb284e94bac0809c6ea9be9e" prot="public">
          <name>XDR_ENCODE</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="xdrfile_8c_1a3055ce94f85d6aeec3b736d93b93a46aa14a5efd00dbe10ce40c3ee3a6480470f" prot="public">
          <name>XDR_DECODE</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="xdrfile_8c_1a3055ce94f85d6aeec3b736d93b93a46aa635a519e81b27b8f6b324c360d2354c4" prot="public">
          <name>XDR_FREE</name>
          <initializer>= 2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/wes/libgmxcpp/src/xdrfile.c" line="73" column="1" bodyfile="/home/wes/libgmxcpp/src/xdrfile.c" bodystart="72" bodyend="77"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="xdrfile_8c_1ad4d0ec81fc0cea2ad1d2675752206521" prot="public" static="no">
        <type>struct <ref refid="structXDR" kindref="compound">XDR</ref></type>
        <definition>typedef struct XDR XDR</definition>
        <argsstring></argsstring>
        <name>XDR</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/wes/libgmxcpp/src/xdrfile.c" line="47" column="1" bodyfile="/home/wes/libgmxcpp/src/xdrfile.c" bodystart="101" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="xdrfile_8c_1a7a8be18a745a41bc7be564e28f96a7ca" prot="public" static="no">
        <type>int(*</type>
        <definition>typedef int(* xdrproc_t) (XDR *, void *,...)</definition>
        <argsstring>)(XDR *, void *,...)</argsstring>
        <name>xdrproc_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/wes/libgmxcpp/src/xdrfile.c" line="2077" column="1" bodyfile="/home/wes/libgmxcpp/src/xdrfile.c" bodystart="2077" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="xdrfile_8c_1a43523f23975a3a32c40d18475a5142d8" prot="public" static="no" mutable="no">
        <type>char *</type>
        <definition>char* exdr_message[exdrNR]</definition>
        <argsstring>[exdrNR]</argsstring>
        <name>exdr_message</name>
        <initializer>= {
	&quot;OK&quot;, 
	&quot;Header&quot;,
	&quot;String&quot;, 
	&quot;Double&quot;,
	&quot;Integer&quot;,
	&quot;Float&quot;,
	&quot;Unsigned integer&quot;,
	&quot;Compressed 3D coordinate&quot;,
	&quot;Closing file&quot;,
	&quot;Magic number&quot;,
	&quot;Not enough memory&quot;,
	&quot;End of file&quot;,
	&quot;File not found&quot; 
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/wes/libgmxcpp/src/xdrfile.c" line="47" column="1" bodyfile="/home/wes/libgmxcpp/src/xdrfile.c" bodystart="47" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="xdrfile_8c_1ab4bcf14b71c96de9c688f9adc10516fc" prot="public" static="yes" mutable="no">
        <type>const int</type>
        <definition>const int magicints[]</definition>
        <argsstring>[]</argsstring>
        <name>magicints</name>
        <initializer>= 
{
    0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 10, 12, 16, 20, 25, 32, 40, 50, 64,
    80, 101, 128, 161, 203, 256, 322, 406, 512, 645, 812, 1024, 1290,
    1625, 2048, 2580, 3250, 4096, 5060, 6501, 8192, 10321, 13003, 
    16384, 20642, 26007, 32768, 41285, 52015, 65536,82570, 104031, 
    131072, 165140, 208063, 262144, 330280, 416127, 524287, 660561, 
    832255, 1048576, 1321122, 1664510, 2097152, 2642245, 3329021, 
    4194304, 5284491, 6658042, 8388607, 10568983, 13316085, 16777216 
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/wes/libgmxcpp/src/xdrfile.c" line="744" column="1" bodyfile="/home/wes/libgmxcpp/src/xdrfile.c" bodystart="744" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="xdrfile_8c_1ade213893f3c0a4c3877036d95a0c93ef" prot="public" static="yes" mutable="no">
        <type><ref refid="structXDRFILE" kindref="compound">XDRFILE</ref> *</type>
        <definition>XDRFILE* f77xdr[MAX_FORTRAN_XDR]</definition>
        <argsstring>[MAX_FORTRAN_XDR]</argsstring>
        <name>f77xdr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/wes/libgmxcpp/src/xdrfile.c" line="1732" column="1" bodyfile="/home/wes/libgmxcpp/src/xdrfile.c" bodystart="1732" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="xdrfile_8c_1ac88e497eec1cf4958fd3c43519ea55c5" prot="public" static="yes" mutable="no">
        <type>int</type>
        <definition>int f77init</definition>
        <argsstring></argsstring>
        <name>f77init</name>
        <initializer>= 1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/wes/libgmxcpp/src/xdrfile.c" line="1733" column="1" bodyfile="/home/wes/libgmxcpp/src/xdrfile.c" bodystart="1733" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="xdrfile_8c_1a957d3bdc0ca8cd9a90bb9fb3c9026a6d" prot="public" static="yes" mutable="no">
        <type>char</type>
        <definition>char xdr_zero[BYTES_PER_XDR_UNIT]</definition>
        <argsstring>[BYTES_PER_XDR_UNIT]</argsstring>
        <name>xdr_zero</name>
        <initializer>= {0, 0, 0, 0}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/wes/libgmxcpp/src/xdrfile.c" line="2089" column="1" bodyfile="/home/wes/libgmxcpp/src/xdrfile.c" bodystart="2089" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="xdrfile_8c_1a0c7ce3df46f1f53344230b07a30a082b" prot="public" static="yes" mutable="no">
        <type>const struct xdr_ops</type>
        <definition>const struct xdr_ops xdrstdio_ops</definition>
        <argsstring></argsstring>
        <name>xdrstdio_ops</name>
        <initializer>=
	{
		xdrstdio_getlong,		
		xdrstdio_putlong,		
		xdrstdio_getbytes,       	
		xdrstdio_putbytes,     	
		xdrstdio_getpos,		
		xdrstdio_setpos,		
		xdrstdio_destroy,		
	}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/wes/libgmxcpp/src/xdrfile.c" line="2502" column="1" bodyfile="/home/wes/libgmxcpp/src/xdrfile.c" bodystart="2507" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="xdrfile_8c_1a2a349090c63fd189f476e09221d8214e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int xdr_char</definition>
        <argsstring>(XDR *xdrs, char *ip)</argsstring>
        <name>xdr_char</name>
        <param>
          <type><ref refid="structXDR" kindref="compound">XDR</ref> *</type>
          <declname>xdrs</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>ip</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/wes/libgmxcpp/src/xdrfile.c" line="121" column="1" bodyfile="/home/wes/libgmxcpp/src/xdrfile.c" bodystart="2227" bodyend="2238"/>
      </memberdef>
      <memberdef kind="function" id="xdrfile_8c_1ae649fd080341c7751cfb6b8bcdd8600a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int xdr_u_char</definition>
        <argsstring>(XDR *xdrs, unsigned char *ip)</argsstring>
        <name>xdr_u_char</name>
        <param>
          <type><ref refid="structXDR" kindref="compound">XDR</ref> *</type>
          <declname>xdrs</declname>
        </param>
        <param>
          <type>unsigned char *</type>
          <declname>ip</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/wes/libgmxcpp/src/xdrfile.c" line="122" column="1" bodyfile="/home/wes/libgmxcpp/src/xdrfile.c" bodystart="2241" bodyend="2252"/>
      </memberdef>
      <memberdef kind="function" id="xdrfile_8c_1ac1403adc408c83cd9ac7f7b6ab9541de" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int xdr_short</definition>
        <argsstring>(XDR *xdrs, short *ip)</argsstring>
        <name>xdr_short</name>
        <param>
          <type><ref refid="structXDR" kindref="compound">XDR</ref> *</type>
          <declname>xdrs</declname>
        </param>
        <param>
          <type>short *</type>
          <declname>ip</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/wes/libgmxcpp/src/xdrfile.c" line="123" column="1" bodyfile="/home/wes/libgmxcpp/src/xdrfile.c" bodystart="2177" bodyend="2199"/>
      </memberdef>
      <memberdef kind="function" id="xdrfile_8c_1a63fc68e968d80672eba153d9c2d2a9b2" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int xdr_u_short</definition>
        <argsstring>(XDR *xdrs, unsigned short *ip)</argsstring>
        <name>xdr_u_short</name>
        <param>
          <type><ref refid="structXDR" kindref="compound">XDR</ref> *</type>
          <declname>xdrs</declname>
        </param>
        <param>
          <type>unsigned short *</type>
          <declname>ip</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/wes/libgmxcpp/src/xdrfile.c" line="124" column="1" bodyfile="/home/wes/libgmxcpp/src/xdrfile.c" bodystart="2202" bodyend="2224"/>
      </memberdef>
      <memberdef kind="function" id="xdrfile_8c_1a17de1dedfb2d760caa2925bb016eca27" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int xdr_int</definition>
        <argsstring>(XDR *xdrs, int *ip)</argsstring>
        <name>xdr_int</name>
        <param>
          <type><ref refid="structXDR" kindref="compound">XDR</ref> *</type>
          <declname>xdrs</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>ip</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/wes/libgmxcpp/src/xdrfile.c" line="125" column="1" bodyfile="/home/wes/libgmxcpp/src/xdrfile.c" bodystart="2131" bodyend="2151"/>
      </memberdef>
      <memberdef kind="function" id="xdrfile_8c_1ab6a88fe3c93cb1e30053186737a16ef6" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int xdr_u_int</definition>
        <argsstring>(XDR *xdrs, unsigned int *ip)</argsstring>
        <name>xdr_u_int</name>
        <param>
          <type><ref refid="structXDR" kindref="compound">XDR</ref> *</type>
          <declname>xdrs</declname>
        </param>
        <param>
          <type>unsigned int *</type>
          <declname>ip</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/wes/libgmxcpp/src/xdrfile.c" line="126" column="1" bodyfile="/home/wes/libgmxcpp/src/xdrfile.c" bodystart="2154" bodyend="2174"/>
      </memberdef>
      <memberdef kind="function" id="xdrfile_8c_1a9ccc35151a1c42735f2711a6ec18faf5" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int xdr_float</definition>
        <argsstring>(XDR *xdrs, float *ip)</argsstring>
        <name>xdr_float</name>
        <param>
          <type><ref refid="structXDR" kindref="compound">XDR</ref> *</type>
          <declname>xdrs</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>ip</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/wes/libgmxcpp/src/xdrfile.c" line="127" column="1" bodyfile="/home/wes/libgmxcpp/src/xdrfile.c" bodystart="2381" bodyend="2410"/>
      </memberdef>
      <memberdef kind="function" id="xdrfile_8c_1a988fdd6e6967e85efc0493710ee28169" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int xdr_double</definition>
        <argsstring>(XDR *xdrs, double *ip)</argsstring>
        <name>xdr_double</name>
        <param>
          <type><ref refid="structXDR" kindref="compound">XDR</ref> *</type>
          <declname>xdrs</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>ip</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/wes/libgmxcpp/src/xdrfile.c" line="128" column="1" bodyfile="/home/wes/libgmxcpp/src/xdrfile.c" bodystart="2414" bodyend="2493"/>
      </memberdef>
      <memberdef kind="function" id="xdrfile_8c_1adc6ebbf4c7773eb89a6b049b11056c60" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int xdr_string</definition>
        <argsstring>(XDR *xdrs, char **ip, unsigned int maxsize)</argsstring>
        <name>xdr_string</name>
        <param>
          <type><ref refid="structXDR" kindref="compound">XDR</ref> *</type>
          <declname>xdrs</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>ip</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>maxsize</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/wes/libgmxcpp/src/xdrfile.c" line="129" column="1" bodyfile="/home/wes/libgmxcpp/src/xdrfile.c" bodystart="2310" bodyend="2374"/>
      </memberdef>
      <memberdef kind="function" id="xdrfile_8c_1af07f03b9ac64eec2f35c49a4f840cf6f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int xdr_opaque</definition>
        <argsstring>(XDR *xdrs, char *cp, unsigned int cnt)</argsstring>
        <name>xdr_opaque</name>
        <param>
          <type><ref refid="structXDR" kindref="compound">XDR</ref> *</type>
          <declname>xdrs</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>cp</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>cnt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/wes/libgmxcpp/src/xdrfile.c" line="130" column="1" bodyfile="/home/wes/libgmxcpp/src/xdrfile.c" bodystart="2260" bodyend="2303"/>
      </memberdef>
      <memberdef kind="function" id="xdrfile_8c_1ab69ce8ade3f6dd013f8d41d18eb0db01" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void xdrstdio_create</definition>
        <argsstring>(XDR *xdrs, FILE *fp, enum xdr_op xop)</argsstring>
        <name>xdrstdio_create</name>
        <param>
          <type><ref refid="structXDR" kindref="compound">XDR</ref> *</type>
          <declname>xdrs</declname>
        </param>
        <param>
          <type>FILE *</type>
          <declname>fp</declname>
        </param>
        <param>
          <type>enum xdr_op</type>
          <declname>xop</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/wes/libgmxcpp/src/xdrfile.c" line="131" column="1" bodyfile="/home/wes/libgmxcpp/src/xdrfile.c" bodystart="2524" bodyend="2530"/>
      </memberdef>
      <memberdef kind="function" id="xdrfile_8c_1a8ae08773e2f7fab7b88a37bf530ea558" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structXDRFILE" kindref="compound">XDRFILE</ref> *</type>
        <definition>XDRFILE* xdrfile_open</definition>
        <argsstring>(const char *path, const char *mode)</argsstring>
        <name>xdrfile_open</name>
        <param>
          <type>const char *</type>
          <declname>path</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>mode</declname>
        </param>
        <briefdescription>
<para>Open a portable binary file, just like fopen() </para>        </briefdescription>
        <detaileddescription>
<para>Use this routine much like calls to the standard library function fopen(). The only difference is that the returned pointer should only be used with routines defined in this header.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>path</parametername>
</parameternamelist>
<parameterdescription>
<para>Full or relative path (including name) of the file </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mode</parametername>
</parameternamelist>
<parameterdescription>
<para>&quot;r&quot; for reading, &quot;w&quot; for writing, &quot;a&quot; for append.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to abstract xdr file datatype, or NULL if an error occurs. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/wes/libgmxcpp/src/xdrfile.c" line="176" column="1" bodyfile="/home/wes/libgmxcpp/src/xdrfile.c" bodystart="176" bodyend="216"/>
      </memberdef>
      <memberdef kind="function" id="xdrfile_8c_1ac6ed9a0cbb2e66e63be2765dec55ef45" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int xdrfile_close</definition>
        <argsstring>(XDRFILE *xfp)</argsstring>
        <name>xdrfile_close</name>
        <param>
          <type><ref refid="structXDRFILE" kindref="compound">XDRFILE</ref> *</type>
          <declname>xfp</declname>
        </param>
        <briefdescription>
<para>Close a previously opened portable binary file, just like fclose() </para>        </briefdescription>
        <detaileddescription>
<para>Use this routine much like calls to the standard library function fopen(). The only difference is that it is used for an <ref refid="structXDRFILE" kindref="compound">XDRFILE</ref> handle instead of a FILE handle.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>xfp</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to an abstract <ref refid="structXDRFILE" kindref="compound">XDRFILE</ref> datatype</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, non-zero on error. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/wes/libgmxcpp/src/xdrfile.c" line="219" column="1" bodyfile="/home/wes/libgmxcpp/src/xdrfile.c" bodystart="219" bodyend="237"/>
      </memberdef>
      <memberdef kind="function" id="xdrfile_8c_1afd6ea22cd248c0e56c7ba38de3ea29cb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int xdrfile_read_int</definition>
        <argsstring>(int *ptr, int ndata, XDRFILE *xfp)</argsstring>
        <name>xdrfile_read_int</name>
        <param>
          <type>int *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ndata</declname>
        </param>
        <param>
          <type><ref refid="structXDRFILE" kindref="compound">XDRFILE</ref> *</type>
          <declname>xfp</declname>
        </param>
        <briefdescription>
<para>Read one or more <emphasis>integer</emphasis> type variable(s) </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to memory where data should be written </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ndata</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of integers to read </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xfp</parametername>
</parameternamelist>
<parameterdescription>
<para>Handle to portable binary file, created with <ref refid="xdrfile_8h_1a8ae08773e2f7fab7b88a37bf530ea558" kindref="member">xdrfile_open()</ref></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Number of integers read</para></simplesect>
The integer data type is assumed to be less than or equal to 32 bits.</para><para>We do not provide any routines for reading/writing 64-bit integers, since<itemizedlist>
<listitem><para>Not all <ref refid="structXDR" kindref="compound">XDR</ref> implementations support it</para></listitem><listitem><para>Not all machines have 64-bit integers</para></listitem></itemizedlist>
</para><para>Split your 64-bit data into two 32-bit integers for portability! </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/wes/libgmxcpp/src/xdrfile.c" line="242" column="1" bodyfile="/home/wes/libgmxcpp/src/xdrfile.c" bodystart="242" bodyend="251"/>
      </memberdef>
      <memberdef kind="function" id="xdrfile_8c_1aebeea86c177fe409a3b737f93674137f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int xdrfile_write_int</definition>
        <argsstring>(int *ptr, int ndata, XDRFILE *xfp)</argsstring>
        <name>xdrfile_write_int</name>
        <param>
          <type>int *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ndata</declname>
        </param>
        <param>
          <type><ref refid="structXDRFILE" kindref="compound">XDRFILE</ref> *</type>
          <declname>xfp</declname>
        </param>
        <briefdescription>
<para>Write one or more <emphasis>integer</emphasis> type variable(s) </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to memory where data should be read </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ndata</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of integers to write. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xfp</parametername>
</parameternamelist>
<parameterdescription>
<para>Handle to portable binary file, created with <ref refid="xdrfile_8h_1a8ae08773e2f7fab7b88a37bf530ea558" kindref="member">xdrfile_open()</ref></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Number of integers written</para></simplesect>
The integer data type is assumed to be less than or equal to 32 bits.</para><para>We do not provide any routines for reading/writing 64-bit integers, since<itemizedlist>
<listitem><para>Not all <ref refid="structXDR" kindref="compound">XDR</ref> implementations support it</para></listitem><listitem><para>Not all machines have 64-bit integers</para></listitem></itemizedlist>
</para><para>Split your 64-bit data into two 32-bit integers for portability! </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/wes/libgmxcpp/src/xdrfile.c" line="254" column="1" bodyfile="/home/wes/libgmxcpp/src/xdrfile.c" bodystart="254" bodyend="262"/>
      </memberdef>
      <memberdef kind="function" id="xdrfile_8c_1ab8c3a97279a88f549001113659a980a1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int xdrfile_read_uint</definition>
        <argsstring>(unsigned int *ptr, int ndata, XDRFILE *xfp)</argsstring>
        <name>xdrfile_read_uint</name>
        <param>
          <type>unsigned int *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ndata</declname>
        </param>
        <param>
          <type><ref refid="structXDRFILE" kindref="compound">XDRFILE</ref> *</type>
          <declname>xfp</declname>
        </param>
        <briefdescription>
<para>Read one or more <emphasis>unsigned</emphasis> <emphasis>integers</emphasis> type variable(s) </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to memory where data should be written </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ndata</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of unsigned integers to read </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xfp</parametername>
</parameternamelist>
<parameterdescription>
<para>Handle to portable binary file, created with <ref refid="xdrfile_8h_1a8ae08773e2f7fab7b88a37bf530ea558" kindref="member">xdrfile_open()</ref></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Number of unsigned integers read</para></simplesect>
The integer data type is assumed to be less than or equal to 32 bits.</para><para>We do not provide any routines for reading/writing 64-bit integers, since<itemizedlist>
<listitem><para>Not all <ref refid="structXDR" kindref="compound">XDR</ref> implementations support it</para></listitem><listitem><para>Not all machines have 64-bit integers</para></listitem></itemizedlist>
</para><para>Split your 64-bit data into two 32-bit integers for portability! </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/wes/libgmxcpp/src/xdrfile.c" line="266" column="1" bodyfile="/home/wes/libgmxcpp/src/xdrfile.c" bodystart="266" bodyend="275"/>
      </memberdef>
      <memberdef kind="function" id="xdrfile_8c_1ad242afa21abcace1239f9e73552afa3a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int xdrfile_write_uint</definition>
        <argsstring>(unsigned int *ptr, int ndata, XDRFILE *xfp)</argsstring>
        <name>xdrfile_write_uint</name>
        <param>
          <type>unsigned int *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ndata</declname>
        </param>
        <param>
          <type><ref refid="structXDRFILE" kindref="compound">XDRFILE</ref> *</type>
          <declname>xfp</declname>
        </param>
        <briefdescription>
<para>Write one or more <emphasis>unsigned</emphasis> <emphasis>integer</emphasis> type variable(s) </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to memory where data should be read </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ndata</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of unsigned integers to write. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xfp</parametername>
</parameternamelist>
<parameterdescription>
<para>Handle to portable binary file, created with <ref refid="xdrfile_8h_1a8ae08773e2f7fab7b88a37bf530ea558" kindref="member">xdrfile_open()</ref></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Number of unsigned integers written</para></simplesect>
The integer data type is assumed to be less than or equal to 32 bits.</para><para>We do not provide any routines for reading/writing 64-bit integers, since<itemizedlist>
<listitem><para>Not all <ref refid="structXDR" kindref="compound">XDR</ref> implementations support it</para></listitem><listitem><para>Not all machines have 64-bit integers</para></listitem></itemizedlist>
</para><para>Split your 64-bit data into two 32-bit integers for portability! </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/wes/libgmxcpp/src/xdrfile.c" line="278" column="1" bodyfile="/home/wes/libgmxcpp/src/xdrfile.c" bodystart="278" bodyend="286"/>
      </memberdef>
      <memberdef kind="function" id="xdrfile_8c_1af7c7a33d1407f75a82f6ab703a788b63" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int xdrfile_read_char</definition>
        <argsstring>(char *ptr, int ndata, XDRFILE *xfp)</argsstring>
        <name>xdrfile_read_char</name>
        <param>
          <type>char *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ndata</declname>
        </param>
        <param>
          <type><ref refid="structXDRFILE" kindref="compound">XDRFILE</ref> *</type>
          <declname>xfp</declname>
        </param>
        <briefdescription>
<para>Read one or more <emphasis>char</emphasis> type variable(s) </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to memory where data should be written </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ndata</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of characters to read </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xfp</parametername>
</parameternamelist>
<parameterdescription>
<para>Handle to portable binary file, created with <ref refid="xdrfile_8h_1a8ae08773e2f7fab7b88a37bf530ea558" kindref="member">xdrfile_open()</ref></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Number of characters read </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/wes/libgmxcpp/src/xdrfile.c" line="289" column="1" bodyfile="/home/wes/libgmxcpp/src/xdrfile.c" bodystart="289" bodyend="298"/>
      </memberdef>
      <memberdef kind="function" id="xdrfile_8c_1a1d033b25e5815e33074bdde87a5d6c6b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int xdrfile_write_char</definition>
        <argsstring>(char *ptr, int ndata, XDRFILE *xfp)</argsstring>
        <name>xdrfile_write_char</name>
        <param>
          <type>char *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ndata</declname>
        </param>
        <param>
          <type><ref refid="structXDRFILE" kindref="compound">XDRFILE</ref> *</type>
          <declname>xfp</declname>
        </param>
        <briefdescription>
<para>Write one or more <emphasis>characters</emphasis> type variable(s) </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to memory where data should be read </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ndata</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of characters to write. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xfp</parametername>
</parameternamelist>
<parameterdescription>
<para>Handle to portable binary file, created with <ref refid="xdrfile_8h_1a8ae08773e2f7fab7b88a37bf530ea558" kindref="member">xdrfile_open()</ref></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Number of characters written </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/wes/libgmxcpp/src/xdrfile.c" line="301" column="1" bodyfile="/home/wes/libgmxcpp/src/xdrfile.c" bodystart="301" bodyend="309"/>
      </memberdef>
      <memberdef kind="function" id="xdrfile_8c_1aad58c6b4f38c651832d3023e614ec0c2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int xdrfile_read_uchar</definition>
        <argsstring>(unsigned char *ptr, int ndata, XDRFILE *xfp)</argsstring>
        <name>xdrfile_read_uchar</name>
        <param>
          <type>unsigned char *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ndata</declname>
        </param>
        <param>
          <type><ref refid="structXDRFILE" kindref="compound">XDRFILE</ref> *</type>
          <declname>xfp</declname>
        </param>
        <briefdescription>
<para>Read one or more <emphasis>unsigned</emphasis> <emphasis>char</emphasis> type variable(s) </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to memory where data should be written </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ndata</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of unsigned characters to read </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xfp</parametername>
</parameternamelist>
<parameterdescription>
<para>Handle to portable binary file, created with <ref refid="xdrfile_8h_1a8ae08773e2f7fab7b88a37bf530ea558" kindref="member">xdrfile_open()</ref></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Number of unsigned characters read </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/wes/libgmxcpp/src/xdrfile.c" line="313" column="1" bodyfile="/home/wes/libgmxcpp/src/xdrfile.c" bodystart="313" bodyend="322"/>
      </memberdef>
      <memberdef kind="function" id="xdrfile_8c_1a4113ec632fc6ca57b3fc9a5bb654c7f6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int xdrfile_write_uchar</definition>
        <argsstring>(unsigned char *ptr, int ndata, XDRFILE *xfp)</argsstring>
        <name>xdrfile_write_uchar</name>
        <param>
          <type>unsigned char *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ndata</declname>
        </param>
        <param>
          <type><ref refid="structXDRFILE" kindref="compound">XDRFILE</ref> *</type>
          <declname>xfp</declname>
        </param>
        <briefdescription>
<para>Write one or more <emphasis>unsigned</emphasis> <emphasis>characters</emphasis> type variable(s) </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to memory where data should be read </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ndata</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of unsigned characters to write. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xfp</parametername>
</parameternamelist>
<parameterdescription>
<para>Handle to portable binary file, created with <ref refid="xdrfile_8h_1a8ae08773e2f7fab7b88a37bf530ea558" kindref="member">xdrfile_open()</ref></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Number of unsigned characters written </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/wes/libgmxcpp/src/xdrfile.c" line="325" column="1" bodyfile="/home/wes/libgmxcpp/src/xdrfile.c" bodystart="325" bodyend="333"/>
      </memberdef>
      <memberdef kind="function" id="xdrfile_8c_1ae290f8ebe1675e7149b5b6934a49f6cb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int xdrfile_read_short</definition>
        <argsstring>(short *ptr, int ndata, XDRFILE *xfp)</argsstring>
        <name>xdrfile_read_short</name>
        <param>
          <type>short *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ndata</declname>
        </param>
        <param>
          <type><ref refid="structXDRFILE" kindref="compound">XDRFILE</ref> *</type>
          <declname>xfp</declname>
        </param>
        <briefdescription>
<para>Read one or more <emphasis>short</emphasis> type variable(s) </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to memory where data should be written </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ndata</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of shorts to read </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xfp</parametername>
</parameternamelist>
<parameterdescription>
<para>Handle to portable binary file, created with <ref refid="xdrfile_8h_1a8ae08773e2f7fab7b88a37bf530ea558" kindref="member">xdrfile_open()</ref></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Number of shorts read </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/wes/libgmxcpp/src/xdrfile.c" line="336" column="1" bodyfile="/home/wes/libgmxcpp/src/xdrfile.c" bodystart="336" bodyend="345"/>
      </memberdef>
      <memberdef kind="function" id="xdrfile_8c_1ac846d7c595e8233275d02da313af4a65" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int xdrfile_write_short</definition>
        <argsstring>(short *ptr, int ndata, XDRFILE *xfp)</argsstring>
        <name>xdrfile_write_short</name>
        <param>
          <type>short *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ndata</declname>
        </param>
        <param>
          <type><ref refid="structXDRFILE" kindref="compound">XDRFILE</ref> *</type>
          <declname>xfp</declname>
        </param>
        <briefdescription>
<para>Write one or more <emphasis>short</emphasis> type variable(s) </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to memory where data should be read </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ndata</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of shorts to write. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xfp</parametername>
</parameternamelist>
<parameterdescription>
<para>Handle to portable binary file, created with <ref refid="xdrfile_8h_1a8ae08773e2f7fab7b88a37bf530ea558" kindref="member">xdrfile_open()</ref></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Number of shorts written </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/wes/libgmxcpp/src/xdrfile.c" line="348" column="1" bodyfile="/home/wes/libgmxcpp/src/xdrfile.c" bodystart="348" bodyend="356"/>
      </memberdef>
      <memberdef kind="function" id="xdrfile_8c_1a1305e5491face504b51608e8124ff897" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int xdrfile_read_ushort</definition>
        <argsstring>(unsigned short *ptr, int ndata, XDRFILE *xfp)</argsstring>
        <name>xdrfile_read_ushort</name>
        <param>
          <type>unsigned short *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ndata</declname>
        </param>
        <param>
          <type><ref refid="structXDRFILE" kindref="compound">XDRFILE</ref> *</type>
          <declname>xfp</declname>
        </param>
        <briefdescription>
<para>Read one or more <emphasis>unsigned</emphasis> <emphasis>short</emphasis> type variable(s) </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to memory where data should be written </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ndata</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of unsigned shorts to read </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xfp</parametername>
</parameternamelist>
<parameterdescription>
<para>Handle to portable binary file, created with <ref refid="xdrfile_8h_1a8ae08773e2f7fab7b88a37bf530ea558" kindref="member">xdrfile_open()</ref></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Number of unsigned shorts read </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/wes/libgmxcpp/src/xdrfile.c" line="360" column="1" bodyfile="/home/wes/libgmxcpp/src/xdrfile.c" bodystart="360" bodyend="369"/>
      </memberdef>
      <memberdef kind="function" id="xdrfile_8c_1a1666dc36baa317ff0856cb7526410069" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int xdrfile_write_ushort</definition>
        <argsstring>(unsigned short *ptr, int ndata, XDRFILE *xfp)</argsstring>
        <name>xdrfile_write_ushort</name>
        <param>
          <type>unsigned short *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ndata</declname>
        </param>
        <param>
          <type><ref refid="structXDRFILE" kindref="compound">XDRFILE</ref> *</type>
          <declname>xfp</declname>
        </param>
        <briefdescription>
<para>Write one or more <emphasis>unsigned</emphasis> <emphasis>short</emphasis> type variable(s) </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to memory where data should be read </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ndata</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of unsigned shorts to write. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xfp</parametername>
</parameternamelist>
<parameterdescription>
<para>Handle to portable binary file, created with <ref refid="xdrfile_8h_1a8ae08773e2f7fab7b88a37bf530ea558" kindref="member">xdrfile_open()</ref></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Number of unsigned shorts written </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/wes/libgmxcpp/src/xdrfile.c" line="372" column="1" bodyfile="/home/wes/libgmxcpp/src/xdrfile.c" bodystart="372" bodyend="380"/>
      </memberdef>
      <memberdef kind="function" id="xdrfile_8c_1a0284c6956e48e298820448fc86640e76" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int xdrfile_read_float</definition>
        <argsstring>(float *ptr, int ndata, XDRFILE *xfp)</argsstring>
        <name>xdrfile_read_float</name>
        <param>
          <type>float *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ndata</declname>
        </param>
        <param>
          <type><ref refid="structXDRFILE" kindref="compound">XDRFILE</ref> *</type>
          <declname>xfp</declname>
        </param>
        <briefdescription>
<para>Read one or more <emphasis>float</emphasis> type variable(s) </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to memory where data should be written </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ndata</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of floats to read </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xfp</parametername>
</parameternamelist>
<parameterdescription>
<para>Handle to portable binary file, created with <ref refid="xdrfile_8h_1a8ae08773e2f7fab7b88a37bf530ea558" kindref="member">xdrfile_open()</ref></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Number of floats read </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/wes/libgmxcpp/src/xdrfile.c" line="383" column="1" bodyfile="/home/wes/libgmxcpp/src/xdrfile.c" bodystart="383" bodyend="390"/>
      </memberdef>
      <memberdef kind="function" id="xdrfile_8c_1a07b2f0fbacf3d25f6d6601e6c4285cdf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int xdrfile_write_float</definition>
        <argsstring>(float *ptr, int ndata, XDRFILE *xfp)</argsstring>
        <name>xdrfile_write_float</name>
        <param>
          <type>float *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ndata</declname>
        </param>
        <param>
          <type><ref refid="structXDRFILE" kindref="compound">XDRFILE</ref> *</type>
          <declname>xfp</declname>
        </param>
        <briefdescription>
<para>Write one or more <emphasis>float</emphasis> type variable(s) </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to memory where data should be read </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ndata</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of floats to write. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xfp</parametername>
</parameternamelist>
<parameterdescription>
<para>Handle to portable binary file, created with <ref refid="xdrfile_8h_1a8ae08773e2f7fab7b88a37bf530ea558" kindref="member">xdrfile_open()</ref></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Number of floats written </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/wes/libgmxcpp/src/xdrfile.c" line="393" column="1" bodyfile="/home/wes/libgmxcpp/src/xdrfile.c" bodystart="393" bodyend="400"/>
      </memberdef>
      <memberdef kind="function" id="xdrfile_8c_1ad5be7d297094580d000cb372e2441a48" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int xdrfile_read_double</definition>
        <argsstring>(double *ptr, int ndata, XDRFILE *xfp)</argsstring>
        <name>xdrfile_read_double</name>
        <param>
          <type>double *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ndata</declname>
        </param>
        <param>
          <type><ref refid="structXDRFILE" kindref="compound">XDRFILE</ref> *</type>
          <declname>xfp</declname>
        </param>
        <briefdescription>
<para>Read one or more <emphasis>double</emphasis> type variable(s) </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to memory where data should be written </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ndata</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of doubles to read </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xfp</parametername>
</parameternamelist>
<parameterdescription>
<para>Handle to portable binary file, created with <ref refid="xdrfile_8h_1a8ae08773e2f7fab7b88a37bf530ea558" kindref="member">xdrfile_open()</ref></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Number of doubles read </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/wes/libgmxcpp/src/xdrfile.c" line="403" column="1" bodyfile="/home/wes/libgmxcpp/src/xdrfile.c" bodystart="403" bodyend="410"/>
      </memberdef>
      <memberdef kind="function" id="xdrfile_8c_1a423d0a114162a2be532c1933bb4171fb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int xdrfile_write_double</definition>
        <argsstring>(double *ptr, int ndata, XDRFILE *xfp)</argsstring>
        <name>xdrfile_write_double</name>
        <param>
          <type>double *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ndata</declname>
        </param>
        <param>
          <type><ref refid="structXDRFILE" kindref="compound">XDRFILE</ref> *</type>
          <declname>xfp</declname>
        </param>
        <briefdescription>
<para>Write one or more <emphasis>double</emphasis> type variable(s) </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to memory where data should be read </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ndata</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of double to write. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xfp</parametername>
</parameternamelist>
<parameterdescription>
<para>Handle to portable binary file, created with <ref refid="xdrfile_8h_1a8ae08773e2f7fab7b88a37bf530ea558" kindref="member">xdrfile_open()</ref></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Number of doubles written </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/wes/libgmxcpp/src/xdrfile.c" line="413" column="1" bodyfile="/home/wes/libgmxcpp/src/xdrfile.c" bodystart="413" bodyend="420"/>
      </memberdef>
      <memberdef kind="function" id="xdrfile_8c_1a5df896d6b1635fb4901cc7e5c148163b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int xdrfile_read_string</definition>
        <argsstring>(char *ptr, int maxlen, XDRFILE *xfp)</argsstring>
        <name>xdrfile_read_string</name>
        <param>
          <type>char *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>int</type>
          <declname>maxlen</declname>
        </param>
        <param>
          <type><ref refid="structXDRFILE" kindref="compound">XDRFILE</ref> *</type>
          <declname>xfp</declname>
        </param>
        <briefdescription>
<para>Read a string (array of characters) </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to memory where data should be written </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>maxlen</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum length of string. If no end-of-string is encountered, one byte less than this is read and end-of-string appended. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xfp</parametername>
</parameternamelist>
<parameterdescription>
<para>Handle to portable binary file, created with <ref refid="xdrfile_8h_1a8ae08773e2f7fab7b88a37bf530ea558" kindref="member">xdrfile_open()</ref></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Number of characters read, including end-of-string </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/wes/libgmxcpp/src/xdrfile.c" line="423" column="1" bodyfile="/home/wes/libgmxcpp/src/xdrfile.c" bodystart="423" bodyend="436"/>
      </memberdef>
      <memberdef kind="function" id="xdrfile_8c_1a80badf578ca42f275c2aae1d0788b9d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int xdrfile_write_string</definition>
        <argsstring>(char *ptr, XDRFILE *xfp)</argsstring>
        <name>xdrfile_write_string</name>
        <param>
          <type>char *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type><ref refid="structXDRFILE" kindref="compound">XDRFILE</ref> *</type>
          <declname>xfp</declname>
        </param>
        <briefdescription>
<para>Write a string (array of characters) </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to memory where data should be read </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xfp</parametername>
</parameternamelist>
<parameterdescription>
<para>Handle to portable binary file, created with <ref refid="xdrfile_8h_1a8ae08773e2f7fab7b88a37bf530ea558" kindref="member">xdrfile_open()</ref></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Number of characters written, including end-of-string </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/wes/libgmxcpp/src/xdrfile.c" line="439" column="1" bodyfile="/home/wes/libgmxcpp/src/xdrfile.c" bodystart="439" bodyend="447"/>
      </memberdef>
      <memberdef kind="function" id="xdrfile_8c_1a4aab3ec60b7c2b7ab72908c846ed0c14" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int xdrfile_read_opaque</definition>
        <argsstring>(char *ptr, int cnt, XDRFILE *xfp)</argsstring>
        <name>xdrfile_read_opaque</name>
        <param>
          <type>char *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nbytes</declname>
          <defname>cnt</defname>
        </param>
        <param>
          <type><ref refid="structXDRFILE" kindref="compound">XDRFILE</ref> *</type>
          <declname>xfp</declname>
        </param>
        <briefdescription>
<para>Read raw bytes from file (unknown datatype) </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to memory where data should be written </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nbytes</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of bytes to read. No conversion whatsoever is done. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xfp</parametername>
</parameternamelist>
<parameterdescription>
<para>Handle to portable binary file, created with <ref refid="xdrfile_8h_1a8ae08773e2f7fab7b88a37bf530ea558" kindref="member">xdrfile_open()</ref></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Number of bytes read from file </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/wes/libgmxcpp/src/xdrfile.c" line="451" column="1" bodyfile="/home/wes/libgmxcpp/src/xdrfile.c" bodystart="451" bodyend="457"/>
      </memberdef>
      <memberdef kind="function" id="xdrfile_8c_1acd8a6abe8f39a3b10f102744423b2315" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int xdrfile_write_opaque</definition>
        <argsstring>(char *ptr, int cnt, XDRFILE *xfp)</argsstring>
        <name>xdrfile_write_opaque</name>
        <param>
          <type>char *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nbytes</declname>
          <defname>cnt</defname>
        </param>
        <param>
          <type><ref refid="structXDRFILE" kindref="compound">XDRFILE</ref> *</type>
          <declname>xfp</declname>
        </param>
        <briefdescription>
<para>Write raw bytes to file (unknown datatype) </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to memory where data should be read </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nbytes</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of bytes to write. No conversion whatsoever is done. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xfp</parametername>
</parameternamelist>
<parameterdescription>
<para>Handle to portable binary file, created with <ref refid="xdrfile_8h_1a8ae08773e2f7fab7b88a37bf530ea558" kindref="member">xdrfile_open()</ref></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Number of bytes written to file </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/wes/libgmxcpp/src/xdrfile.c" line="461" column="1" bodyfile="/home/wes/libgmxcpp/src/xdrfile.c" bodystart="461" bodyend="467"/>
      </memberdef>
      <memberdef kind="function" id="xdrfile_8c_1ad1d7d6bc4187a1c87593d654b006bf2a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int sizeofint</definition>
        <argsstring>(int size)</argsstring>
        <name>sizeofint</name>
        <param>
          <type>int</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/wes/libgmxcpp/src/xdrfile.c" line="475" column="1" bodyfile="/home/wes/libgmxcpp/src/xdrfile.c" bodystart="475" bodyend="485"/>
      </memberdef>
      <memberdef kind="function" id="xdrfile_8c_1a6c3acbeff02857cca6df9779b42893b2" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int sizeofints</definition>
        <argsstring>(int num_of_ints, unsigned int sizes[])</argsstring>
        <name>sizeofints</name>
        <param>
          <type>int</type>
          <declname>num_of_ints</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>sizes</declname>
          <array>[]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/wes/libgmxcpp/src/xdrfile.c" line="500" column="1" bodyfile="/home/wes/libgmxcpp/src/xdrfile.c" bodystart="500" bodyend="532"/>
      </memberdef>
      <memberdef kind="function" id="xdrfile_8c_1ab6c4ce4aa1b6ed088342f9a6537eb5e7" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void encodebits</definition>
        <argsstring>(int buf[], int num_of_bits, int num)</argsstring>
        <name>encodebits</name>
        <param>
          <type>int</type>
          <declname>buf</declname>
          <array>[]</array>
        </param>
        <param>
          <type>int</type>
          <declname>num_of_bits</declname>
        </param>
        <param>
          <type>int</type>
          <declname>num</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/wes/libgmxcpp/src/xdrfile.c" line="544" column="1" bodyfile="/home/wes/libgmxcpp/src/xdrfile.c" bodystart="544" bodyend="578"/>
      </memberdef>
      <memberdef kind="function" id="xdrfile_8c_1a04ff972c779239f1e74a6bbe029fe5d7" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void encodeints</definition>
        <argsstring>(int buf[], int num_of_ints, int num_of_bits, unsigned int sizes[], unsigned int nums[])</argsstring>
        <name>encodeints</name>
        <param>
          <type>int</type>
          <declname>buf</declname>
          <array>[]</array>
        </param>
        <param>
          <type>int</type>
          <declname>num_of_ints</declname>
        </param>
        <param>
          <type>int</type>
          <declname>num_of_bits</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>sizes</declname>
          <array>[]</array>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>nums</declname>
          <array>[]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/wes/libgmxcpp/src/xdrfile.c" line="596" column="1" bodyfile="/home/wes/libgmxcpp/src/xdrfile.c" bodystart="596" bodyend="650"/>
      </memberdef>
      <memberdef kind="function" id="xdrfile_8c_1aa97a351ba887f8c6ab1010c3953dd489" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int decodebits</definition>
        <argsstring>(int buf[], int num_of_bits)</argsstring>
        <name>decodebits</name>
        <param>
          <type>int</type>
          <declname>buf</declname>
          <array>[]</array>
        </param>
        <param>
          <type>int</type>
          <declname>num_of_bits</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/wes/libgmxcpp/src/xdrfile.c" line="662" column="1" bodyfile="/home/wes/libgmxcpp/src/xdrfile.c" bodystart="662" bodyend="697"/>
      </memberdef>
      <memberdef kind="function" id="xdrfile_8c_1a4ada73b0c627880de433c93ebf4e6246" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void decodeints</definition>
        <argsstring>(int buf[], int num_of_ints, int num_of_bits, unsigned int sizes[], int nums[])</argsstring>
        <name>decodeints</name>
        <param>
          <type>int</type>
          <declname>buf</declname>
          <array>[]</array>
        </param>
        <param>
          <type>int</type>
          <declname>num_of_ints</declname>
        </param>
        <param>
          <type>int</type>
          <declname>num_of_bits</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>sizes</declname>
          <array>[]</array>
        </param>
        <param>
          <type>int</type>
          <declname>nums</declname>
          <array>[]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/wes/libgmxcpp/src/xdrfile.c" line="710" column="1" bodyfile="/home/wes/libgmxcpp/src/xdrfile.c" bodystart="710" bodyend="741"/>
      </memberdef>
      <memberdef kind="function" id="xdrfile_8c_1a2c6f3d9e6e104db82190c224c2e2e983" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int xdrfile_decompress_coord_float</definition>
        <argsstring>(float *ptr, int *size, float *precision, XDRFILE *xfp)</argsstring>
        <name>xdrfile_decompress_coord_float</name>
        <param>
          <type>float *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>ncoord</declname>
          <defname>size</defname>
        </param>
        <param>
          <type>float *</type>
          <declname>precision</declname>
        </param>
        <param>
          <type><ref refid="structXDRFILE" kindref="compound">XDRFILE</ref> *</type>
          <declname>xfp</declname>
        </param>
        <briefdescription>
<para>Decompress coordiates from <ref refid="structXDR" kindref="compound">XDR</ref> file to array of floats. </para>        </briefdescription>
        <detaileddescription>
<para>This routine will decompress three-dimensional coordinate data previously stored in an <ref refid="structXDR" kindref="compound">XDR</ref> file and store it in the specified array of floats.</para><para>The precision used during the earlier compression is read from the file and returned - you cannot adjust the accuracy at this stage.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to coordinates to compress (length&gt;= 3*ncoord) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ncoord</parametername>
</parameternamelist>
<parameterdescription>
<para>Max number of coordinate triplets to read on input, actual number of coordinate triplets read on return. If this is smaller than the number of coordinates in the frame an error will occur. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>precision</parametername>
</parameternamelist>
<parameterdescription>
<para>The precision used in the previous compression will be written to this variable on return. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xfp</parametername>
</parameternamelist>
<parameterdescription>
<para>Handle to portably binary file</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Number of coordinate triplets read. If this is negative, an error occured.</para></simplesect>
<simplesect kind="warning"><para>Since we cannot count on being able to set/get the position of large files (&gt;2Gb), it is not possible to recover from errors by re-reading the frame if the storage area you provided was too small. To avoid this from happening, we recommend that you store the number of coordinates triplet as an integer either in a header or just before the compressed coordinate data, so you can read it first and allocated enough memory. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/wes/libgmxcpp/src/xdrfile.c" line="763" column="1" bodyfile="/home/wes/libgmxcpp/src/xdrfile.c" bodystart="763" bodyend="962"/>
      </memberdef>
      <memberdef kind="function" id="xdrfile_8c_1a717a2590be038e1707c11a9e67ac8db2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int xdrfile_compress_coord_float</definition>
        <argsstring>(float *ptr, int size, float precision, XDRFILE *xfp)</argsstring>
        <name>xdrfile_compress_coord_float</name>
        <param>
          <type>float *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ncoord</declname>
          <defname>size</defname>
        </param>
        <param>
          <type>float</type>
          <declname>precision</declname>
        </param>
        <param>
          <type><ref refid="structXDRFILE" kindref="compound">XDRFILE</ref> *</type>
          <declname>xfp</declname>
        </param>
        <briefdescription>
<para>Compress coordiates in a float array to <ref refid="structXDR" kindref="compound">XDR</ref> file. </para>        </briefdescription>
        <detaileddescription>
<para>This routine will perform <emphasis>lossy</emphasis> compression on the three-dimensional coordinate data data specified and store it in the <ref refid="structXDR" kindref="compound">XDR</ref> file.</para><para>The lossy part of the compression consists of multiplying each coordinate with the precision argument and then rounding to integers. We suggest a default value of 1000.0, which means you are guaranteed three decimals of accuracy. The only limitation is that scaled coordinates must still fit in an integer variable, so if the precision is 1000.0 the coordinate magnitudes must be less than +-2e6.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to coordinates to compress (length 3*ncoord) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ncoord</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of coordinate triplets in data </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>precision</parametername>
</parameternamelist>
<parameterdescription>
<para>Scaling factor for lossy compression. If it is &lt;=0, the default value of 1000.0 is used. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xfp</parametername>
</parameternamelist>
<parameterdescription>
<para>Handle to portably binary file</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Number of coordinate triplets written. IMPORTANT: Check that this is equal to ncoord - if it is negative, an error occured. This should not happen with normal data, but if your coordinates are NaN or very large (&gt;1e6) it is not possible to use the compression.</para></simplesect>
<simplesect kind="warning"><para>The compression algorithm is not part of the <ref refid="structXDR" kindref="compound">XDR</ref> standard, and very complicated, so you will need this xdrfile module to read it later. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/wes/libgmxcpp/src/xdrfile.c" line="965" column="1" bodyfile="/home/wes/libgmxcpp/src/xdrfile.c" bodystart="965" bodyend="1255"/>
      </memberdef>
      <memberdef kind="function" id="xdrfile_8c_1a281ba881885072c21193c5312658729c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int xdrfile_decompress_coord_double</definition>
        <argsstring>(double *ptr, int *size, double *precision, XDRFILE *xfp)</argsstring>
        <name>xdrfile_decompress_coord_double</name>
        <param>
          <type>double *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>ncoord</declname>
          <defname>size</defname>
        </param>
        <param>
          <type>double *</type>
          <declname>precision</declname>
        </param>
        <param>
          <type><ref refid="structXDRFILE" kindref="compound">XDRFILE</ref> *</type>
          <declname>xfp</declname>
        </param>
        <briefdescription>
<para>Decompress coordiates from <ref refid="structXDR" kindref="compound">XDR</ref> file to array of doubles. </para>        </briefdescription>
        <detaileddescription>
<para>This routine will decompress three-dimensional coordinate data previously stored in an <ref refid="structXDR" kindref="compound">XDR</ref> file and store it in the specified array of doubles. Double will NOT give you any extra precision since the coordinates are compressed. This routine just avoids allocating a temporary array of floats.</para><para>The precision used during the earlier compression is read from the file and returned - you cannot adjust the accuracy at this stage.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to coordinates to compress (length&gt;= 3*ncoord) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ncoord</parametername>
</parameternamelist>
<parameterdescription>
<para>Max number of coordinate triplets to read on input, actual number of coordinate triplets read on return. If this is smaller than the number of coordinates in the frame an error will occur. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>precision</parametername>
</parameternamelist>
<parameterdescription>
<para>The precision used in the previous compression will be written to this variable on return. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xfp</parametername>
</parameternamelist>
<parameterdescription>
<para>Handle to portably binary file</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Number of coordinate triplets read. If this is negative, an error occured.</para></simplesect>
<simplesect kind="warning"><para>Since we cannot count on being able to set/get the position of large files (&gt;2Gb), it is not possible to recover from errors by re-reading the frame if the storage area you provided was too small. To avoid this from happening, we recommend that you store the number of coordinates triplet as an integer either in a header or just before the compressed coordinate data, so you can read it first and allocated enough memory. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/wes/libgmxcpp/src/xdrfile.c" line="1259" column="1" bodyfile="/home/wes/libgmxcpp/src/xdrfile.c" bodystart="1259" bodyend="1454"/>
      </memberdef>
      <memberdef kind="function" id="xdrfile_8c_1af5c3f46ad9363e1a14b7ce61483bd49e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int xdrfile_compress_coord_double</definition>
        <argsstring>(double *ptr, int size, double precision, XDRFILE *xfp)</argsstring>
        <name>xdrfile_compress_coord_double</name>
        <param>
          <type>double *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ncoord</declname>
          <defname>size</defname>
        </param>
        <param>
          <type>double</type>
          <declname>precision</declname>
        </param>
        <param>
          <type><ref refid="structXDRFILE" kindref="compound">XDRFILE</ref> *</type>
          <declname>xfp</declname>
        </param>
        <briefdescription>
<para>Compress coordiates in a double array to <ref refid="structXDR" kindref="compound">XDR</ref> file. </para>        </briefdescription>
        <detaileddescription>
<para>This routine will perform <emphasis>lossy</emphasis> compression on the three-dimensional coordinate data data specified and store it in the <ref refid="structXDR" kindref="compound">XDR</ref> file. Double will NOT give you any extra precision since the coordinates are compressed. This routine just avoids allocating a temporary array of floats.</para><para>The lossy part of the compression consists of multiplying each coordinate with the precision argument and then rounding to integers. We suggest a default value of 1000.0, which means you are guaranteed three decimals of accuracy. The only limitation is that scaled coordinates must still fit in an integer variable, so if the precision is 1000.0 the coordinate magnitudes must be less than +-2e6.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to coordinates to compress (length 3*ncoord) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ncoord</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of coordinate triplets in data </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>precision</parametername>
</parameternamelist>
<parameterdescription>
<para>Scaling factor for lossy compression. If it is &lt;=0, the default value of 1000.0 is used. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xfp</parametername>
</parameternamelist>
<parameterdescription>
<para>Handle to portably binary file</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Number of coordinate triplets written. IMPORTANT: Check that this is equal to ncoord - if it is negative, an error occured. This should not happen with normal data, but if your coordinates are NaN or very large (&gt;1e6) it is not possible to use the compression.</para></simplesect>
<simplesect kind="warning"><para>The compression algorithm is not part of the <ref refid="structXDR" kindref="compound">XDR</ref> standard, and very complicated, so you will need this xdrfile module to read it later. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/wes/libgmxcpp/src/xdrfile.c" line="1457" column="1" bodyfile="/home/wes/libgmxcpp/src/xdrfile.c" bodystart="1457" bodyend="1716"/>
      </memberdef>
      <memberdef kind="function" id="xdrfile_8c_1a21dec3c540c217b211524f523cf8be94" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int ftocstr</definition>
        <argsstring>(char *dest, int dest_len, char *src, int src_len)</argsstring>
        <name>ftocstr</name>
        <param>
          <type>char *</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dest_len</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>src</declname>
        </param>
        <param>
          <type>int</type>
          <declname>src_len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/wes/libgmxcpp/src/xdrfile.c" line="1736" column="1" bodyfile="/home/wes/libgmxcpp/src/xdrfile.c" bodystart="1878" bodyend="1893"/>
      </memberdef>
      <memberdef kind="function" id="xdrfile_8c_1a37dc0cc7f78d5270f21c7edc2f18de49" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int ctofstr</definition>
        <argsstring>(char *dest, int dest_len, char *src)</argsstring>
        <name>ctofstr</name>
        <param>
          <type>char *</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dest_len</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>src</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/wes/libgmxcpp/src/xdrfile.c" line="1737" column="1" bodyfile="/home/wes/libgmxcpp/src/xdrfile.c" bodystart="1896" bodyend="1905"/>
      </memberdef>
      <memberdef kind="function" id="xdrfile_8c_1aa403ed80fdd640f0194672ee7b2d6746" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void F77_FUNC</definition>
        <argsstring>(xdropen, XDROPEN)</argsstring>
        <name>F77_FUNC</name>
        <param>
          <type>xdropen</type>
        </param>
        <param>
          <type>XDROPEN</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/wes/libgmxcpp/src/xdrfile.c" line="1741" column="1" bodyfile="/home/wes/libgmxcpp/src/xdrfile.c" bodystart="1741" bodyend="1770"/>
      </memberdef>
      <memberdef kind="function" id="xdrfile_8c_1adbc282c969194125a7a2a747d82becbe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void F77_FUNC</definition>
        <argsstring>(xdrclose, XDRCLOSE)</argsstring>
        <name>F77_FUNC</name>
        <param>
          <type>xdrclose</type>
        </param>
        <param>
          <type>XDRCLOSE</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/wes/libgmxcpp/src/xdrfile.c" line="1773" column="1" bodyfile="/home/wes/libgmxcpp/src/xdrfile.c" bodystart="1773" bodyend="1779"/>
      </memberdef>
      <memberdef kind="function" id="xdrfile_8c_1a739bad7bce59d6aeb530bda415e105c5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void F77_FUNC</definition>
        <argsstring>(xdrrint, XDRRINT)</argsstring>
        <name>F77_FUNC</name>
        <param>
          <type>xdrrint</type>
        </param>
        <param>
          <type>XDRRINT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/wes/libgmxcpp/src/xdrfile.c" line="1783" column="1" bodyfile="/home/wes/libgmxcpp/src/xdrfile.c" bodystart="1783" bodyend="1786"/>
      </memberdef>
      <memberdef kind="function" id="xdrfile_8c_1aaac00423012e073038bd68506629b603" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void F77_FUNC</definition>
        <argsstring>(xdrwint, XDRWINT)</argsstring>
        <name>F77_FUNC</name>
        <param>
          <type>xdrwint</type>
        </param>
        <param>
          <type>XDRWINT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/wes/libgmxcpp/src/xdrfile.c" line="1789" column="1" bodyfile="/home/wes/libgmxcpp/src/xdrfile.c" bodystart="1789" bodyend="1792"/>
      </memberdef>
      <memberdef kind="function" id="xdrfile_8c_1ab2fe5c91f1d6b6d8ea77bdce2857aba5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void F77_FUNC</definition>
        <argsstring>(xdrruint, XDRRUINT)</argsstring>
        <name>F77_FUNC</name>
        <param>
          <type>xdrruint</type>
        </param>
        <param>
          <type>XDRRUINT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/wes/libgmxcpp/src/xdrfile.c" line="1795" column="1" bodyfile="/home/wes/libgmxcpp/src/xdrfile.c" bodystart="1795" bodyend="1798"/>
      </memberdef>
      <memberdef kind="function" id="xdrfile_8c_1a6013797f6e6b474577fa76e5df439579" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void F77_FUNC</definition>
        <argsstring>(xdrwuint, XDRWUINT)</argsstring>
        <name>F77_FUNC</name>
        <param>
          <type>xdrwuint</type>
        </param>
        <param>
          <type>XDRWUINT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/wes/libgmxcpp/src/xdrfile.c" line="1801" column="1" bodyfile="/home/wes/libgmxcpp/src/xdrfile.c" bodystart="1801" bodyend="1804"/>
      </memberdef>
      <memberdef kind="function" id="xdrfile_8c_1a82f080558fa0eaabfffae3e32e562577" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void F77_FUNC</definition>
        <argsstring>(xdrrchar, XDRRCHAR)</argsstring>
        <name>F77_FUNC</name>
        <param>
          <type>xdrrchar</type>
        </param>
        <param>
          <type>XDRRCHAR</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/wes/libgmxcpp/src/xdrfile.c" line="1807" column="1" bodyfile="/home/wes/libgmxcpp/src/xdrfile.c" bodystart="1807" bodyend="1810"/>
      </memberdef>
      <memberdef kind="function" id="xdrfile_8c_1a765be1152e11b6bb33b1ab234bdf1a03" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void F77_FUNC</definition>
        <argsstring>(xdrwchar, XDRWCHAR)</argsstring>
        <name>F77_FUNC</name>
        <param>
          <type>xdrwchar</type>
        </param>
        <param>
          <type>XDRWCHAR</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/wes/libgmxcpp/src/xdrfile.c" line="1813" column="1" bodyfile="/home/wes/libgmxcpp/src/xdrfile.c" bodystart="1813" bodyend="1816"/>
      </memberdef>
      <memberdef kind="function" id="xdrfile_8c_1aeb7350ceb95ce1ed606d52dd10a9a543" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void F77_FUNC</definition>
        <argsstring>(xdrruchar, XDRRUCHAR)</argsstring>
        <name>F77_FUNC</name>
        <param>
          <type>xdrruchar</type>
        </param>
        <param>
          <type>XDRRUCHAR</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/wes/libgmxcpp/src/xdrfile.c" line="1819" column="1" bodyfile="/home/wes/libgmxcpp/src/xdrfile.c" bodystart="1819" bodyend="1822"/>
      </memberdef>
      <memberdef kind="function" id="xdrfile_8c_1aa3389b10e0f210b5570daf7b44110962" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void F77_FUNC</definition>
        <argsstring>(xdrwuchar, XDRWUCHAR)</argsstring>
        <name>F77_FUNC</name>
        <param>
          <type>xdrwuchar</type>
        </param>
        <param>
          <type>XDRWUCHAR</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/wes/libgmxcpp/src/xdrfile.c" line="1825" column="1" bodyfile="/home/wes/libgmxcpp/src/xdrfile.c" bodystart="1825" bodyend="1828"/>
      </memberdef>
      <memberdef kind="function" id="xdrfile_8c_1a847097a8d871470dfb4e123e4cb83ee9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void F77_FUNC</definition>
        <argsstring>(xdrrshort, XDRRSHORT)</argsstring>
        <name>F77_FUNC</name>
        <param>
          <type>xdrrshort</type>
        </param>
        <param>
          <type>XDRRSHORT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/wes/libgmxcpp/src/xdrfile.c" line="1831" column="1" bodyfile="/home/wes/libgmxcpp/src/xdrfile.c" bodystart="1831" bodyend="1834"/>
      </memberdef>
      <memberdef kind="function" id="xdrfile_8c_1ab7a2909bc67b5369778269eb10ac1c93" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void F77_FUNC</definition>
        <argsstring>(xdrwshort, XDRWSHORT)</argsstring>
        <name>F77_FUNC</name>
        <param>
          <type>xdrwshort</type>
        </param>
        <param>
          <type>XDRWSHORT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/wes/libgmxcpp/src/xdrfile.c" line="1837" column="1" bodyfile="/home/wes/libgmxcpp/src/xdrfile.c" bodystart="1837" bodyend="1840"/>
      </memberdef>
      <memberdef kind="function" id="xdrfile_8c_1a49e6fed71427753ad0bc2b080a62d8a1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void F77_FUNC</definition>
        <argsstring>(xdrrushort, XDRRUSHORT)</argsstring>
        <name>F77_FUNC</name>
        <param>
          <type>xdrrushort</type>
        </param>
        <param>
          <type>XDRRUSHORT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/wes/libgmxcpp/src/xdrfile.c" line="1843" column="1" bodyfile="/home/wes/libgmxcpp/src/xdrfile.c" bodystart="1843" bodyend="1846"/>
      </memberdef>
      <memberdef kind="function" id="xdrfile_8c_1ab2839df78de458f5751ab0925922a313" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void F77_FUNC</definition>
        <argsstring>(xdrwushort, XDRWUSHORT)</argsstring>
        <name>F77_FUNC</name>
        <param>
          <type>xdrwushort</type>
        </param>
        <param>
          <type>XDRWUSHORT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/wes/libgmxcpp/src/xdrfile.c" line="1849" column="1" bodyfile="/home/wes/libgmxcpp/src/xdrfile.c" bodystart="1849" bodyend="1852"/>
      </memberdef>
      <memberdef kind="function" id="xdrfile_8c_1af2f71613d11727428b76a32bb0b63b77" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void F77_FUNC</definition>
        <argsstring>(xdrrsingle, XDRRSINGLE)</argsstring>
        <name>F77_FUNC</name>
        <param>
          <type>xdrrsingle</type>
        </param>
        <param>
          <type>XDRRSINGLE</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/wes/libgmxcpp/src/xdrfile.c" line="1855" column="1" bodyfile="/home/wes/libgmxcpp/src/xdrfile.c" bodystart="1855" bodyend="1858"/>
      </memberdef>
      <memberdef kind="function" id="xdrfile_8c_1aca85be399a7917c47fe4e9e57f0aad15" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void F77_FUNC</definition>
        <argsstring>(xdrwsingle, XDRWSINGLE)</argsstring>
        <name>F77_FUNC</name>
        <param>
          <type>xdrwsingle</type>
        </param>
        <param>
          <type>XDRWSINGLE</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/wes/libgmxcpp/src/xdrfile.c" line="1861" column="1" bodyfile="/home/wes/libgmxcpp/src/xdrfile.c" bodystart="1861" bodyend="1864"/>
      </memberdef>
      <memberdef kind="function" id="xdrfile_8c_1a8768310052560e0ece989f54263fbcb4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void F77_FUNC</definition>
        <argsstring>(xdrrdouble, XDRRDOUBLE)</argsstring>
        <name>F77_FUNC</name>
        <param>
          <type>xdrrdouble</type>
        </param>
        <param>
          <type>XDRRDOUBLE</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/wes/libgmxcpp/src/xdrfile.c" line="1867" column="1" bodyfile="/home/wes/libgmxcpp/src/xdrfile.c" bodystart="1867" bodyend="1870"/>
      </memberdef>
      <memberdef kind="function" id="xdrfile_8c_1a2d78d5637510b5818ecbfd365a63f371" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void F77_FUNC</definition>
        <argsstring>(xdrwdouble, XDRWDOUBLE)</argsstring>
        <name>F77_FUNC</name>
        <param>
          <type>xdrwdouble</type>
        </param>
        <param>
          <type>XDRWDOUBLE</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/wes/libgmxcpp/src/xdrfile.c" line="1873" column="1" bodyfile="/home/wes/libgmxcpp/src/xdrfile.c" bodystart="1873" bodyend="1876"/>
      </memberdef>
      <memberdef kind="function" id="xdrfile_8c_1a9c8c4aadb3eedf6f5b0eb74e9cb658d6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void F77_FUNC</definition>
        <argsstring>(xdrrstring, XDRRSTRING)</argsstring>
        <name>F77_FUNC</name>
        <param>
          <type>xdrrstring</type>
        </param>
        <param>
          <type>XDRRSTRING</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/wes/libgmxcpp/src/xdrfile.c" line="1909" column="1" bodyfile="/home/wes/libgmxcpp/src/xdrfile.c" bodystart="1909" bodyend="1926"/>
      </memberdef>
      <memberdef kind="function" id="xdrfile_8c_1ac695260682634c69f59d98e5e58a4019" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void F77_FUNC</definition>
        <argsstring>(xdrwstring, XDRWSTRING)</argsstring>
        <name>F77_FUNC</name>
        <param>
          <type>xdrwstring</type>
        </param>
        <param>
          <type>XDRWSTRING</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/wes/libgmxcpp/src/xdrfile.c" line="1929" column="1" bodyfile="/home/wes/libgmxcpp/src/xdrfile.c" bodystart="1929" bodyend="1946"/>
      </memberdef>
      <memberdef kind="function" id="xdrfile_8c_1ae733f44d8d5a25381a48299de571e00f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void F77_FUNC</definition>
        <argsstring>(xdrropaque, XDRROPAQUE)</argsstring>
        <name>F77_FUNC</name>
        <param>
          <type>xdrropaque</type>
        </param>
        <param>
          <type>XDRROPAQUE</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/wes/libgmxcpp/src/xdrfile.c" line="1949" column="1" bodyfile="/home/wes/libgmxcpp/src/xdrfile.c" bodystart="1949" bodyend="1952"/>
      </memberdef>
      <memberdef kind="function" id="xdrfile_8c_1a748067ef0b9e279bfbf5dcee668256ab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void F77_FUNC</definition>
        <argsstring>(xdrwopaque, XDRWOPAQUE)</argsstring>
        <name>F77_FUNC</name>
        <param>
          <type>xdrwopaque</type>
        </param>
        <param>
          <type>XDRWOPAQUE</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/wes/libgmxcpp/src/xdrfile.c" line="1955" column="1" bodyfile="/home/wes/libgmxcpp/src/xdrfile.c" bodystart="1955" bodyend="1958"/>
      </memberdef>
      <memberdef kind="function" id="xdrfile_8c_1a596aa4ac2cddd1b156359fd7867de7cc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void F77_FUNC</definition>
        <argsstring>(xdrccs, XDRCCS)</argsstring>
        <name>F77_FUNC</name>
        <param>
          <type>xdrccs</type>
        </param>
        <param>
          <type>XDRCCS</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/wes/libgmxcpp/src/xdrfile.c" line="1963" column="1" bodyfile="/home/wes/libgmxcpp/src/xdrfile.c" bodystart="1963" bodyend="1967"/>
      </memberdef>
      <memberdef kind="function" id="xdrfile_8c_1aae7a9771d00e83c22a0252ac5c82b80d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void F77_FUNC</definition>
        <argsstring>(xdrdcs, XDRDCS)</argsstring>
        <name>F77_FUNC</name>
        <param>
          <type>xdrdcs</type>
        </param>
        <param>
          <type>XDRDCS</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/wes/libgmxcpp/src/xdrfile.c" line="1972" column="1" bodyfile="/home/wes/libgmxcpp/src/xdrfile.c" bodystart="1972" bodyend="1976"/>
      </memberdef>
      <memberdef kind="function" id="xdrfile_8c_1a45784da04ca7f810063545b80da60448" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void F77_FUNC</definition>
        <argsstring>(xdrccd, XDRCCD)</argsstring>
        <name>F77_FUNC</name>
        <param>
          <type>xdrccd</type>
        </param>
        <param>
          <type>XDRCCD</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/wes/libgmxcpp/src/xdrfile.c" line="1981" column="1" bodyfile="/home/wes/libgmxcpp/src/xdrfile.c" bodystart="1981" bodyend="1985"/>
      </memberdef>
      <memberdef kind="function" id="xdrfile_8c_1a1f0c39215f26eba8bdc796ece19ad26d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void F77_FUNC</definition>
        <argsstring>(xddcd, XDRDCD)</argsstring>
        <name>F77_FUNC</name>
        <param>
          <type>xddcd</type>
        </param>
        <param>
          <type>XDRDCD</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/wes/libgmxcpp/src/xdrfile.c" line="1989" column="1" bodyfile="/home/wes/libgmxcpp/src/xdrfile.c" bodystart="1989" bodyend="1993"/>
      </memberdef>
      <memberdef kind="function" id="xdrfile_8c_1abbd5ad1ace31ad46d9eda7016ced3990" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>static int32_t xdr_swapbytes</definition>
        <argsstring>(int32_t x)</argsstring>
        <name>xdr_swapbytes</name>
        <param>
          <type>int32_t</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/wes/libgmxcpp/src/xdrfile.c" line="2092" column="1" bodyfile="/home/wes/libgmxcpp/src/xdrfile.c" bodystart="2092" bodyend="2102"/>
      </memberdef>
      <memberdef kind="function" id="xdrfile_8c_1ac737fdacda5f14619c540d0c35de3aac" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>static int32_t xdr_htonl</definition>
        <argsstring>(int32_t x)</argsstring>
        <name>xdr_htonl</name>
        <param>
          <type>int32_t</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/wes/libgmxcpp/src/xdrfile.c" line="2105" column="1" bodyfile="/home/wes/libgmxcpp/src/xdrfile.c" bodystart="2105" bodyend="2115"/>
      </memberdef>
      <memberdef kind="function" id="xdrfile_8c_1a8e2bfbedf205776b4a004b456af626a5" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>static int32_t xdr_ntohl</definition>
        <argsstring>(int x)</argsstring>
        <name>xdr_ntohl</name>
        <param>
          <type>int</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/wes/libgmxcpp/src/xdrfile.c" line="2118" column="1" bodyfile="/home/wes/libgmxcpp/src/xdrfile.c" bodystart="2118" bodyend="2128"/>
      </memberdef>
      <memberdef kind="function" id="xdrfile_8c_1a4c771d1a0b0f3e1e3daa261c98aefd90" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int xdrstdio_getlong</definition>
        <argsstring>(XDR *, int32_t *)</argsstring>
        <name>xdrstdio_getlong</name>
        <param>
          <type><ref refid="structXDR" kindref="compound">XDR</ref> *</type>
          <defname>xdrs</defname>
        </param>
        <param>
          <type>int32_t *</type>
          <defname>lp</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/wes/libgmxcpp/src/xdrfile.c" line="2496" column="1" bodyfile="/home/wes/libgmxcpp/src/xdrfile.c" bodystart="2544" bodyend="2552"/>
      </memberdef>
      <memberdef kind="function" id="xdrfile_8c_1acb209360429a15775cd2d9effb7e0c84" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int xdrstdio_putlong</definition>
        <argsstring>(XDR *, int32_t *)</argsstring>
        <name>xdrstdio_putlong</name>
        <param>
          <type><ref refid="structXDR" kindref="compound">XDR</ref> *</type>
          <defname>xdrs</defname>
        </param>
        <param>
          <type>int32_t *</type>
          <defname>lp</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/wes/libgmxcpp/src/xdrfile.c" line="2497" column="1" bodyfile="/home/wes/libgmxcpp/src/xdrfile.c" bodystart="2555" bodyend="2562"/>
      </memberdef>
      <memberdef kind="function" id="xdrfile_8c_1a0e9d41fd9462d2d0646a2b06d13d916b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int xdrstdio_getbytes</definition>
        <argsstring>(XDR *, char *, unsigned int)</argsstring>
        <name>xdrstdio_getbytes</name>
        <param>
          <type><ref refid="structXDR" kindref="compound">XDR</ref> *</type>
          <defname>xdrs</defname>
        </param>
        <param>
          <type>char *</type>
          <defname>addr</defname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>int</declname>
          <defname>len</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/wes/libgmxcpp/src/xdrfile.c" line="2498" column="1" bodyfile="/home/wes/libgmxcpp/src/xdrfile.c" bodystart="2565" bodyend="2571"/>
      </memberdef>
      <memberdef kind="function" id="xdrfile_8c_1affd2ee154066bee617087ef67b0eb949" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int xdrstdio_putbytes</definition>
        <argsstring>(XDR *, char *, unsigned int)</argsstring>
        <name>xdrstdio_putbytes</name>
        <param>
          <type><ref refid="structXDR" kindref="compound">XDR</ref> *</type>
          <defname>xdrs</defname>
        </param>
        <param>
          <type>char *</type>
          <defname>addr</defname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>int</declname>
          <defname>len</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/wes/libgmxcpp/src/xdrfile.c" line="2499" column="1" bodyfile="/home/wes/libgmxcpp/src/xdrfile.c" bodystart="2574" bodyend="2580"/>
      </memberdef>
      <memberdef kind="function" id="xdrfile_8c_1a54a0d259a71fc3874c926630ac5412f6" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned int</type>
        <definition>static unsigned int xdrstdio_getpos</definition>
        <argsstring>(XDR *)</argsstring>
        <name>xdrstdio_getpos</name>
        <param>
          <type><ref refid="structXDR" kindref="compound">XDR</ref> *</type>
          <defname>xdrs</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/wes/libgmxcpp/src/xdrfile.c" line="2500" column="1" bodyfile="/home/wes/libgmxcpp/src/xdrfile.c" bodystart="2584" bodyend="2587"/>
      </memberdef>
      <memberdef kind="function" id="xdrfile_8c_1ad57aa0838dc42de01bb2894e709ab3c7" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int xdrstdio_setpos</definition>
        <argsstring>(XDR *, unsigned int)</argsstring>
        <name>xdrstdio_setpos</name>
        <param>
          <type><ref refid="structXDR" kindref="compound">XDR</ref> *</type>
          <defname>xdrs</defname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>int</declname>
          <defname>pos</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/wes/libgmxcpp/src/xdrfile.c" line="2501" column="1" bodyfile="/home/wes/libgmxcpp/src/xdrfile.c" bodystart="2590" bodyend="2593"/>
      </memberdef>
      <memberdef kind="function" id="xdrfile_8c_1a88f175fdd36f3b4adab9a9255a5c3beb" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void xdrstdio_destroy</definition>
        <argsstring>(XDR *)</argsstring>
        <name>xdrstdio_destroy</name>
        <param>
          <type><ref refid="structXDR" kindref="compound">XDR</ref> *</type>
          <defname>xdrs</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/wes/libgmxcpp/src/xdrfile.c" line="2502" column="1" bodyfile="/home/wes/libgmxcpp/src/xdrfile.c" bodystart="2537" bodyend="2541"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*<sp/>-*-<sp/>mode:<sp/>c;<sp/>tab-width:<sp/>4;<sp/>indent-tabs-mode:<sp/>t;<sp/>c-basic-offset:<sp/>4<sp/>-*-<sp/></highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>$Id$</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>Erik<sp/>Lindahl,<sp/>David<sp/>van<sp/>der<sp/>Spoel<sp/>2003,2004.</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>Coordinate<sp/>compression<sp/>(c)<sp/>by<sp/>Frans<sp/>van<sp/>Hoesel.<sp/></highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>This<sp/>program<sp/>is<sp/>free<sp/>software;<sp/>you<sp/>can<sp/>redistribute<sp/>it<sp/>and/or</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/>modify<sp/>it<sp/>under<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>GNU<sp/>Lesser<sp/>General<sp/>Public<sp/>License</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/>as<sp/>published<sp/>by<sp/>the<sp/>Free<sp/>Software<sp/>Foundation;<sp/>either<sp/>version<sp/>3</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/>of<sp/>the<sp/>License,<sp/>or<sp/>(at<sp/>your<sp/>option)<sp/>any<sp/>later<sp/>version.</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Get<sp/>HAVE_RPC_XDR_H,<sp/>F77_FUNC<sp/>from<sp/>config.h<sp/>if<sp/>available<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>HAVE_CONFIG_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;config.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;math.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;limits.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_FILE_OFFSET_BITS<sp/><sp/>64</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>get<sp/>fixed-width<sp/>types<sp/>if<sp/>we<sp/>are<sp/>using<sp/>ANSI<sp/>C99<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>HAVE_STDINT_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>include<sp/>&lt;stdint.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>(defined<sp/>HAVE_INTTYPES_H)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>include<sp/>&lt;inttypes.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>HAVE_RPC_XDR_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>include<sp/>&lt;rpc/rpc.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>include<sp/>&lt;rpc/xdr.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="xdrfile_8h" kindref="compound">gmxcpp/xdrfile.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Default<sp/>FORTRAN<sp/>name<sp/>mangling<sp/>is:<sp/>lower<sp/>case<sp/>name,<sp/>append<sp/>underscore<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>F77_FUNC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>F77_FUNC(name,NAME)<sp/>name<sp/>##<sp/>_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*exdr_message[exdrNR]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;OK&quot;</highlight><highlight class="normal">,<sp/></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Header&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;String&quot;</highlight><highlight class="normal">,<sp/></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Double&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Integer&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Float&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Unsigned<sp/>integer&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Compressed<sp/>3D<sp/>coordinate&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Closing<sp/>file&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Magic<sp/>number&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Not<sp/>enough<sp/>memory&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;End<sp/>of<sp/>file&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;File<sp/>not<sp/>found&quot;</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="61"><highlight class="normal">};</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="64"><highlight class="comment"><sp/>*<sp/>Declare<sp/>our<sp/>own<sp/>XDR<sp/>routines<sp/>statically<sp/>if<sp/>no<sp/>libraries<sp/>are<sp/>present.</highlight></codeline>
<codeline lineno="65"><highlight class="comment"><sp/>*<sp/>Actual<sp/>implementation<sp/>is<sp/>at<sp/>the<sp/>end<sp/>of<sp/>this<sp/>file.</highlight></codeline>
<codeline lineno="66"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="67"><highlight class="comment"><sp/>*<sp/>We<sp/>don&apos;t<sp/>want<sp/>the<sp/>low-level<sp/>XDR<sp/>implementation<sp/>as<sp/>part<sp/>of<sp/>the<sp/>Gromacs</highlight></codeline>
<codeline lineno="68"><highlight class="comment"><sp/>*<sp/>documentation,<sp/>so<sp/>skip<sp/>it<sp/>for<sp/>doxygen<sp/>too...</highlight></codeline>
<codeline lineno="69"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(!defined<sp/>HAVE_RPC_XDR_H<sp/>&amp;&amp;<sp/>!defined<sp/>DOXYGEN)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>xdr_op</highlight></codeline>
<codeline lineno="73"><highlight class="normal">{</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/>XDR_ENCODE<sp/>=<sp/>0,</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/>XDR_DECODE<sp/>=<sp/>1,</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/>XDR_FREE<sp/><sp/><sp/>=<sp/>2</highlight></codeline>
<codeline lineno="77"><highlight class="normal">};</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>We<sp/>need<sp/>integer<sp/>types<sp/>that<sp/>are<sp/>guaranteed<sp/>to<sp/>be<sp/>4<sp/>bytes<sp/>wide.</highlight></codeline>
<codeline lineno="81"><highlight class="comment"><sp/>*<sp/>If<sp/>ANSI<sp/>C99<sp/>headers<sp/>were<sp/>included<sp/>they<sp/>are<sp/>already<sp/>defined</highlight></codeline>
<codeline lineno="82"><highlight class="comment"><sp/>*<sp/>as<sp/>int32_t<sp/>and<sp/>uint32_t.<sp/>Check,<sp/>and<sp/>if<sp/>not<sp/>define<sp/>them<sp/>ourselves.</highlight></codeline>
<codeline lineno="83"><highlight class="comment"><sp/>*<sp/>Since<sp/>it<sp/>is<sp/>just<sp/>our<sp/>workaround<sp/>for<sp/>missing<sp/>ANSI<sp/>C99<sp/>types,<sp/>avoid<sp/>adding</highlight></codeline>
<codeline lineno="84"><highlight class="comment"><sp/>*<sp/>it<sp/>to<sp/>the<sp/>doxygen<sp/>documentation.</highlight></codeline>
<codeline lineno="85"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!(defined<sp/>INT32_MAX<sp/>||<sp/>defined<sp/>DOXYGEN)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/>if<sp/>(INT_MAX<sp/>==<sp/>2147483647)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>define<sp/>int32_t<sp/>int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>define<sp/>uint32_t<sp/>unsigned<sp/>int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>define<sp/>INT32_MAX<sp/>2147483647</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/>elif<sp/>(LONG_MAX<sp/>==<sp/>2147483647)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>define<sp/>int32_t<sp/>long</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>define<sp/>uint32_t<sp/>unsigned<sp/>long</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>define<sp/>INT32_MAX<sp/>2147483647L</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/>else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>error<sp/>ERROR:<sp/>No<sp/>32<sp/>bit<sp/>wide<sp/>integer<sp/>type<sp/>found!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>error<sp/>Use<sp/>system<sp/>XDR<sp/>libraries<sp/>instead,<sp/>or<sp/>update<sp/>xdrfile.c</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/>endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structXDR" kindref="compound">XDR</ref><sp/><ref refid="structXDR" kindref="compound">XDR</ref>;</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="103" refid="structXDR" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structXDR" kindref="compound">XDR</ref></highlight></codeline>
<codeline lineno="104"><highlight class="normal">{</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>xdr_op<sp/>x_op;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="106" refid="structXDR_1_1xdr__ops" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structXDR_1_1xdr__ops" kindref="compound">xdr_ops</ref></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>(*x_getlong)<sp/>(<ref refid="structXDR" kindref="compound">XDR</ref><sp/>*__xdrs,<sp/>int32_t<sp/>*__lp);</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>(*x_putlong)<sp/>(<ref refid="structXDR" kindref="compound">XDR</ref><sp/>*__xdrs,<sp/>int32_t<sp/>*__lp);</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>(*x_getbytes)<sp/>(<ref refid="structXDR" kindref="compound">XDR</ref><sp/>*__xdrs,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*__addr,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>__len);</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>(*x_putbytes)<sp/>(<ref refid="structXDR" kindref="compound">XDR</ref><sp/>*__xdrs,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*__addr,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>__len);</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>two<sp/>next<sp/>routines<sp/>are<sp/>not<sp/>64-bit<sp/>IO<sp/>safe<sp/>-<sp/>don&apos;t<sp/>use!<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>int<sp/>(*x_getpostn)<sp/>(<ref refid="structXDR" kindref="compound">XDR</ref><sp/>*__xdrs);<sp/></highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>(*x_setpostn)<sp/>(<ref refid="structXDR" kindref="compound">XDR</ref><sp/>*__xdrs,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>__pos);</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>(*x_destroy)<sp/>(<ref refid="structXDR" kindref="compound">XDR</ref><sp/>*__xdrs);<sp/></highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/>*x_ops;<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*x_private;</highlight></codeline>
<codeline lineno="119"><highlight class="normal">};</highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/>xdr_char<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<ref refid="structXDR" kindref="compound">XDR</ref><sp/>*xdrs,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*ip);</highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/>xdr_u_char<sp/><sp/><sp/><sp/><sp/><sp/>(<ref refid="structXDR" kindref="compound">XDR</ref><sp/>*xdrs,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*ip);</highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/>xdr_short<sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<ref refid="structXDR" kindref="compound">XDR</ref><sp/>*xdrs,<sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>*ip);</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/>xdr_u_short<sp/><sp/><sp/><sp/><sp/>(<ref refid="structXDR" kindref="compound">XDR</ref><sp/>*xdrs,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>*ip);</highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/>xdr_int<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<ref refid="structXDR" kindref="compound">XDR</ref><sp/>*xdrs,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*ip);</highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/>xdr_u_int<sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<ref refid="structXDR" kindref="compound">XDR</ref><sp/>*xdrs,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*ip);</highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/>xdr_float<sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<ref refid="structXDR" kindref="compound">XDR</ref><sp/>*xdrs,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*ip);</highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/>xdr_double<sp/><sp/><sp/><sp/><sp/><sp/>(<ref refid="structXDR" kindref="compound">XDR</ref><sp/>*xdrs,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*ip);</highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/>xdr_string<sp/><sp/><sp/><sp/><sp/><sp/>(<ref refid="structXDR" kindref="compound">XDR</ref><sp/>*xdrs,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**ip,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>maxsize);</highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/>xdr_opaque<sp/><sp/><sp/><sp/><sp/><sp/>(<ref refid="structXDR" kindref="compound">XDR</ref><sp/>*xdrs,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*cp,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cnt);</highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>xdrstdio_create<sp/>(<ref refid="structXDR" kindref="compound">XDR</ref><sp/>*xdrs,<sp/>FILE<sp/>*fp,<sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>xdr_op<sp/>xop);</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>xdr_getpos(xdrs)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="134"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*(xdrs)-&gt;x_ops-&gt;x_getpostn)(xdrs)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>xdr_setpos(xdrs,<sp/>pos)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="136"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*(xdrs)-&gt;x_ops-&gt;x_setpostn)(xdrs,<sp/>pos)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>xdr_destroy(xdrs)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="138"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>do<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="139"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>((xdrs)-&gt;x_ops-&gt;x_destroy)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="140"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*(xdrs)-&gt;x_ops-&gt;x_destroy)(xdrs);<sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="141"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>while<sp/>(0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>end<sp/>of<sp/>our<sp/>own<sp/>XDR<sp/>declarations<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight></codeline>
<codeline lineno="155" refid="structXDRFILE" refkind="compound"><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structXDRFILE" kindref="compound">XDRFILE</ref><sp/></highlight></codeline>
<codeline lineno="156"><highlight class="normal">{<sp/></highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/>FILE<sp/>*<sp/><sp/><sp/><ref refid="structXDRFILE_1af6cedef358d64bd523930824cc26b3c4" kindref="member">fp</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structXDR" kindref="compound">XDR</ref><sp/>*<sp/><sp/><sp/><sp/><ref refid="structXDRFILE_1a4a218e35bce4ff042a7a3a6f3f4791c1" kindref="member">xdr</ref>;<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><ref refid="structXDRFILE_1a07930795c83f7e5f348e2c999115d998" kindref="member">mode</ref>;<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*<sp/><sp/><sp/><sp/><ref refid="structXDRFILE_1a7274b510f55945af86ae20a6da81d429" kindref="member">buf1</ref>;<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structXDRFILE_1a9012ee5348a016a94c5ca634def2c1e4" kindref="member">buf1size</ref>;<sp/></highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*<sp/><sp/><sp/><sp/><ref refid="structXDRFILE_1a6e8d580fdf18234acfda1f382d89a2d8" kindref="member">buf2</ref>;<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structXDRFILE_1a71cedf31f2b15a635fa4fe20094a3133" kindref="member">buf2size</ref>;<sp/></highlight></codeline>
<codeline lineno="164"><highlight class="normal">};</highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight><highlight class="comment">/*************************************************************</highlight></codeline>
<codeline lineno="170"><highlight class="comment"><sp/>*<sp/>Implementation<sp/>of<sp/>higher-level<sp/>routines<sp/>to<sp/>read/write<sp/><sp/><sp/><sp/><sp/>*<sp/></highlight></codeline>
<codeline lineno="171"><highlight class="comment"><sp/>*<sp/>portable<sp/>data<sp/>based<sp/>on<sp/>the<sp/>XDR<sp/>standard.<sp/>These<sp/>should<sp/>be<sp/><sp/>*</highlight></codeline>
<codeline lineno="172"><highlight class="comment"><sp/>*<sp/>called<sp/>from<sp/>C<sp/>-<sp/>see<sp/>further<sp/>down<sp/>for<sp/>Fortran77<sp/>wrappers.<sp/><sp/>*</highlight></codeline>
<codeline lineno="173"><highlight class="comment"><sp/>*************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"><ref refid="structXDRFILE" kindref="compound">XDRFILE</ref><sp/>*</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><ref refid="xdrfile_8h_1a8ae08773e2f7fab7b88a37bf530ea558" kindref="member">xdrfile_open</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*path,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*mode)</highlight></codeline>
<codeline lineno="177"><highlight class="normal">{</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>newmode[5];</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>xdr_op<sp/>xdrmode;</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structXDRFILE" kindref="compound">XDRFILE</ref><sp/>*xfp;</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>make<sp/>sure<sp/>XDR<sp/>files<sp/>are<sp/>opened<sp/>in<sp/>binary<sp/>mode...<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(*mode==</highlight><highlight class="charliteral">&apos;w&apos;</highlight><highlight class="normal"><sp/>||<sp/>*mode==</highlight><highlight class="charliteral">&apos;W&apos;</highlight><highlight class="normal">)<sp/></highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sprintf(newmode,</highlight><highlight class="stringliteral">&quot;wb+&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xdrmode=XDR_ENCODE;</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(*mode<sp/>==<sp/></highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal"><sp/>||<sp/>*mode<sp/>==<sp/></highlight><highlight class="charliteral">&apos;A&apos;</highlight><highlight class="normal">)<sp/></highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sprintf(newmode,</highlight><highlight class="stringliteral">&quot;ab+&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xdrmode<sp/>=<sp/>XDR_ENCODE;</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(*mode<sp/>==<sp/></highlight><highlight class="charliteral">&apos;r&apos;</highlight><highlight class="normal"><sp/>||<sp/>*mode<sp/>==<sp/></highlight><highlight class="charliteral">&apos;R&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sprintf(newmode,</highlight><highlight class="stringliteral">&quot;rb&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xdrmode<sp/>=<sp/>XDR_DECODE;</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">/*<sp/>cannot<sp/>determine<sp/>mode<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((xfp=(<ref refid="structXDRFILE" kindref="compound">XDRFILE</ref><sp/>*)malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structXDRFILE" kindref="compound">XDRFILE</ref>)))==NULL)</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((xfp-&gt;<ref refid="structXDRFILE_1af6cedef358d64bd523930824cc26b3c4" kindref="member">fp</ref>=fopen(path,newmode))==NULL)</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(xfp);</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((xfp-&gt;<ref refid="structXDRFILE_1a4a218e35bce4ff042a7a3a6f3f4791c1" kindref="member">xdr</ref>=(<ref refid="structXDR" kindref="compound">XDR</ref><sp/>*)malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structXDR" kindref="compound">XDR</ref>)))==NULL)<sp/></highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fclose(xfp-&gt;<ref refid="structXDRFILE_1af6cedef358d64bd523930824cc26b3c4" kindref="member">fp</ref>);</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(xfp);</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/>xfp-&gt;<ref refid="structXDRFILE_1a07930795c83f7e5f348e2c999115d998" kindref="member">mode</ref>=*mode;</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/>xdrstdio_create((<ref refid="structXDR" kindref="compound">XDR</ref><sp/>*)(xfp-&gt;<ref refid="structXDRFILE_1a4a218e35bce4ff042a7a3a6f3f4791c1" kindref="member">xdr</ref>),xfp-&gt;<ref refid="structXDRFILE_1af6cedef358d64bd523930824cc26b3c4" kindref="member">fp</ref>,xdrmode);</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/>xfp-&gt;<ref refid="structXDRFILE_1a7274b510f55945af86ae20a6da81d429" kindref="member">buf1</ref><sp/>=<sp/>xfp-&gt;<ref refid="structXDRFILE_1a6e8d580fdf18234acfda1f382d89a2d8" kindref="member">buf2</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/>xfp-&gt;<ref refid="structXDRFILE_1a9012ee5348a016a94c5ca634def2c1e4" kindref="member">buf1size</ref><sp/>=<sp/>xfp-&gt;<ref refid="structXDRFILE_1a71cedf31f2b15a635fa4fe20094a3133" kindref="member">buf2size</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>xfp;</highlight></codeline>
<codeline lineno="216"><highlight class="normal">}</highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="219"><highlight class="normal"><ref refid="xdrfile_8h_1ac6ed9a0cbb2e66e63be2765dec55ef45" kindref="member">xdrfile_close</ref>(<ref refid="structXDRFILE" kindref="compound">XDRFILE</ref><sp/>*xfp)</highlight></codeline>
<codeline lineno="220"><highlight class="normal">{</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ret=exdrCLOSE;</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(xfp)<sp/></highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>flush<sp/>and<sp/>destroy<sp/>XDR<sp/>stream<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(xfp-&gt;<ref refid="structXDRFILE_1a4a218e35bce4ff042a7a3a6f3f4791c1" kindref="member">xdr</ref>)</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xdr_destroy((<ref refid="structXDR" kindref="compound">XDR</ref><sp/>*)(xfp-&gt;<ref refid="structXDRFILE_1a4a218e35bce4ff042a7a3a6f3f4791c1" kindref="member">xdr</ref>));</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(xfp-&gt;<ref refid="structXDRFILE_1a4a218e35bce4ff042a7a3a6f3f4791c1" kindref="member">xdr</ref>);</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>close<sp/>the<sp/>file<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret=fclose(xfp-&gt;<ref refid="structXDRFILE_1af6cedef358d64bd523930824cc26b3c4" kindref="member">fp</ref>);</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(xfp-&gt;<ref refid="structXDRFILE_1a9012ee5348a016a94c5ca634def2c1e4" kindref="member">buf1size</ref>)</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(xfp-&gt;<ref refid="structXDRFILE_1a7274b510f55945af86ae20a6da81d429" kindref="member">buf1</ref>);</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(xfp-&gt;<ref refid="structXDRFILE_1a71cedf31f2b15a635fa4fe20094a3133" kindref="member">buf2size</ref>)</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(xfp-&gt;<ref refid="structXDRFILE_1a6e8d580fdf18234acfda1f382d89a2d8" kindref="member">buf2</ref>);</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(xfp);</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;<sp/></highlight><highlight class="comment">/*<sp/>return<sp/>0<sp/>if<sp/>ok<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal">}</highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="242"><highlight class="normal"><ref refid="xdrfile_8h_1afd6ea22cd248c0e56c7ba38de3ea29cb" kindref="member">xdrfile_read_int</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*ptr,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ndata,<sp/><ref refid="structXDRFILE" kindref="compound">XDRFILE</ref>*<sp/>xfp)<sp/></highlight></codeline>
<codeline lineno="243"><highlight class="normal">{</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;</highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>read<sp/>write<sp/>is<sp/>encoded<sp/>in<sp/>the<sp/>XDR<sp/>struct<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(i&lt;ndata<sp/>&amp;&amp;<sp/>xdr_int((<ref refid="structXDR" kindref="compound">XDR</ref><sp/>*)(xfp-&gt;<ref refid="structXDRFILE_1a4a218e35bce4ff042a7a3a6f3f4791c1" kindref="member">xdr</ref>),ptr+i))</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i++;</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="251"><highlight class="normal">}</highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="254"><highlight class="normal"><ref refid="xdrfile_8h_1aebeea86c177fe409a3b737f93674137f" kindref="member">xdrfile_write_int</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*ptr,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ndata,<sp/><ref refid="structXDRFILE" kindref="compound">XDRFILE</ref>*<sp/>xfp)<sp/></highlight></codeline>
<codeline lineno="255"><highlight class="normal">{</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>read<sp/>write<sp/>is<sp/>encoded<sp/>in<sp/>the<sp/>XDR<sp/>struct<sp/>*/</highlight><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(i&lt;ndata<sp/>&amp;&amp;<sp/>xdr_int((<ref refid="structXDR" kindref="compound">XDR</ref><sp/>*)(xfp-&gt;<ref refid="structXDRFILE_1a4a218e35bce4ff042a7a3a6f3f4791c1" kindref="member">xdr</ref>),ptr+i))</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i++;</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="262"><highlight class="normal">}</highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="266"><highlight class="normal"><ref refid="xdrfile_8h_1ab8c3a97279a88f549001113659a980a1" kindref="member">xdrfile_read_uint</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*ptr,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ndata,<sp/><ref refid="structXDRFILE" kindref="compound">XDRFILE</ref>*<sp/>xfp)<sp/></highlight></codeline>
<codeline lineno="267"><highlight class="normal">{</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;</highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>read<sp/>write<sp/>is<sp/>encoded<sp/>in<sp/>the<sp/>XDR<sp/>struct<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(i&lt;ndata<sp/>&amp;&amp;<sp/>xdr_u_int((<ref refid="structXDR" kindref="compound">XDR</ref><sp/>*)(xfp-&gt;<ref refid="structXDRFILE_1a4a218e35bce4ff042a7a3a6f3f4791c1" kindref="member">xdr</ref>),ptr+i))</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i++;</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="275"><highlight class="normal">}</highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="278"><highlight class="normal"><ref refid="xdrfile_8h_1ad242afa21abcace1239f9e73552afa3a" kindref="member">xdrfile_write_uint</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*ptr,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ndata,<sp/><ref refid="structXDRFILE" kindref="compound">XDRFILE</ref>*<sp/>xfp)<sp/></highlight></codeline>
<codeline lineno="279"><highlight class="normal">{</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>read<sp/>write<sp/>is<sp/>encoded<sp/>in<sp/>the<sp/>XDR<sp/>struct<sp/>*/</highlight><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(i&lt;ndata<sp/>&amp;&amp;<sp/>xdr_u_int((<ref refid="structXDR" kindref="compound">XDR</ref><sp/>*)(xfp-&gt;<ref refid="structXDRFILE_1a4a218e35bce4ff042a7a3a6f3f4791c1" kindref="member">xdr</ref>),ptr+i))</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i++;</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="286"><highlight class="normal">}</highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="289"><highlight class="normal"><ref refid="xdrfile_8h_1af7c7a33d1407f75a82f6ab703a788b63" kindref="member">xdrfile_read_char</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*ptr,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ndata,<sp/><ref refid="structXDRFILE" kindref="compound">XDRFILE</ref>*<sp/>xfp)<sp/></highlight></codeline>
<codeline lineno="290"><highlight class="normal">{</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;</highlight></codeline>
<codeline lineno="292"><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>read<sp/>write<sp/>is<sp/>encoded<sp/>in<sp/>the<sp/>XDR<sp/>struct<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(i&lt;ndata<sp/>&amp;&amp;<sp/>xdr_char((<ref refid="structXDR" kindref="compound">XDR</ref><sp/>*)(xfp-&gt;<ref refid="structXDRFILE_1a4a218e35bce4ff042a7a3a6f3f4791c1" kindref="member">xdr</ref>),ptr+i))</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i++;</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="298"><highlight class="normal">}</highlight></codeline>
<codeline lineno="299"><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="301"><highlight class="normal"><ref refid="xdrfile_8h_1a1d033b25e5815e33074bdde87a5d6c6b" kindref="member">xdrfile_write_char</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*ptr,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ndata,<sp/><ref refid="structXDRFILE" kindref="compound">XDRFILE</ref>*<sp/>xfp)<sp/></highlight></codeline>
<codeline lineno="302"><highlight class="normal">{</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>read<sp/>write<sp/>is<sp/>encoded<sp/>in<sp/>the<sp/>XDR<sp/>struct<sp/>*/</highlight><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(i&lt;ndata<sp/>&amp;&amp;<sp/>xdr_char((<ref refid="structXDR" kindref="compound">XDR</ref><sp/>*)(xfp-&gt;<ref refid="structXDRFILE_1a4a218e35bce4ff042a7a3a6f3f4791c1" kindref="member">xdr</ref>),ptr+i))</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i++;</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="309"><highlight class="normal">}</highlight></codeline>
<codeline lineno="310"><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="313"><highlight class="normal"><ref refid="xdrfile_8h_1aad58c6b4f38c651832d3023e614ec0c2" kindref="member">xdrfile_read_uchar</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*ptr,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ndata,<sp/><ref refid="structXDRFILE" kindref="compound">XDRFILE</ref>*<sp/>xfp)<sp/></highlight></codeline>
<codeline lineno="314"><highlight class="normal">{</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;</highlight></codeline>
<codeline lineno="316"><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>read<sp/>write<sp/>is<sp/>encoded<sp/>in<sp/>the<sp/>XDR<sp/>struct<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(i&lt;ndata<sp/>&amp;&amp;<sp/>xdr_u_char((<ref refid="structXDR" kindref="compound">XDR</ref><sp/>*)(xfp-&gt;<ref refid="structXDRFILE_1a4a218e35bce4ff042a7a3a6f3f4791c1" kindref="member">xdr</ref>),ptr+i))</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i++;</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="322"><highlight class="normal">}</highlight></codeline>
<codeline lineno="323"><highlight class="normal"></highlight></codeline>
<codeline lineno="324"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="325"><highlight class="normal"><ref refid="xdrfile_8h_1a4113ec632fc6ca57b3fc9a5bb654c7f6" kindref="member">xdrfile_write_uchar</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*ptr,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ndata,<sp/><ref refid="structXDRFILE" kindref="compound">XDRFILE</ref>*<sp/>xfp)<sp/></highlight></codeline>
<codeline lineno="326"><highlight class="normal">{</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>read<sp/>write<sp/>is<sp/>encoded<sp/>in<sp/>the<sp/>XDR<sp/>struct<sp/>*/</highlight><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(i&lt;ndata<sp/>&amp;&amp;<sp/>xdr_u_char((<ref refid="structXDR" kindref="compound">XDR</ref><sp/>*)(xfp-&gt;<ref refid="structXDRFILE_1a4a218e35bce4ff042a7a3a6f3f4791c1" kindref="member">xdr</ref>),ptr+i))</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i++;</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="333"><highlight class="normal">}</highlight></codeline>
<codeline lineno="334"><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="336"><highlight class="normal"><ref refid="xdrfile_8h_1ae290f8ebe1675e7149b5b6934a49f6cb" kindref="member">xdrfile_read_short</ref>(</highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>*ptr,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ndata,<sp/><ref refid="structXDRFILE" kindref="compound">XDRFILE</ref>*<sp/>xfp)<sp/></highlight></codeline>
<codeline lineno="337"><highlight class="normal">{</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;</highlight></codeline>
<codeline lineno="339"><highlight class="normal"></highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>read<sp/>write<sp/>is<sp/>encoded<sp/>in<sp/>the<sp/>XDR<sp/>struct<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(i&lt;ndata<sp/>&amp;&amp;<sp/>xdr_short((<ref refid="structXDR" kindref="compound">XDR</ref><sp/>*)(xfp-&gt;<ref refid="structXDRFILE_1a4a218e35bce4ff042a7a3a6f3f4791c1" kindref="member">xdr</ref>),ptr+i))</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i++;</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="345"><highlight class="normal">}</highlight></codeline>
<codeline lineno="346"><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="348"><highlight class="normal"><ref refid="xdrfile_8h_1ac846d7c595e8233275d02da313af4a65" kindref="member">xdrfile_write_short</ref>(</highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>*ptr,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ndata,<sp/><ref refid="structXDRFILE" kindref="compound">XDRFILE</ref>*<sp/>xfp)<sp/></highlight></codeline>
<codeline lineno="349"><highlight class="normal">{</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>read<sp/>write<sp/>is<sp/>encoded<sp/>in<sp/>the<sp/>XDR<sp/>struct<sp/>*/</highlight><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(i&lt;ndata<sp/>&amp;&amp;<sp/>xdr_short((<ref refid="structXDR" kindref="compound">XDR</ref><sp/>*)(xfp-&gt;<ref refid="structXDRFILE_1a4a218e35bce4ff042a7a3a6f3f4791c1" kindref="member">xdr</ref>),ptr+i))</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i++;</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="356"><highlight class="normal">}</highlight></codeline>
<codeline lineno="357"><highlight class="normal"></highlight></codeline>
<codeline lineno="358"><highlight class="normal"></highlight></codeline>
<codeline lineno="359"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="360"><highlight class="normal"><ref refid="xdrfile_8h_1a1305e5491face504b51608e8124ff897" kindref="member">xdrfile_read_ushort</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>*ptr,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ndata,<sp/><ref refid="structXDRFILE" kindref="compound">XDRFILE</ref>*<sp/>xfp)<sp/></highlight></codeline>
<codeline lineno="361"><highlight class="normal">{</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;</highlight></codeline>
<codeline lineno="363"><highlight class="normal"></highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>read<sp/>write<sp/>is<sp/>encoded<sp/>in<sp/>the<sp/>XDR<sp/>struct<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(i&lt;ndata<sp/>&amp;&amp;<sp/>xdr_u_short((<ref refid="structXDR" kindref="compound">XDR</ref><sp/>*)(xfp-&gt;<ref refid="structXDRFILE_1a4a218e35bce4ff042a7a3a6f3f4791c1" kindref="member">xdr</ref>),ptr+i))</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i++;</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="369"><highlight class="normal">}</highlight></codeline>
<codeline lineno="370"><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="372"><highlight class="normal"><ref refid="xdrfile_8h_1a1666dc36baa317ff0856cb7526410069" kindref="member">xdrfile_write_ushort</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>*ptr,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ndata,<sp/><ref refid="structXDRFILE" kindref="compound">XDRFILE</ref>*<sp/>xfp)<sp/></highlight></codeline>
<codeline lineno="373"><highlight class="normal">{</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>read<sp/>write<sp/>is<sp/>encoded<sp/>in<sp/>the<sp/>XDR<sp/>struct<sp/>*/</highlight><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(i&lt;ndata<sp/>&amp;&amp;<sp/>xdr_u_short((<ref refid="structXDR" kindref="compound">XDR</ref><sp/>*)(xfp-&gt;<ref refid="structXDRFILE_1a4a218e35bce4ff042a7a3a6f3f4791c1" kindref="member">xdr</ref>),ptr+i))</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i++;</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="380"><highlight class="normal">}</highlight></codeline>
<codeline lineno="381"><highlight class="normal"></highlight></codeline>
<codeline lineno="382"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="383"><highlight class="normal"><ref refid="xdrfile_8h_1a0284c6956e48e298820448fc86640e76" kindref="member">xdrfile_read_float</ref>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*ptr,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ndata,<sp/><ref refid="structXDRFILE" kindref="compound">XDRFILE</ref>*<sp/>xfp)<sp/></highlight></codeline>
<codeline lineno="384"><highlight class="normal">{</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>read<sp/>write<sp/>is<sp/>encoded<sp/>in<sp/>the<sp/>XDR<sp/>struct<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(i&lt;ndata<sp/>&amp;&amp;<sp/>xdr_float((<ref refid="structXDR" kindref="compound">XDR</ref><sp/>*)(xfp-&gt;<ref refid="structXDRFILE_1a4a218e35bce4ff042a7a3a6f3f4791c1" kindref="member">xdr</ref>),ptr+i))</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i++;</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="390"><highlight class="normal">}</highlight></codeline>
<codeline lineno="391"><highlight class="normal"></highlight></codeline>
<codeline lineno="392"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="393"><highlight class="normal"><ref refid="xdrfile_8h_1a07b2f0fbacf3d25f6d6601e6c4285cdf" kindref="member">xdrfile_write_float</ref>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*ptr,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ndata,<sp/><ref refid="structXDRFILE" kindref="compound">XDRFILE</ref>*<sp/>xfp)<sp/></highlight></codeline>
<codeline lineno="394"><highlight class="normal">{</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>read<sp/>write<sp/>is<sp/>encoded<sp/>in<sp/>the<sp/>XDR<sp/>struct<sp/>*/</highlight><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(i&lt;ndata<sp/>&amp;&amp;<sp/>xdr_float((<ref refid="structXDR" kindref="compound">XDR</ref><sp/>*)(xfp-&gt;<ref refid="structXDRFILE_1a4a218e35bce4ff042a7a3a6f3f4791c1" kindref="member">xdr</ref>),ptr+i))</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i++;</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="400"><highlight class="normal">}</highlight></codeline>
<codeline lineno="401"><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="403"><highlight class="normal"><ref refid="xdrfile_8h_1ad5be7d297094580d000cb372e2441a48" kindref="member">xdrfile_read_double</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*ptr,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ndata,<sp/><ref refid="structXDRFILE" kindref="compound">XDRFILE</ref>*<sp/>xfp)<sp/></highlight></codeline>
<codeline lineno="404"><highlight class="normal">{</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>read<sp/>write<sp/>is<sp/>encoded<sp/>in<sp/>the<sp/>XDR<sp/>struct<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(i&lt;ndata<sp/>&amp;&amp;<sp/>xdr_double((<ref refid="structXDR" kindref="compound">XDR</ref><sp/>*)(xfp-&gt;<ref refid="structXDRFILE_1a4a218e35bce4ff042a7a3a6f3f4791c1" kindref="member">xdr</ref>),ptr+i))</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i++;</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="410"><highlight class="normal">}</highlight></codeline>
<codeline lineno="411"><highlight class="normal"></highlight></codeline>
<codeline lineno="412"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="413"><highlight class="normal"><ref refid="xdrfile_8h_1a423d0a114162a2be532c1933bb4171fb" kindref="member">xdrfile_write_double</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*ptr,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ndata,<sp/><ref refid="structXDRFILE" kindref="compound">XDRFILE</ref>*<sp/>xfp)<sp/></highlight></codeline>
<codeline lineno="414"><highlight class="normal">{</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>read<sp/>write<sp/>is<sp/>encoded<sp/>in<sp/>the<sp/>XDR<sp/>struct<sp/>*/</highlight><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(i&lt;ndata<sp/>&amp;&amp;<sp/>xdr_double((<ref refid="structXDR" kindref="compound">XDR</ref><sp/>*)(xfp-&gt;<ref refid="structXDRFILE_1a4a218e35bce4ff042a7a3a6f3f4791c1" kindref="member">xdr</ref>),ptr+i))</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i++;</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="420"><highlight class="normal">}</highlight></codeline>
<codeline lineno="421"><highlight class="normal"></highlight></codeline>
<codeline lineno="422"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="423"><highlight class="normal"><ref refid="xdrfile_8h_1a5df896d6b1635fb4901cc7e5c148163b" kindref="member">xdrfile_read_string</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*ptr,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>maxlen,<sp/><ref refid="structXDRFILE" kindref="compound">XDRFILE</ref>*<sp/>xfp)</highlight></codeline>
<codeline lineno="424"><highlight class="normal">{</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(xdr_string((<ref refid="structXDR" kindref="compound">XDR</ref><sp/>*)(xfp-&gt;<ref refid="structXDRFILE_1a4a218e35bce4ff042a7a3a6f3f4791c1" kindref="member">xdr</ref>),&amp;ptr,maxlen))<sp/>{</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i=0;</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(i&lt;maxlen<sp/>&amp;&amp;<sp/>ptr[i]!=0)</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i++;</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(i==maxlen)</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>maxlen;</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>i+1;</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="436"><highlight class="normal">}</highlight></codeline>
<codeline lineno="437"><highlight class="normal"></highlight></codeline>
<codeline lineno="438"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="439"><highlight class="normal"><ref refid="xdrfile_8h_1a80badf578ca42f275c2aae1d0788b9d1" kindref="member">xdrfile_write_string</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*ptr,<sp/><ref refid="structXDRFILE" kindref="compound">XDRFILE</ref>*<sp/>xfp)</highlight></codeline>
<codeline lineno="440"><highlight class="normal">{</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len=strlen(ptr)+1;</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(xdr_string((<ref refid="structXDR" kindref="compound">XDR</ref><sp/>*)(xfp-&gt;<ref refid="structXDRFILE_1a4a218e35bce4ff042a7a3a6f3f4791c1" kindref="member">xdr</ref>),&amp;ptr,len))<sp/></highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>len;</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="447"><highlight class="normal">}</highlight></codeline>
<codeline lineno="448"><highlight class="normal"></highlight></codeline>
<codeline lineno="449"><highlight class="normal"></highlight></codeline>
<codeline lineno="450"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="451"><highlight class="normal"><ref refid="xdrfile_8h_1a608b6dfc7dd697062a91f784d7e31e4e" kindref="member">xdrfile_read_opaque</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*ptr,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cnt,<sp/><ref refid="structXDRFILE" kindref="compound">XDRFILE</ref>*<sp/>xfp)</highlight></codeline>
<codeline lineno="452"><highlight class="normal">{</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(xdr_opaque((<ref refid="structXDR" kindref="compound">XDR</ref><sp/>*)(xfp-&gt;<ref refid="structXDRFILE_1a4a218e35bce4ff042a7a3a6f3f4791c1" kindref="member">xdr</ref>),ptr,cnt))</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cnt;</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="457"><highlight class="normal">}</highlight></codeline>
<codeline lineno="458"><highlight class="normal"></highlight></codeline>
<codeline lineno="459"><highlight class="normal"></highlight></codeline>
<codeline lineno="460"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="461"><highlight class="normal"><ref refid="xdrfile_8h_1ae10b1d0378958230f49849f3ab7c2797" kindref="member">xdrfile_write_opaque</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*ptr,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cnt,<sp/><ref refid="structXDRFILE" kindref="compound">XDRFILE</ref>*<sp/>xfp)</highlight></codeline>
<codeline lineno="462"><highlight class="normal">{</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(xdr_opaque((<ref refid="structXDR" kindref="compound">XDR</ref><sp/>*)(xfp-&gt;<ref refid="structXDRFILE_1a4a218e35bce4ff042a7a3a6f3f4791c1" kindref="member">xdr</ref>),ptr,cnt))</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cnt;</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="467"><highlight class="normal">}</highlight></codeline>
<codeline lineno="468"><highlight class="normal"></highlight></codeline>
<codeline lineno="469"><highlight class="normal"></highlight></codeline>
<codeline lineno="470"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Internal<sp/>support<sp/>routines<sp/>for<sp/>reading/writing<sp/>compressed<sp/>coordinates<sp/></highlight></codeline>
<codeline lineno="471"><highlight class="comment"><sp/>*<sp/>sizeofint<sp/>-<sp/>calculate<sp/>smallest<sp/>number<sp/>of<sp/>bits<sp/>necessary</highlight></codeline>
<codeline lineno="472"><highlight class="comment"><sp/>*<sp/>to<sp/>represent<sp/>a<sp/>certain<sp/>integer.</highlight></codeline>
<codeline lineno="473"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="474"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="475"><highlight class="normal">sizeofint(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size)<sp/>{</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_of_bits<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(size<sp/>&gt;=<sp/>num<sp/>&amp;&amp;<sp/>num_of_bits<sp/>&lt;<sp/>32)<sp/></highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>num_of_bits++;</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>num<sp/>&lt;&lt;=<sp/>1;</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>num_of_bits;</highlight></codeline>
<codeline lineno="485"><highlight class="normal">}</highlight></codeline>
<codeline lineno="486"><highlight class="normal"></highlight></codeline>
<codeline lineno="487"><highlight class="normal"></highlight></codeline>
<codeline lineno="488"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="489"><highlight class="comment"><sp/>*<sp/>sizeofints<sp/>-<sp/>calculate<sp/>&apos;bitsize&apos;<sp/>of<sp/>compressed<sp/>ints</highlight></codeline>
<codeline lineno="490"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="491"><highlight class="comment"><sp/>*<sp/>given<sp/>a<sp/>number<sp/>of<sp/>small<sp/>unsigned<sp/>integers<sp/>and<sp/>the<sp/>maximum<sp/>value</highlight></codeline>
<codeline lineno="492"><highlight class="comment"><sp/>*<sp/>return<sp/>the<sp/>number<sp/>of<sp/>bits<sp/>needed<sp/>to<sp/>read<sp/>or<sp/>write<sp/>them<sp/>with<sp/>the</highlight></codeline>
<codeline lineno="493"><highlight class="comment"><sp/>*<sp/>routines<sp/>encodeints/decodeints.<sp/>You<sp/>need<sp/>this<sp/>parameter<sp/>when</highlight></codeline>
<codeline lineno="494"><highlight class="comment"><sp/>*<sp/>calling<sp/>those<sp/>routines.<sp/></highlight></codeline>
<codeline lineno="495"><highlight class="comment"><sp/>*<sp/>(However,<sp/>in<sp/>some<sp/>cases<sp/>we<sp/>can<sp/>just<sp/>use<sp/>the<sp/>variable<sp/>&apos;smallidx&apos;<sp/></highlight></codeline>
<codeline lineno="496"><highlight class="comment"><sp/>*<sp/>which<sp/>is<sp/>the<sp/>exact<sp/>number<sp/>of<sp/>bits,<sp/>and<sp/>them<sp/>we<sp/>dont<sp/>need<sp/>to<sp/>call</highlight></codeline>
<codeline lineno="497"><highlight class="comment"><sp/>*<sp/>this<sp/>routine).</highlight></codeline>
<codeline lineno="498"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="499"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="500"><highlight class="normal">sizeofints(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_of_ints,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sizes[])<sp/></highlight></codeline>
<codeline lineno="501"><highlight class="normal">{</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>num;</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_of_bytes,<sp/>num_of_bits,<sp/>bytes[32],<sp/>bytecnt,<sp/>tmp;</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/>num_of_bytes<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/>bytes[0]<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/>num_of_bits<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>num_of_ints;<sp/>i++)</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(bytecnt<sp/>=<sp/>0;<sp/>bytecnt<sp/>&lt;<sp/>num_of_bytes;<sp/>bytecnt++)</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp<sp/>=<sp/>bytes[bytecnt]<sp/>*<sp/>sizes[i]<sp/>+<sp/>tmp;</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bytes[bytecnt]<sp/>=<sp/>tmp<sp/>&amp;<sp/>0xff;</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp<sp/>&gt;&gt;=<sp/>8;</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(tmp<sp/>!=<sp/>0)<sp/></highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bytes[bytecnt++]<sp/>=<sp/>tmp<sp/>&amp;<sp/>0xff;</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp<sp/>&gt;&gt;=<sp/>8;</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>num_of_bytes<sp/>=<sp/>bytecnt;</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/>num<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/>num_of_bytes--;</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(bytes[num_of_bytes]<sp/>&gt;=<sp/>num)<sp/></highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>num_of_bits++;</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>num<sp/>*=<sp/>2;</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>num_of_bits<sp/>+<sp/>num_of_bytes<sp/>*<sp/>8;</highlight></codeline>
<codeline lineno="531"><highlight class="normal"></highlight></codeline>
<codeline lineno="532"><highlight class="normal">}</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="534"><highlight class="normal"></highlight></codeline>
<codeline lineno="535"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="536"><highlight class="comment"><sp/>*<sp/>encodebits<sp/>-<sp/>encode<sp/>num<sp/>into<sp/>buf<sp/>using<sp/>the<sp/>specified<sp/>number<sp/>of<sp/>bits</highlight></codeline>
<codeline lineno="537"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="538"><highlight class="comment"><sp/>*<sp/>This<sp/>routines<sp/>appends<sp/>the<sp/>value<sp/>of<sp/>num<sp/>to<sp/>the<sp/>bits<sp/>already<sp/>present<sp/>in</highlight></codeline>
<codeline lineno="539"><highlight class="comment"><sp/>*<sp/>the<sp/>array<sp/>buf.<sp/>You<sp/>need<sp/>to<sp/>give<sp/>it<sp/>the<sp/>number<sp/>of<sp/>bits<sp/>to<sp/>use<sp/>and<sp/>you<sp/>had</highlight></codeline>
<codeline lineno="540"><highlight class="comment"><sp/>*<sp/>better<sp/>make<sp/>sure<sp/>that<sp/>this<sp/>number<sp/>of<sp/>bits<sp/>is<sp/>enough<sp/>to<sp/>hold<sp/>the<sp/>value.</highlight></codeline>
<codeline lineno="541"><highlight class="comment"><sp/>*<sp/>Num<sp/>must<sp/>also<sp/>be<sp/>positive.</highlight></codeline>
<codeline lineno="542"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="543"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="544"><highlight class="normal">encodebits(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>buf[],<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_of_bits,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num)<sp/></highlight></codeline>
<codeline lineno="545"><highlight class="normal">{</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cnt,<sp/>lastbyte;</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lastbits;</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>cbuf;</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/>cbuf<sp/>=<sp/>((</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)buf)<sp/>+<sp/>3<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*buf);</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/>cnt<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>int)<sp/>buf[0];</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/>lastbits<sp/>=<sp/>buf[1];</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/>lastbyte<sp/>=(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>int)<sp/>buf[2];</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(num_of_bits<sp/>&gt;=<sp/>8)</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lastbyte<sp/>=<sp/>(lastbyte<sp/>&lt;&lt;<sp/>8)<sp/>|<sp/>((num<sp/>&gt;&gt;<sp/>(num_of_bits<sp/>-8))<sp/></highlight><highlight class="comment">/*<sp/>&amp;<sp/>0xff*/</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cbuf[cnt++]<sp/>=<sp/>lastbyte<sp/>&gt;&gt;<sp/>lastbits;</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>num_of_bits<sp/>-=<sp/>8;</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(num_of_bits<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lastbyte<sp/>=<sp/>(lastbyte<sp/>&lt;&lt;<sp/>num_of_bits)<sp/>|<sp/>num;</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lastbits<sp/>+=<sp/>num_of_bits;</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lastbits<sp/>&gt;=<sp/>8)<sp/></highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lastbits<sp/>-=<sp/>8;</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cbuf[cnt++]<sp/>=<sp/>lastbyte<sp/>&gt;&gt;<sp/>lastbits;</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/>buf[0]<sp/>=<sp/>cnt;</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/>buf[1]<sp/>=<sp/>lastbits;</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/>buf[2]<sp/>=<sp/>lastbyte;</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lastbits&gt;0)<sp/></highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cbuf[cnt]<sp/>=<sp/>lastbyte<sp/>&lt;&lt;<sp/>(8<sp/>-<sp/>lastbits);</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="578"><highlight class="normal">}</highlight></codeline>
<codeline lineno="579"><highlight class="normal"></highlight></codeline>
<codeline lineno="580"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="581"><highlight class="comment"><sp/>*<sp/>encodeints<sp/>-<sp/>encode<sp/>a<sp/>small<sp/>set<sp/>of<sp/>small<sp/>integers<sp/>in<sp/>compressed<sp/>format</highlight></codeline>
<codeline lineno="582"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="583"><highlight class="comment"><sp/>*<sp/>this<sp/>routine<sp/>is<sp/>used<sp/>internally<sp/>by<sp/>xdr3dfcoord,<sp/>to<sp/>encode<sp/>a<sp/>set<sp/>of</highlight></codeline>
<codeline lineno="584"><highlight class="comment"><sp/>*<sp/>small<sp/>integers<sp/>to<sp/>the<sp/>buffer<sp/>for<sp/>writing<sp/>to<sp/>a<sp/>file.</highlight></codeline>
<codeline lineno="585"><highlight class="comment"><sp/>*<sp/>Multiplication<sp/>with<sp/>fixed<sp/>(specified<sp/>maximum)<sp/>sizes<sp/>is<sp/>used<sp/>to<sp/>get</highlight></codeline>
<codeline lineno="586"><highlight class="comment"><sp/>*<sp/>to<sp/>one<sp/>big,<sp/>multibyte<sp/>integer.<sp/>Allthough<sp/>the<sp/>routine<sp/>could<sp/>be</highlight></codeline>
<codeline lineno="587"><highlight class="comment"><sp/>*<sp/>modified<sp/>to<sp/>handle<sp/>sizes<sp/>bigger<sp/>than<sp/>16777216,<sp/>or<sp/>more<sp/>than<sp/>just</highlight></codeline>
<codeline lineno="588"><highlight class="comment"><sp/>*<sp/>a<sp/>few<sp/>integers,<sp/>this<sp/>is<sp/>not<sp/>done<sp/>because<sp/>the<sp/>gain<sp/>in<sp/>compression</highlight></codeline>
<codeline lineno="589"><highlight class="comment"><sp/>*<sp/>isn&apos;t<sp/>worth<sp/>the<sp/>effort.<sp/>Note<sp/>that<sp/>overflowing<sp/>the<sp/>multiplication</highlight></codeline>
<codeline lineno="590"><highlight class="comment"><sp/>*<sp/>or<sp/>the<sp/>byte<sp/>buffer<sp/>(32<sp/>bytes)<sp/>is<sp/>unchecked<sp/>and<sp/>whould<sp/>cause<sp/>bad<sp/>results.</highlight></codeline>
<codeline lineno="591"><highlight class="comment"><sp/>*<sp/>THese<sp/>things<sp/>are<sp/>checked<sp/>in<sp/>the<sp/>calling<sp/>routines,<sp/>so<sp/>make<sp/>sure<sp/>not</highlight></codeline>
<codeline lineno="592"><highlight class="comment"><sp/>*<sp/>to<sp/>remove<sp/>those<sp/>checks...</highlight></codeline>
<codeline lineno="593"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="595"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="596"><highlight class="normal">encodeints(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>buf[],<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_of_ints,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_of_bits,</highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sizes[],<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nums[])<sp/></highlight></codeline>
<codeline lineno="598"><highlight class="normal">{</highlight></codeline>
<codeline lineno="599"><highlight class="normal"></highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bytes[32],<sp/>num_of_bytes,<sp/>bytecnt,<sp/>tmp;</highlight></codeline>
<codeline lineno="602"><highlight class="normal"></highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp<sp/>=<sp/>nums[0];</highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><sp/><sp/>num_of_bytes<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bytes[num_of_bytes++]<sp/>=<sp/>tmp<sp/>&amp;<sp/>0xff;</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp<sp/>&gt;&gt;=<sp/>8;</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(tmp<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="610"><highlight class="normal"></highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>1;<sp/>i<sp/>&lt;<sp/>num_of_ints;<sp/>i++)<sp/></highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nums[i]<sp/>&gt;=<sp/>sizes[i])</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,</highlight><highlight class="stringliteral">&quot;major<sp/>breakdown<sp/>in<sp/>encodeints<sp/>-<sp/>num<sp/>%u<sp/>doesn&apos;t<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;match<sp/>size<sp/>%u\n&quot;</highlight><highlight class="normal">,<sp/>nums[i],<sp/>sizes[i]);</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>abort();</highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>use<sp/>one<sp/>step<sp/>multiply<sp/>*/</highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp<sp/>=<sp/>nums[i];</highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(bytecnt<sp/>=<sp/>0;<sp/>bytecnt<sp/>&lt;<sp/>num_of_bytes;<sp/>bytecnt++)<sp/></highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp<sp/>=<sp/>bytes[bytecnt]<sp/>*<sp/>sizes[i]<sp/>+<sp/>tmp;</highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bytes[bytecnt]<sp/>=<sp/>tmp<sp/>&amp;<sp/>0xff;</highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp<sp/>&gt;&gt;=<sp/>8;</highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(tmp<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bytes[bytecnt++]<sp/>=<sp/>tmp<sp/>&amp;<sp/>0xff;</highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp<sp/>&gt;&gt;=<sp/>8;</highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>num_of_bytes<sp/>=<sp/>bytecnt;</highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(num_of_bits<sp/>&gt;=<sp/>num_of_bytes<sp/>*<sp/>8)<sp/></highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>num_of_bytes;<sp/>i++)<sp/></highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>encodebits(buf,<sp/>8,<sp/>bytes[i]);</highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>encodebits(buf,<sp/>num_of_bits<sp/>-<sp/>num_of_bytes<sp/>*<sp/>8,<sp/>0);</highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>num_of_bytes-1;<sp/>i++)</highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>encodebits(buf,<sp/>8,<sp/>bytes[i]);</highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>encodebits(buf,<sp/>num_of_bits-<sp/>(num_of_bytes<sp/>-1)<sp/>*<sp/>8,<sp/>bytes[i]);</highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="650"><highlight class="normal">}</highlight></codeline>
<codeline lineno="651"><highlight class="normal"></highlight></codeline>
<codeline lineno="652"><highlight class="normal"></highlight></codeline>
<codeline lineno="653"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="654"><highlight class="comment"><sp/>*<sp/>decodebits<sp/>-<sp/>decode<sp/>number<sp/>from<sp/>buf<sp/>using<sp/>specified<sp/>number<sp/>of<sp/>bits</highlight></codeline>
<codeline lineno="655"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="656"><highlight class="comment"><sp/>*<sp/>extract<sp/>the<sp/>number<sp/>of<sp/>bits<sp/>from<sp/>the<sp/>array<sp/>buf<sp/>and<sp/>construct<sp/>an<sp/>integer</highlight></codeline>
<codeline lineno="657"><highlight class="comment"><sp/>*<sp/>from<sp/>it.<sp/>Return<sp/>that<sp/>value.</highlight></codeline>
<codeline lineno="658"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="659"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="660"><highlight class="normal"></highlight></codeline>
<codeline lineno="661"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="662"><highlight class="normal">decodebits(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>buf[],<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_of_bits)<sp/></highlight></codeline>
<codeline lineno="663"><highlight class="normal">{</highlight></codeline>
<codeline lineno="664"><highlight class="normal"></highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cnt,<sp/>num;<sp/></highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lastbits,<sp/>lastbyte;</highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>cbuf;</highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mask<sp/>=<sp/>(1<sp/>&lt;&lt;<sp/>num_of_bits)<sp/>-1;</highlight></codeline>
<codeline lineno="669"><highlight class="normal"></highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/><sp/><sp/>cbuf<sp/>=<sp/>((</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)buf)<sp/>+<sp/>3<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*buf);</highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/><sp/><sp/>cnt<sp/>=<sp/>buf[0];</highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/><sp/>lastbits<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>int)<sp/>buf[1];</highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/><sp/><sp/>lastbyte<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>int)<sp/>buf[2];</highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/><sp/><sp/>num<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(num_of_bits<sp/>&gt;=<sp/>8)</highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lastbyte<sp/>=<sp/>(<sp/>lastbyte<sp/>&lt;&lt;<sp/>8<sp/>)<sp/>|<sp/>cbuf[cnt++];</highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>num<sp/>|=<sp/><sp/>(lastbyte<sp/>&gt;&gt;<sp/>lastbits)<sp/>&lt;&lt;<sp/>(num_of_bits<sp/>-<sp/>8);</highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>num_of_bits<sp/>-=8;</highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(num_of_bits<sp/>&gt;<sp/>0)<sp/></highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lastbits<sp/>&lt;<sp/>num_of_bits)<sp/></highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lastbits<sp/>+=<sp/>8;</highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lastbyte<sp/>=<sp/>(lastbyte<sp/>&lt;&lt;<sp/>8)<sp/>|<sp/>cbuf[cnt++];</highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lastbits<sp/>-=<sp/>num_of_bits;</highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>num<sp/>|=<sp/>(lastbyte<sp/>&gt;&gt;<sp/>lastbits)<sp/>&amp;<sp/>((1<sp/>&lt;&lt;<sp/>num_of_bits)<sp/>-1);</highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/><sp/><sp/>num<sp/>&amp;=<sp/>mask;</highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/><sp/><sp/>buf[0]<sp/>=<sp/>cnt;</highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/><sp/><sp/>buf[1]<sp/>=<sp/>lastbits;</highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/><sp/><sp/>buf[2]<sp/>=<sp/>lastbyte;</highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>num;<sp/></highlight></codeline>
<codeline lineno="697"><highlight class="normal">}</highlight></codeline>
<codeline lineno="698"><highlight class="normal"></highlight></codeline>
<codeline lineno="699"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="700"><highlight class="comment"><sp/>*<sp/>decodeints<sp/>-<sp/>decode<sp/>&apos;small&apos;<sp/>integers<sp/>from<sp/>the<sp/>buf<sp/>array</highlight></codeline>
<codeline lineno="701"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="702"><highlight class="comment"><sp/>*<sp/>this<sp/>routine<sp/>is<sp/>the<sp/>inverse<sp/>from<sp/>encodeints()<sp/>and<sp/>decodes<sp/>the<sp/>small<sp/>integers</highlight></codeline>
<codeline lineno="703"><highlight class="comment"><sp/>*<sp/>written<sp/>to<sp/>buf<sp/>by<sp/>calculating<sp/>the<sp/>remainder<sp/>and<sp/>doing<sp/>divisions<sp/>with</highlight></codeline>
<codeline lineno="704"><highlight class="comment"><sp/>*<sp/>the<sp/>given<sp/>sizes[].<sp/>You<sp/>need<sp/>to<sp/>specify<sp/>the<sp/>total<sp/>number<sp/>of<sp/>bits<sp/>to<sp/>be</highlight></codeline>
<codeline lineno="705"><highlight class="comment"><sp/>*<sp/>used<sp/>from<sp/>buf<sp/>in<sp/>num_of_bits.</highlight></codeline>
<codeline lineno="706"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="707"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="708"><highlight class="normal"></highlight></codeline>
<codeline lineno="709"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="710"><highlight class="normal">decodeints(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>buf[],<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_of_ints,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_of_bits,</highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sizes[],<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nums[])</highlight></codeline>
<codeline lineno="712"><highlight class="normal">{</highlight></codeline>
<codeline lineno="713"><highlight class="normal"></highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bytes[32];</highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>j,<sp/>num_of_bytes,<sp/>p,<sp/>num;</highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/><sp/><sp/>bytes[1]<sp/>=<sp/>bytes[2]<sp/>=<sp/>bytes[3]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/><sp/><sp/>num_of_bytes<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(num_of_bits<sp/>&gt;<sp/>8)</highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bytes[num_of_bytes++]<sp/>=<sp/>decodebits(buf,<sp/>8);</highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>num_of_bits<sp/>-=<sp/>8;</highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(num_of_bits<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bytes[num_of_bytes++]<sp/>=<sp/>decodebits(buf,<sp/>num_of_bits);</highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>num_of_ints-1;<sp/>i<sp/>&gt;<sp/>0;<sp/>i--)<sp/></highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>num<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>num_of_bytes-1;<sp/>j<sp/>&gt;=0;<sp/>j--)<sp/></highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>num<sp/>=<sp/>(num<sp/>&lt;&lt;<sp/>8)<sp/>|<sp/>bytes[j];</highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>=<sp/>num<sp/>/<sp/>sizes[i];</highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bytes[j]<sp/>=<sp/>p;</highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>num<sp/>=<sp/>num<sp/>-<sp/>p<sp/>*<sp/>sizes[i];</highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nums[i]<sp/>=<sp/>num;</highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/><sp/><sp/>nums[0]<sp/>=<sp/>bytes[0]<sp/>|<sp/>(bytes[1]<sp/>&lt;&lt;<sp/>8)<sp/>|<sp/>(bytes[2]<sp/>&lt;&lt;<sp/>16)<sp/>|<sp/>(bytes[3]<sp/>&lt;&lt;<sp/>24);</highlight></codeline>
<codeline lineno="741"><highlight class="normal">}</highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="743"><highlight class="normal"></highlight></codeline>
<codeline lineno="744"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>magicints[]<sp/>=<sp/></highlight></codeline>
<codeline lineno="745"><highlight class="normal">{</highlight></codeline>
<codeline lineno="746"><highlight class="normal"><sp/><sp/><sp/><sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>8,<sp/>10,<sp/>12,<sp/>16,<sp/>20,<sp/>25,<sp/>32,<sp/>40,<sp/>50,<sp/>64,</highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/><sp/><sp/>80,<sp/>101,<sp/>128,<sp/>161,<sp/>203,<sp/>256,<sp/>322,<sp/>406,<sp/>512,<sp/>645,<sp/>812,<sp/>1024,<sp/>1290,</highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/><sp/><sp/>1625,<sp/>2048,<sp/>2580,<sp/>3250,<sp/>4096,<sp/>5060,<sp/>6501,<sp/>8192,<sp/>10321,<sp/>13003,<sp/></highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/><sp/><sp/>16384,<sp/>20642,<sp/>26007,<sp/>32768,<sp/>41285,<sp/>52015,<sp/>65536,82570,<sp/>104031,<sp/></highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/><sp/><sp/>131072,<sp/>165140,<sp/>208063,<sp/>262144,<sp/>330280,<sp/>416127,<sp/>524287,<sp/>660561,<sp/></highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/><sp/><sp/>832255,<sp/>1048576,<sp/>1321122,<sp/>1664510,<sp/>2097152,<sp/>2642245,<sp/>3329021,<sp/></highlight></codeline>
<codeline lineno="752"><highlight class="normal"><sp/><sp/><sp/><sp/>4194304,<sp/>5284491,<sp/>6658042,<sp/>8388607,<sp/>10568983,<sp/>13316085,<sp/>16777216<sp/></highlight></codeline>
<codeline lineno="753"><highlight class="normal">};</highlight></codeline>
<codeline lineno="754"><highlight class="normal"></highlight></codeline>
<codeline lineno="755"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FIRSTIDX<sp/>9</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="756"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>note<sp/>that<sp/>magicints[FIRSTIDX-1]<sp/>==<sp/>0<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="757"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LASTIDX<sp/>(sizeof(magicints)<sp/>/<sp/>sizeof(*magicints))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="758"><highlight class="normal"></highlight></codeline>
<codeline lineno="759"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Compressed<sp/>coordinate<sp/>routines<sp/>-<sp/>modified<sp/>from<sp/>the<sp/>original</highlight></codeline>
<codeline lineno="760"><highlight class="comment"><sp/>*<sp/>implementation<sp/>by<sp/>Frans<sp/>v.<sp/>Hoesel<sp/>to<sp/>make<sp/>them<sp/>threadsafe.</highlight></codeline>
<codeline lineno="761"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="762"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="763"><highlight class="normal"><ref refid="xdrfile_8h_1a7e6af0e7fe9b3fd96c79ceba9ea3e7c3" kindref="member">xdrfile_decompress_coord_float</ref>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*ptr,</highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*size,</highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*precision,</highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structXDRFILE" kindref="compound">XDRFILE</ref>*<sp/><sp/><sp/>xfp)</highlight></codeline>
<codeline lineno="767"><highlight class="normal">{</highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>minint[3],<sp/>maxint[3],<sp/>*lip;</highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>smallidx,<sp/>minidx,<sp/>maxidx;</highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>sizeint[3],<sp/>sizesmall[3],<sp/>bitsizeint[3],<sp/>size3;</highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k,<sp/>*buf1,<sp/>*buf2,<sp/>lsize,<sp/>flag;</highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>smallnum,<sp/>smaller,<sp/>larger,<sp/>i,<sp/>is_smaller,<sp/>run;</highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*lfp,<sp/>inv_precision;</highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>tmp,<sp/>*thiscoord,<sp/><sp/>prevcoord[3];</highlight></codeline>
<codeline lineno="775"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bitsize;</highlight></codeline>
<codeline lineno="776"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/><sp/><sp/><sp/>bitsizeint[0]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/><sp/><sp/>bitsizeint[1]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/><sp/><sp/>bitsizeint[2]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="780"><highlight class="normal"></highlight></codeline>
<codeline lineno="781"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(xfp==NULL<sp/>||<sp/>ptr==NULL)</highlight></codeline>
<codeline lineno="782"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp=<ref refid="xdrfile_8h_1afd6ea22cd248c0e56c7ba38de3ea29cb" kindref="member">xdrfile_read_int</ref>(&amp;lsize,1,xfp);</highlight></codeline>
<codeline lineno="784"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(tmp==0)</highlight></codeline>
<codeline lineno="785"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;<sp/></highlight><highlight class="comment">/*<sp/>return<sp/>if<sp/>we<sp/>could<sp/>not<sp/>read<sp/>size<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="786"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*size<sp/>&lt;<sp/>lsize)<sp/></highlight></codeline>
<codeline lineno="787"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="788"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;Requested<sp/>to<sp/>decompress<sp/>%d<sp/>coords,<sp/>file<sp/>contains<sp/>%d\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*size,<sp/>lsize);</highlight></codeline>
<codeline lineno="790"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="792"><highlight class="normal"><sp/><sp/><sp/><sp/>*size<sp/>=<sp/>lsize;</highlight></codeline>
<codeline lineno="793"><highlight class="normal"><sp/><sp/><sp/><sp/>size3<sp/>=<sp/>*size<sp/>*<sp/>3;</highlight></codeline>
<codeline lineno="794"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(size3&gt;xfp-&gt;<ref refid="structXDRFILE_1a9012ee5348a016a94c5ca634def2c1e4" kindref="member">buf1size</ref>)<sp/></highlight></codeline>
<codeline lineno="795"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((xfp-&gt;<ref refid="structXDRFILE_1a7274b510f55945af86ae20a6da81d429" kindref="member">buf1</ref>=(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*)malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)*size3))==NULL)<sp/></highlight></codeline>
<codeline lineno="797"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="798"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,</highlight><highlight class="stringliteral">&quot;Cannot<sp/>allocate<sp/>memory<sp/>for<sp/>decompressing<sp/>coordinates.\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="799"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;<sp/></highlight></codeline>
<codeline lineno="800"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="801"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xfp-&gt;<ref refid="structXDRFILE_1a9012ee5348a016a94c5ca634def2c1e4" kindref="member">buf1size</ref>=size3;</highlight></codeline>
<codeline lineno="802"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xfp-&gt;<ref refid="structXDRFILE_1a71cedf31f2b15a635fa4fe20094a3133" kindref="member">buf2size</ref>=size3*1.2;</highlight></codeline>
<codeline lineno="803"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((xfp-&gt;<ref refid="structXDRFILE_1a6e8d580fdf18234acfda1f382d89a2d8" kindref="member">buf2</ref>=(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*)malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)*xfp-&gt;<ref refid="structXDRFILE_1a71cedf31f2b15a635fa4fe20094a3133" kindref="member">buf2size</ref>))==NULL)</highlight></codeline>
<codeline lineno="804"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="805"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,</highlight><highlight class="stringliteral">&quot;Cannot<sp/>allocate<sp/>memory<sp/>for<sp/>decompressing<sp/>coordinates.\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="806"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="807"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="808"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="809"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Dont<sp/>bother<sp/>with<sp/>compression<sp/>for<sp/>three<sp/>atoms<sp/>or<sp/>less<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="810"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(*size&lt;=9)<sp/></highlight></codeline>
<codeline lineno="811"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="812"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="xdrfile_8h_1a0284c6956e48e298820448fc86640e76" kindref="member">xdrfile_read_float</ref>(ptr,size3,xfp)/3;</highlight></codeline>
<codeline lineno="813"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>return<sp/>number<sp/>of<sp/>coords,<sp/>not<sp/>floats<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="814"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="815"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Compression-time<sp/>if<sp/>we<sp/>got<sp/>here.<sp/>Read<sp/>precision<sp/>first<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="816"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="xdrfile_8h_1a0284c6956e48e298820448fc86640e76" kindref="member">xdrfile_read_float</ref>(precision,1,xfp);</highlight></codeline>
<codeline lineno="817"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="818"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>avoid<sp/>repeated<sp/>pointer<sp/>dereferencing.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="819"><highlight class="normal"><sp/><sp/><sp/><sp/>buf1=xfp-&gt;<ref refid="structXDRFILE_1a7274b510f55945af86ae20a6da81d429" kindref="member">buf1</ref>;<sp/></highlight></codeline>
<codeline lineno="820"><highlight class="normal"><sp/><sp/><sp/><sp/>buf2=xfp-&gt;<ref refid="structXDRFILE_1a6e8d580fdf18234acfda1f382d89a2d8" kindref="member">buf2</ref>;</highlight></codeline>
<codeline lineno="821"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>buf2[0-2]<sp/>are<sp/>special<sp/>and<sp/>do<sp/>not<sp/>contain<sp/>actual<sp/>data<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="822"><highlight class="normal"><sp/><sp/><sp/><sp/>buf2[0]<sp/>=<sp/>buf2[1]<sp/>=<sp/>buf2[2]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="823"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="xdrfile_8h_1afd6ea22cd248c0e56c7ba38de3ea29cb" kindref="member">xdrfile_read_int</ref>(minint,3,xfp);</highlight></codeline>
<codeline lineno="824"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="xdrfile_8h_1afd6ea22cd248c0e56c7ba38de3ea29cb" kindref="member">xdrfile_read_int</ref>(maxint,3,xfp);</highlight></codeline>
<codeline lineno="825"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/><sp/><sp/>sizeint[0]<sp/>=<sp/>maxint[0]<sp/>-<sp/>minint[0]+1;</highlight></codeline>
<codeline lineno="827"><highlight class="normal"><sp/><sp/><sp/><sp/>sizeint[1]<sp/>=<sp/>maxint[1]<sp/>-<sp/>minint[1]+1;</highlight></codeline>
<codeline lineno="828"><highlight class="normal"><sp/><sp/><sp/><sp/>sizeint[2]<sp/>=<sp/>maxint[2]<sp/>-<sp/>minint[2]+1;</highlight></codeline>
<codeline lineno="829"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="830"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>check<sp/>if<sp/>one<sp/>of<sp/>the<sp/>sizes<sp/>is<sp/>to<sp/>big<sp/>to<sp/>be<sp/>multiplied<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="831"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((sizeint[0]<sp/>|<sp/>sizeint[1]<sp/>|<sp/>sizeint[2]<sp/>)<sp/>&gt;<sp/>0xffffff)</highlight></codeline>
<codeline lineno="832"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="833"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bitsizeint[0]<sp/>=<sp/>sizeofint(sizeint[0]);</highlight></codeline>
<codeline lineno="834"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bitsizeint[1]<sp/>=<sp/>sizeofint(sizeint[1]);</highlight></codeline>
<codeline lineno="835"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bitsizeint[2]<sp/>=<sp/>sizeofint(sizeint[2]);</highlight></codeline>
<codeline lineno="836"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bitsize<sp/>=<sp/>0;<sp/></highlight><highlight class="comment">/*<sp/>flag<sp/>the<sp/>use<sp/>of<sp/>large<sp/>sizes<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="837"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="838"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="839"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="840"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bitsize<sp/>=<sp/>sizeofints(3,<sp/>sizeint);</highlight></codeline>
<codeline lineno="841"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="842"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="843"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="xdrfile_8h_1afd6ea22cd248c0e56c7ba38de3ea29cb" kindref="member">xdrfile_read_int</ref>(&amp;smallidx,1,xfp)<sp/>==<sp/>0)<sp/></highlight></codeline>
<codeline lineno="844"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;<sp/></highlight><highlight class="comment">/*<sp/>not<sp/>sure<sp/>what<sp/>has<sp/>happened<sp/>here<sp/>or<sp/>why<sp/>we<sp/>return...<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="845"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp=smallidx+8;</highlight></codeline>
<codeline lineno="846"><highlight class="normal"><sp/><sp/><sp/><sp/>maxidx<sp/>=<sp/>(LASTIDX&lt;tmp)<sp/>?<sp/>LASTIDX<sp/>:<sp/>tmp;</highlight></codeline>
<codeline lineno="847"><highlight class="normal"><sp/><sp/><sp/><sp/>minidx<sp/>=<sp/>maxidx<sp/>-<sp/>8;<sp/></highlight><highlight class="comment">/*<sp/>often<sp/>this<sp/>equal<sp/>smallidx<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="848"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp<sp/>=<sp/>smallidx-1;</highlight></codeline>
<codeline lineno="849"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp<sp/>=<sp/>(FIRSTIDX&gt;tmp)<sp/>?<sp/>FIRSTIDX<sp/>:<sp/>tmp;</highlight></codeline>
<codeline lineno="850"><highlight class="normal"><sp/><sp/><sp/><sp/>smaller<sp/>=<sp/>magicints[tmp]<sp/>/<sp/>2;</highlight></codeline>
<codeline lineno="851"><highlight class="normal"><sp/><sp/><sp/><sp/>smallnum<sp/>=<sp/>magicints[smallidx]<sp/>/<sp/>2;</highlight></codeline>
<codeline lineno="852"><highlight class="normal"><sp/><sp/><sp/><sp/>sizesmall[0]<sp/>=<sp/>sizesmall[1]<sp/>=<sp/>sizesmall[2]<sp/>=<sp/>magicints[smallidx]<sp/>;</highlight></codeline>
<codeline lineno="853"><highlight class="normal"><sp/><sp/><sp/><sp/>larger<sp/>=<sp/>magicints[maxidx];</highlight></codeline>
<codeline lineno="854"><highlight class="normal"></highlight></codeline>
<codeline lineno="855"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>buf2[0]<sp/>holds<sp/>the<sp/>length<sp/>in<sp/>bytes<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="856"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="857"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="xdrfile_8h_1afd6ea22cd248c0e56c7ba38de3ea29cb" kindref="member">xdrfile_read_int</ref>(buf2,1,xfp)<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="858"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="859"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="xdrfile_8h_1a608b6dfc7dd697062a91f784d7e31e4e" kindref="member">xdrfile_read_opaque</ref>((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)&amp;(buf2[3]),(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)buf2[0],xfp)<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="860"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="861"><highlight class="normal"><sp/><sp/><sp/><sp/>buf2[0]<sp/>=<sp/>buf2[1]<sp/>=<sp/>buf2[2]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="862"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="863"><highlight class="normal"><sp/><sp/><sp/><sp/>lfp<sp/>=<sp/>ptr;</highlight></codeline>
<codeline lineno="864"><highlight class="normal"><sp/><sp/><sp/><sp/>inv_precision<sp/>=<sp/>1.0<sp/>/<sp/>*<sp/>precision;</highlight></codeline>
<codeline lineno="865"><highlight class="normal"><sp/><sp/><sp/><sp/>run<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="866"><highlight class="normal"><sp/><sp/><sp/><sp/>i<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="867"><highlight class="normal"><sp/><sp/><sp/><sp/>lip<sp/>=<sp/>buf1;</highlight></codeline>
<codeline lineno="868"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>&lt;<sp/>lsize<sp/>)<sp/></highlight></codeline>
<codeline lineno="869"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="870"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>thiscoord<sp/>=<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*)(lip)<sp/>+<sp/>i<sp/>*<sp/>3;</highlight></codeline>
<codeline lineno="871"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="872"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bitsize<sp/>==<sp/>0)<sp/></highlight></codeline>
<codeline lineno="873"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="874"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>thiscoord[0]<sp/>=<sp/>decodebits(buf2,<sp/>bitsizeint[0]);</highlight></codeline>
<codeline lineno="875"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>thiscoord[1]<sp/>=<sp/>decodebits(buf2,<sp/>bitsizeint[1]);</highlight></codeline>
<codeline lineno="876"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>thiscoord[2]<sp/>=<sp/>decodebits(buf2,<sp/>bitsizeint[2]);</highlight></codeline>
<codeline lineno="877"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="878"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="879"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="880"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>decodeints(buf2,<sp/>3,<sp/>bitsize,<sp/>sizeint,<sp/>thiscoord);</highlight></codeline>
<codeline lineno="881"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="882"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="883"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i++;</highlight></codeline>
<codeline lineno="884"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>thiscoord[0]<sp/>+=<sp/>minint[0];</highlight></codeline>
<codeline lineno="885"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>thiscoord[1]<sp/>+=<sp/>minint[1];</highlight></codeline>
<codeline lineno="886"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>thiscoord[2]<sp/>+=<sp/>minint[2];</highlight></codeline>
<codeline lineno="887"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="888"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prevcoord[0]<sp/>=<sp/>thiscoord[0];</highlight></codeline>
<codeline lineno="889"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prevcoord[1]<sp/>=<sp/>thiscoord[1];</highlight></codeline>
<codeline lineno="890"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prevcoord[2]<sp/>=<sp/>thiscoord[2];</highlight></codeline>
<codeline lineno="891"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="892"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>flag<sp/>=<sp/>decodebits(buf2,<sp/>1);</highlight></codeline>
<codeline lineno="893"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is_smaller<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="894"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(flag<sp/>==<sp/>1)<sp/></highlight></codeline>
<codeline lineno="895"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="896"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>run<sp/>=<sp/>decodebits(buf2,<sp/>5);</highlight></codeline>
<codeline lineno="897"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is_smaller<sp/>=<sp/>run<sp/>%<sp/>3;</highlight></codeline>
<codeline lineno="898"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>run<sp/>-=<sp/>is_smaller;</highlight></codeline>
<codeline lineno="899"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is_smaller--;</highlight></codeline>
<codeline lineno="900"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="901"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(run<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="902"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="903"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>thiscoord<sp/>+=<sp/>3;</highlight></codeline>
<codeline lineno="904"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(k<sp/>=<sp/>0;<sp/>k<sp/>&lt;<sp/>run;<sp/>k+=3)<sp/></highlight></codeline>
<codeline lineno="905"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="906"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>decodeints(buf2,<sp/>3,<sp/>smallidx,<sp/>sizesmall,<sp/>thiscoord);</highlight></codeline>
<codeline lineno="907"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i++;</highlight></codeline>
<codeline lineno="908"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>thiscoord[0]<sp/>+=<sp/>prevcoord[0]<sp/>-<sp/>smallnum;</highlight></codeline>
<codeline lineno="909"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>thiscoord[1]<sp/>+=<sp/>prevcoord[1]<sp/>-<sp/>smallnum;</highlight></codeline>
<codeline lineno="910"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>thiscoord[2]<sp/>+=<sp/>prevcoord[2]<sp/>-<sp/>smallnum;</highlight></codeline>
<codeline lineno="911"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(k<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="912"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>interchange<sp/>first<sp/>with<sp/>second<sp/>atom<sp/>for<sp/>better</highlight></codeline>
<codeline lineno="913"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>compression<sp/>of<sp/>water<sp/>molecules</highlight></codeline>
<codeline lineno="914"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="915"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp<sp/>=<sp/>thiscoord[0];<sp/>thiscoord[0]<sp/>=<sp/>prevcoord[0];</highlight></codeline>
<codeline lineno="916"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prevcoord[0]<sp/>=<sp/>tmp;</highlight></codeline>
<codeline lineno="917"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp<sp/>=<sp/>thiscoord[1];<sp/>thiscoord[1]<sp/>=<sp/>prevcoord[1];</highlight></codeline>
<codeline lineno="918"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prevcoord[1]<sp/>=<sp/>tmp;</highlight></codeline>
<codeline lineno="919"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp<sp/>=<sp/>thiscoord[2];<sp/>thiscoord[2]<sp/>=<sp/>prevcoord[2];</highlight></codeline>
<codeline lineno="920"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prevcoord[2]<sp/>=<sp/>tmp;</highlight></codeline>
<codeline lineno="921"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*lfp++<sp/>=<sp/>prevcoord[0]<sp/>*<sp/>inv_precision;</highlight></codeline>
<codeline lineno="922"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*lfp++<sp/>=<sp/>prevcoord[1]<sp/>*<sp/>inv_precision;</highlight></codeline>
<codeline lineno="923"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*lfp++<sp/>=<sp/>prevcoord[2]<sp/>*<sp/>inv_precision;</highlight></codeline>
<codeline lineno="924"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="925"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prevcoord[0]<sp/>=<sp/>thiscoord[0];</highlight></codeline>
<codeline lineno="926"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prevcoord[1]<sp/>=<sp/>thiscoord[1];</highlight></codeline>
<codeline lineno="927"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prevcoord[2]<sp/>=<sp/>thiscoord[2];</highlight></codeline>
<codeline lineno="928"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="929"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*lfp++<sp/>=<sp/>thiscoord[0]<sp/>*<sp/>inv_precision;</highlight></codeline>
<codeline lineno="930"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*lfp++<sp/>=<sp/>thiscoord[1]<sp/>*<sp/>inv_precision;</highlight></codeline>
<codeline lineno="931"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*lfp++<sp/>=<sp/>thiscoord[2]<sp/>*<sp/>inv_precision;</highlight></codeline>
<codeline lineno="932"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="933"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight></codeline>
<codeline lineno="934"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="935"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="936"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*lfp++<sp/>=<sp/>thiscoord[0]<sp/>*<sp/>inv_precision;</highlight></codeline>
<codeline lineno="937"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*lfp++<sp/>=<sp/>thiscoord[1]<sp/>*<sp/>inv_precision;</highlight></codeline>
<codeline lineno="938"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*lfp++<sp/>=<sp/>thiscoord[2]<sp/>*<sp/>inv_precision;<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="939"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="940"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>smallidx<sp/>+=<sp/>is_smaller;</highlight></codeline>
<codeline lineno="941"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(is_smaller<sp/>&lt;<sp/>0)<sp/></highlight></codeline>
<codeline lineno="942"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="943"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>smallnum<sp/>=<sp/>smaller;</highlight></codeline>
<codeline lineno="944"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="945"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(smallidx<sp/>&gt;<sp/>FIRSTIDX)<sp/></highlight></codeline>
<codeline lineno="946"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="947"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>smaller<sp/>=<sp/>magicints[smallidx<sp/>-<sp/>1]<sp/>/2;</highlight></codeline>
<codeline lineno="948"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight></codeline>
<codeline lineno="949"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="950"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="951"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>smaller<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="952"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="953"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight></codeline>
<codeline lineno="954"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(is_smaller<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="955"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="956"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>smaller<sp/>=<sp/>smallnum;</highlight></codeline>
<codeline lineno="957"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>smallnum<sp/>=<sp/>magicints[smallidx]<sp/>/<sp/>2;</highlight></codeline>
<codeline lineno="958"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="959"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sizesmall[0]<sp/>=<sp/>sizesmall[1]<sp/>=<sp/>sizesmall[2]<sp/>=<sp/>magicints[smallidx]<sp/>;</highlight></codeline>
<codeline lineno="960"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="961"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*size;</highlight></codeline>
<codeline lineno="962"><highlight class="normal">}</highlight></codeline>
<codeline lineno="963"><highlight class="normal"></highlight></codeline>
<codeline lineno="964"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="965"><highlight class="normal"><ref refid="xdrfile_8h_1a91f4daa33bda1086fad70aa1c399e016" kindref="member">xdrfile_compress_coord_float</ref>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><sp/><sp/>*ptr,</highlight></codeline>
<codeline lineno="966"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>size,</highlight></codeline>
<codeline lineno="967"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>precision,</highlight></codeline>
<codeline lineno="968"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structXDRFILE" kindref="compound">XDRFILE</ref>*<sp/>xfp)</highlight></codeline>
<codeline lineno="969"><highlight class="normal">{</highlight></codeline>
<codeline lineno="970"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>minint[3],<sp/>maxint[3],<sp/>mindiff,<sp/>*lip,<sp/>diff;</highlight></codeline>
<codeline lineno="971"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lint1,<sp/>lint2,<sp/>lint3,<sp/>oldlint1,<sp/>oldlint2,<sp/>oldlint3,<sp/>smallidx;</highlight></codeline>
<codeline lineno="972"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>minidx,<sp/>maxidx;</highlight></codeline>
<codeline lineno="973"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>sizeint[3],<sp/>sizesmall[3],<sp/>bitsizeint[3],<sp/>size3,<sp/>*luip;</highlight></codeline>
<codeline lineno="974"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k,<sp/>*buf1,<sp/>*buf2;</highlight></codeline>
<codeline lineno="975"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>smallnum,<sp/>smaller,<sp/>larger,<sp/>i,<sp/>j,<sp/>is_small,<sp/>is_smaller,<sp/>run,<sp/>prevrun;</highlight></codeline>
<codeline lineno="976"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*lfp,<sp/>lf;</highlight></codeline>
<codeline lineno="977"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>tmp,<sp/>tmpsum,<sp/>*thiscoord,<sp/><sp/>prevcoord[3];</highlight></codeline>
<codeline lineno="978"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>tmpcoord[30];</highlight></codeline>
<codeline lineno="979"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>errval=1;</highlight></codeline>
<codeline lineno="980"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bitsize;</highlight></codeline>
<codeline lineno="981"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="982"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(xfp==NULL)</highlight></codeline>
<codeline lineno="983"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="984"><highlight class="normal"><sp/><sp/><sp/><sp/>size3=3*size;</highlight></codeline>
<codeline lineno="985"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="986"><highlight class="normal"><sp/><sp/><sp/><sp/>bitsizeint[0]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="987"><highlight class="normal"><sp/><sp/><sp/><sp/>bitsizeint[1]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="988"><highlight class="normal"><sp/><sp/><sp/><sp/>bitsizeint[2]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="989"><highlight class="normal"></highlight></codeline>
<codeline lineno="990"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(size3&gt;xfp-&gt;<ref refid="structXDRFILE_1a9012ee5348a016a94c5ca634def2c1e4" kindref="member">buf1size</ref>)</highlight></codeline>
<codeline lineno="991"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="992"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((xfp-&gt;<ref refid="structXDRFILE_1a7274b510f55945af86ae20a6da81d429" kindref="member">buf1</ref>=(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*)malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)*size3))==NULL)<sp/></highlight></codeline>
<codeline lineno="993"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="994"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,</highlight><highlight class="stringliteral">&quot;Cannot<sp/>allocate<sp/>memory<sp/>for<sp/>compressing<sp/>coordinates.\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="995"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="996"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="997"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xfp-&gt;<ref refid="structXDRFILE_1a9012ee5348a016a94c5ca634def2c1e4" kindref="member">buf1size</ref>=size3;</highlight></codeline>
<codeline lineno="998"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xfp-&gt;<ref refid="structXDRFILE_1a71cedf31f2b15a635fa4fe20094a3133" kindref="member">buf2size</ref>=size3*1.2;</highlight></codeline>
<codeline lineno="999"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((xfp-&gt;<ref refid="structXDRFILE_1a6e8d580fdf18234acfda1f382d89a2d8" kindref="member">buf2</ref>=(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*)malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)*xfp-&gt;<ref refid="structXDRFILE_1a71cedf31f2b15a635fa4fe20094a3133" kindref="member">buf2size</ref>))==NULL)</highlight></codeline>
<codeline lineno="1000"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1001"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,</highlight><highlight class="stringliteral">&quot;Cannot<sp/>allocate<sp/>memory<sp/>for<sp/>compressing<sp/>coordinates.\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1002"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="1003"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1004"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1005"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="xdrfile_8h_1aebeea86c177fe409a3b737f93674137f" kindref="member">xdrfile_write_int</ref>(&amp;size,1,xfp)==0)</highlight></codeline>
<codeline lineno="1006"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;<sp/></highlight><highlight class="comment">/*<sp/>return<sp/>if<sp/>we<sp/>could<sp/>not<sp/>write<sp/>size<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1007"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Dont<sp/>bother<sp/>with<sp/>compression<sp/>for<sp/>three<sp/>atoms<sp/>or<sp/>less<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1008"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(size&lt;=9)<sp/></highlight></codeline>
<codeline lineno="1009"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1010"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="xdrfile_8h_1a07b2f0fbacf3d25f6d6601e6c4285cdf" kindref="member">xdrfile_write_float</ref>(ptr,size3,xfp)/3;</highlight></codeline>
<codeline lineno="1011"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>return<sp/>number<sp/>of<sp/>coords,<sp/>not<sp/>floats<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1012"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1013"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Compression-time<sp/>if<sp/>we<sp/>got<sp/>here.<sp/>Write<sp/>precision<sp/>first<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1014"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(precision<sp/>&lt;=<sp/>0)</highlight></codeline>
<codeline lineno="1015"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>precision<sp/>=<sp/>1000;</highlight></codeline>
<codeline lineno="1016"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="xdrfile_8h_1a07b2f0fbacf3d25f6d6601e6c4285cdf" kindref="member">xdrfile_write_float</ref>(&amp;precision,1,xfp);</highlight></codeline>
<codeline lineno="1017"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>avoid<sp/>repeated<sp/>pointer<sp/>dereferencing.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1018"><highlight class="normal"><sp/><sp/><sp/><sp/>buf1=xfp-&gt;<ref refid="structXDRFILE_1a7274b510f55945af86ae20a6da81d429" kindref="member">buf1</ref>;<sp/></highlight></codeline>
<codeline lineno="1019"><highlight class="normal"><sp/><sp/><sp/><sp/>buf2=xfp-&gt;<ref refid="structXDRFILE_1a6e8d580fdf18234acfda1f382d89a2d8" kindref="member">buf2</ref>;</highlight></codeline>
<codeline lineno="1020"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>buf2[0-2]<sp/>are<sp/>special<sp/>and<sp/>do<sp/>not<sp/>contain<sp/>actual<sp/>data<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1021"><highlight class="normal"><sp/><sp/><sp/><sp/>buf2[0]<sp/>=<sp/>buf2[1]<sp/>=<sp/>buf2[2]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1022"><highlight class="normal"><sp/><sp/><sp/><sp/>minint[0]<sp/>=<sp/>minint[1]<sp/>=<sp/>minint[2]<sp/>=<sp/>INT_MAX;</highlight></codeline>
<codeline lineno="1023"><highlight class="normal"><sp/><sp/><sp/><sp/>maxint[0]<sp/>=<sp/>maxint[1]<sp/>=<sp/>maxint[2]<sp/>=<sp/>INT_MIN;</highlight></codeline>
<codeline lineno="1024"><highlight class="normal"><sp/><sp/><sp/><sp/>prevrun<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="1025"><highlight class="normal"><sp/><sp/><sp/><sp/>lfp<sp/>=<sp/>ptr;</highlight></codeline>
<codeline lineno="1026"><highlight class="normal"><sp/><sp/><sp/><sp/>lip<sp/>=<sp/>buf1;</highlight></codeline>
<codeline lineno="1027"><highlight class="normal"><sp/><sp/><sp/><sp/>mindiff<sp/>=<sp/>INT_MAX;</highlight></codeline>
<codeline lineno="1028"><highlight class="normal"><sp/><sp/><sp/><sp/>oldlint1<sp/>=<sp/>oldlint2<sp/>=<sp/>oldlint3<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1029"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(lfp<sp/>&lt;<sp/>ptr<sp/>+<sp/>size3<sp/>)</highlight></codeline>
<codeline lineno="1030"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1031"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>find<sp/>nearest<sp/>integer<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1032"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*lfp<sp/>&gt;=<sp/>0.0)</highlight></codeline>
<codeline lineno="1033"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lf<sp/>=<sp/>*lfp<sp/>*<sp/>precision<sp/>+<sp/>0.5;</highlight></codeline>
<codeline lineno="1034"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1035"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lf<sp/>=<sp/>*lfp<sp/>*<sp/>precision<sp/>-<sp/>0.5;</highlight></codeline>
<codeline lineno="1036"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fabs(lf)<sp/>&gt;<sp/>INT_MAX-2)<sp/></highlight></codeline>
<codeline lineno="1037"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1038"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>scaling<sp/>would<sp/>cause<sp/>overflow<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1039"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,</highlight><highlight class="stringliteral">&quot;Internal<sp/>overflow<sp/>compressing<sp/>coordinates.\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1040"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>errval=0;</highlight></codeline>
<codeline lineno="1041"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1042"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lint1<sp/>=<sp/>lf;</highlight></codeline>
<codeline lineno="1043"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lint1<sp/>&lt;<sp/>minint[0])<sp/>minint[0]<sp/>=<sp/>lint1;</highlight></codeline>
<codeline lineno="1044"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lint1<sp/>&gt;<sp/>maxint[0])<sp/>maxint[0]<sp/>=<sp/>lint1;</highlight></codeline>
<codeline lineno="1045"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*lip++<sp/>=<sp/>lint1;</highlight></codeline>
<codeline lineno="1046"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lfp++;</highlight></codeline>
<codeline lineno="1047"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*lfp<sp/>&gt;=<sp/>0.0)</highlight></codeline>
<codeline lineno="1048"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lf<sp/>=<sp/>*lfp<sp/>*<sp/>precision<sp/>+<sp/>0.5;</highlight></codeline>
<codeline lineno="1049"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1050"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lf<sp/>=<sp/>*lfp<sp/>*<sp/>precision<sp/>-<sp/>0.5;</highlight></codeline>
<codeline lineno="1051"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fabs(lf)<sp/>&gt;<sp/>INT_MAX-2)</highlight></codeline>
<codeline lineno="1052"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1053"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>scaling<sp/>would<sp/>cause<sp/>overflow<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1054"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,</highlight><highlight class="stringliteral">&quot;Internal<sp/>overflow<sp/>compressing<sp/>coordinates.\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1055"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>errval=0;</highlight></codeline>
<codeline lineno="1056"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1057"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lint2<sp/>=<sp/>lf;</highlight></codeline>
<codeline lineno="1058"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lint2<sp/>&lt;<sp/>minint[1])<sp/>minint[1]<sp/>=<sp/>lint2;</highlight></codeline>
<codeline lineno="1059"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lint2<sp/>&gt;<sp/>maxint[1])<sp/>maxint[1]<sp/>=<sp/>lint2;</highlight></codeline>
<codeline lineno="1060"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*lip++<sp/>=<sp/>lint2;</highlight></codeline>
<codeline lineno="1061"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lfp++;</highlight></codeline>
<codeline lineno="1062"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*lfp<sp/>&gt;=<sp/>0.0)</highlight></codeline>
<codeline lineno="1063"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lf<sp/>=<sp/>*lfp<sp/>*<sp/>precision<sp/>+<sp/>0.5;</highlight></codeline>
<codeline lineno="1064"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1065"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lf<sp/>=<sp/>*lfp<sp/>*<sp/>precision<sp/>-<sp/>0.5;</highlight></codeline>
<codeline lineno="1066"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fabs(lf)<sp/>&gt;<sp/>INT_MAX-2)<sp/></highlight></codeline>
<codeline lineno="1067"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1068"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>errval=0;<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1069"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1070"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lint3<sp/>=<sp/>lf;</highlight></codeline>
<codeline lineno="1071"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lint3<sp/>&lt;<sp/>minint[2])<sp/>minint[2]<sp/>=<sp/>lint3;</highlight></codeline>
<codeline lineno="1072"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lint3<sp/>&gt;<sp/>maxint[2])<sp/>maxint[2]<sp/>=<sp/>lint3;</highlight></codeline>
<codeline lineno="1073"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*lip++<sp/>=<sp/>lint3;</highlight></codeline>
<codeline lineno="1074"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lfp++;</highlight></codeline>
<codeline lineno="1075"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>diff<sp/>=<sp/>abs(oldlint1-lint1)+abs(oldlint2-lint2)+abs(oldlint3-lint3);</highlight></codeline>
<codeline lineno="1076"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(diff<sp/>&lt;<sp/>mindiff<sp/>&amp;&amp;<sp/>lfp<sp/>&gt;<sp/>ptr<sp/>+<sp/>3)</highlight></codeline>
<codeline lineno="1077"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mindiff<sp/>=<sp/>diff;</highlight></codeline>
<codeline lineno="1078"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>oldlint1<sp/>=<sp/>lint1;</highlight></codeline>
<codeline lineno="1079"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>oldlint2<sp/>=<sp/>lint2;</highlight></codeline>
<codeline lineno="1080"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>oldlint3<sp/>=<sp/>lint3;</highlight></codeline>
<codeline lineno="1081"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/><sp/></highlight></codeline>
<codeline lineno="1082"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="xdrfile_8h_1aebeea86c177fe409a3b737f93674137f" kindref="member">xdrfile_write_int</ref>(minint,3,xfp);</highlight></codeline>
<codeline lineno="1083"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="xdrfile_8h_1aebeea86c177fe409a3b737f93674137f" kindref="member">xdrfile_write_int</ref>(maxint,3,xfp);</highlight></codeline>
<codeline lineno="1084"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="1085"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)maxint[0]<sp/>-<sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)minint[0]<sp/>&gt;=<sp/>INT_MAX-2<sp/>||</highlight></codeline>
<codeline lineno="1086"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)maxint[1]<sp/>-<sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)minint[1]<sp/>&gt;=<sp/>INT_MAX-2<sp/>||</highlight></codeline>
<codeline lineno="1087"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)maxint[2]<sp/>-<sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)minint[2]<sp/>&gt;=<sp/>INT_MAX-2)<sp/>{</highlight></codeline>
<codeline lineno="1088"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>turning<sp/>value<sp/>in<sp/>unsigned<sp/>by<sp/>subtracting<sp/>minint</highlight></codeline>
<codeline lineno="1089"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>would<sp/>cause<sp/>overflow</highlight></codeline>
<codeline lineno="1090"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1091"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,</highlight><highlight class="stringliteral">&quot;Internal<sp/>overflow<sp/>compressing<sp/>coordinates.\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1092"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>errval=0;</highlight></codeline>
<codeline lineno="1093"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1094"><highlight class="normal"><sp/><sp/><sp/><sp/>sizeint[0]<sp/>=<sp/>maxint[0]<sp/>-<sp/>minint[0]+1;</highlight></codeline>
<codeline lineno="1095"><highlight class="normal"><sp/><sp/><sp/><sp/>sizeint[1]<sp/>=<sp/>maxint[1]<sp/>-<sp/>minint[1]+1;</highlight></codeline>
<codeline lineno="1096"><highlight class="normal"><sp/><sp/><sp/><sp/>sizeint[2]<sp/>=<sp/>maxint[2]<sp/>-<sp/>minint[2]+1;</highlight></codeline>
<codeline lineno="1097"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="1098"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>check<sp/>if<sp/>one<sp/>of<sp/>the<sp/>sizes<sp/>is<sp/>to<sp/>big<sp/>to<sp/>be<sp/>multiplied<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1099"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((sizeint[0]<sp/>|<sp/>sizeint[1]<sp/>|<sp/>sizeint[2]<sp/>)<sp/>&gt;<sp/>0xffffff)</highlight></codeline>
<codeline lineno="1100"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bitsizeint[0]<sp/>=<sp/>sizeofint(sizeint[0]);</highlight></codeline>
<codeline lineno="1102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bitsizeint[1]<sp/>=<sp/>sizeofint(sizeint[1]);</highlight></codeline>
<codeline lineno="1103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bitsizeint[2]<sp/>=<sp/>sizeofint(sizeint[2]);</highlight></codeline>
<codeline lineno="1104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bitsize<sp/>=<sp/>0;<sp/></highlight><highlight class="comment">/*<sp/>flag<sp/>the<sp/>use<sp/>of<sp/>large<sp/>sizes<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1105"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1106"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1107"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bitsize<sp/>=<sp/>sizeofints(3,<sp/>sizeint);</highlight></codeline>
<codeline lineno="1109"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1110"><highlight class="normal"><sp/><sp/><sp/><sp/>lip<sp/>=<sp/>buf1;</highlight></codeline>
<codeline lineno="1111"><highlight class="normal"><sp/><sp/><sp/><sp/>luip<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*)<sp/>buf1;</highlight></codeline>
<codeline lineno="1112"><highlight class="normal"><sp/><sp/><sp/><sp/>smallidx<sp/>=<sp/>FIRSTIDX;</highlight></codeline>
<codeline lineno="1113"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(smallidx<sp/>&lt;<sp/>LASTIDX<sp/>&amp;&amp;<sp/>magicints[smallidx]<sp/>&lt;<sp/>mindiff)</highlight></codeline>
<codeline lineno="1114"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>smallidx++;</highlight></codeline>
<codeline lineno="1116"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1117"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="xdrfile_8h_1aebeea86c177fe409a3b737f93674137f" kindref="member">xdrfile_write_int</ref>(&amp;smallidx,1,xfp);</highlight></codeline>
<codeline lineno="1118"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp=smallidx+8;</highlight></codeline>
<codeline lineno="1119"><highlight class="normal"><sp/><sp/><sp/><sp/>maxidx<sp/>=<sp/>(LASTIDX&lt;tmp)<sp/>?<sp/>LASTIDX<sp/>:<sp/>tmp;</highlight></codeline>
<codeline lineno="1120"><highlight class="normal"><sp/><sp/><sp/><sp/>minidx<sp/>=<sp/>maxidx<sp/>-<sp/>8;<sp/></highlight><highlight class="comment">/*<sp/>often<sp/>this<sp/>equal<sp/>smallidx<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1121"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp=smallidx-1;</highlight></codeline>
<codeline lineno="1122"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp=<sp/>(FIRSTIDX&gt;tmp)<sp/>?<sp/>FIRSTIDX<sp/>:<sp/>tmp;</highlight></codeline>
<codeline lineno="1123"><highlight class="normal"><sp/><sp/><sp/><sp/>smaller<sp/>=<sp/>magicints[tmp]<sp/>/<sp/>2;</highlight></codeline>
<codeline lineno="1124"><highlight class="normal"><sp/><sp/><sp/><sp/>smallnum<sp/>=<sp/>magicints[smallidx]<sp/>/<sp/>2;</highlight></codeline>
<codeline lineno="1125"><highlight class="normal"><sp/><sp/><sp/><sp/>sizesmall[0]<sp/>=<sp/>sizesmall[1]<sp/>=<sp/>sizesmall[2]<sp/>=<sp/>magicints[smallidx];</highlight></codeline>
<codeline lineno="1126"><highlight class="normal"><sp/><sp/><sp/><sp/>larger<sp/>=<sp/>magicints[maxidx]<sp/>/<sp/>2;</highlight></codeline>
<codeline lineno="1127"><highlight class="normal"><sp/><sp/><sp/><sp/>i<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1128"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(i<sp/>&lt;<sp/>size)<sp/></highlight></codeline>
<codeline lineno="1129"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is_small<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>thiscoord<sp/>=<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*)(luip)<sp/>+<sp/>i<sp/>*<sp/>3;</highlight></codeline>
<codeline lineno="1132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(smallidx<sp/>&lt;<sp/>maxidx<sp/>&amp;&amp;<sp/>i<sp/>&gt;=<sp/>1<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>abs(thiscoord[0]<sp/>-<sp/>prevcoord[0])<sp/>&lt;<sp/>larger<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>abs(thiscoord[1]<sp/>-<sp/>prevcoord[1])<sp/>&lt;<sp/>larger<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>abs(thiscoord[2]<sp/>-<sp/>prevcoord[2])<sp/>&lt;<sp/>larger)<sp/>{</highlight></codeline>
<codeline lineno="1136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is_smaller<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight></codeline>
<codeline lineno="1138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(smallidx<sp/>&gt;<sp/>minidx)<sp/></highlight></codeline>
<codeline lineno="1139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is_smaller<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="1141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is_smaller<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>+<sp/>1<sp/>&lt;<sp/>size)<sp/></highlight></codeline>
<codeline lineno="1147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(abs(thiscoord[0]<sp/>-<sp/>thiscoord[3])<sp/>&lt;<sp/>smallnum<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>abs(thiscoord[1]<sp/>-<sp/>thiscoord[4])<sp/>&lt;<sp/>smallnum<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>abs(thiscoord[2]<sp/>-<sp/>thiscoord[5])<sp/>&lt;<sp/>smallnum)<sp/></highlight></codeline>
<codeline lineno="1151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>interchange<sp/>first<sp/>with<sp/>second<sp/>atom<sp/>for<sp/>better</highlight></codeline>
<codeline lineno="1153"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>compression<sp/>of<sp/>water<sp/>molecules</highlight></codeline>
<codeline lineno="1154"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp<sp/>=<sp/>thiscoord[0];<sp/>thiscoord[0]<sp/>=<sp/>thiscoord[3];</highlight></codeline>
<codeline lineno="1156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>thiscoord[3]<sp/>=<sp/>tmp;</highlight></codeline>
<codeline lineno="1157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp<sp/>=<sp/>thiscoord[1];<sp/>thiscoord[1]<sp/>=<sp/>thiscoord[4];</highlight></codeline>
<codeline lineno="1158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>thiscoord[4]<sp/>=<sp/>tmp;</highlight></codeline>
<codeline lineno="1159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp<sp/>=<sp/>thiscoord[2];<sp/>thiscoord[2]<sp/>=<sp/>thiscoord[5];</highlight></codeline>
<codeline lineno="1160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>thiscoord[5]<sp/>=<sp/>tmp;</highlight></codeline>
<codeline lineno="1161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is_small<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight></codeline>
<codeline lineno="1163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmpcoord[0]<sp/>=<sp/>thiscoord[0]<sp/>-<sp/>minint[0];</highlight></codeline>
<codeline lineno="1165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmpcoord[1]<sp/>=<sp/>thiscoord[1]<sp/>-<sp/>minint[1];</highlight></codeline>
<codeline lineno="1166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmpcoord[2]<sp/>=<sp/>thiscoord[2]<sp/>-<sp/>minint[2];</highlight></codeline>
<codeline lineno="1167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bitsize<sp/>==<sp/>0)<sp/></highlight></codeline>
<codeline lineno="1168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>encodebits(buf2,<sp/>bitsizeint[0],<sp/>tmpcoord[0]);</highlight></codeline>
<codeline lineno="1170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>encodebits(buf2,<sp/>bitsizeint[1],<sp/>tmpcoord[1]);</highlight></codeline>
<codeline lineno="1171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>encodebits(buf2,<sp/>bitsizeint[2],<sp/>tmpcoord[2]);</highlight></codeline>
<codeline lineno="1172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight></codeline>
<codeline lineno="1173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>encodeints(buf2,<sp/>3,<sp/>bitsize,<sp/>sizeint,<sp/>tmpcoord);</highlight></codeline>
<codeline lineno="1176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prevcoord[0]<sp/>=<sp/>thiscoord[0];</highlight></codeline>
<codeline lineno="1178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prevcoord[1]<sp/>=<sp/>thiscoord[1];</highlight></codeline>
<codeline lineno="1179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prevcoord[2]<sp/>=<sp/>thiscoord[2];</highlight></codeline>
<codeline lineno="1180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>thiscoord<sp/>=<sp/>thiscoord<sp/>+<sp/>3;</highlight></codeline>
<codeline lineno="1181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i++;</highlight></codeline>
<codeline lineno="1182"><highlight class="normal"></highlight></codeline>
<codeline lineno="1183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>run<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(is_small<sp/>==<sp/>0<sp/>&amp;&amp;<sp/>is_smaller<sp/>==<sp/>-1)</highlight></codeline>
<codeline lineno="1185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is_smaller<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(is_small<sp/>&amp;&amp;<sp/>run<sp/>&lt;<sp/>8*3)</highlight></codeline>
<codeline lineno="1187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmpsum=0;</highlight></codeline>
<codeline lineno="1189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(j=0;j&lt;3;j++)<sp/></highlight></codeline>
<codeline lineno="1190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp=thiscoord[j]<sp/>-<sp/>prevcoord[j];</highlight></codeline>
<codeline lineno="1192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmpsum+=tmp*tmp;</highlight></codeline>
<codeline lineno="1193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(is_smaller<sp/>==<sp/>-1<sp/>&amp;&amp;<sp/>tmpsum<sp/>&gt;=<sp/>smaller<sp/>*<sp/>smaller)</highlight></codeline>
<codeline lineno="1195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is_smaller<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmpcoord[run++]<sp/>=<sp/>thiscoord[0]<sp/>-<sp/>prevcoord[0]<sp/>+<sp/>smallnum;</highlight></codeline>
<codeline lineno="1200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmpcoord[run++]<sp/>=<sp/>thiscoord[1]<sp/>-<sp/>prevcoord[1]<sp/>+<sp/>smallnum;</highlight></codeline>
<codeline lineno="1201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmpcoord[run++]<sp/>=<sp/>thiscoord[2]<sp/>-<sp/>prevcoord[2]<sp/>+<sp/>smallnum;</highlight></codeline>
<codeline lineno="1202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prevcoord[0]<sp/>=<sp/>thiscoord[0];</highlight></codeline>
<codeline lineno="1204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prevcoord[1]<sp/>=<sp/>thiscoord[1];</highlight></codeline>
<codeline lineno="1205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prevcoord[2]<sp/>=<sp/>thiscoord[2];</highlight></codeline>
<codeline lineno="1206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i++;</highlight></codeline>
<codeline lineno="1208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>thiscoord<sp/>=<sp/>thiscoord<sp/>+<sp/>3;</highlight></codeline>
<codeline lineno="1209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is_small<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>&lt;<sp/>size<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>abs(thiscoord[0]<sp/>-<sp/>prevcoord[0])<sp/>&lt;<sp/>smallnum<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>abs(thiscoord[1]<sp/>-<sp/>prevcoord[1])<sp/>&lt;<sp/>smallnum<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>abs(thiscoord[2]<sp/>-<sp/>prevcoord[2])<sp/>&lt;<sp/>smallnum)</highlight></codeline>
<codeline lineno="1214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is_small<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(run<sp/>!=<sp/>prevrun<sp/>||<sp/>is_smaller<sp/>!=<sp/>0)<sp/></highlight></codeline>
<codeline lineno="1219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prevrun<sp/>=<sp/>run;</highlight></codeline>
<codeline lineno="1221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>encodebits(buf2,<sp/>1,<sp/>1);<sp/></highlight><highlight class="comment">/*<sp/>flag<sp/>the<sp/>change<sp/>in<sp/>run-length<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>encodebits(buf2,<sp/>5,<sp/>run+is_smaller+1);</highlight></codeline>
<codeline lineno="1223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight></codeline>
<codeline lineno="1224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="1225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>encodebits(buf2,<sp/>1,<sp/>0);<sp/></highlight><highlight class="comment">/*<sp/>flag<sp/>the<sp/>fact<sp/>that<sp/>runlength<sp/>did<sp/>not<sp/>change<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(k=0;<sp/>k<sp/>&lt;<sp/>run;<sp/>k+=3)<sp/></highlight></codeline>
<codeline lineno="1229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>encodeints(buf2,<sp/>3,<sp/>smallidx,<sp/>sizesmall,<sp/>&amp;tmpcoord[k]);<sp/></highlight></codeline>
<codeline lineno="1231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(is_smaller<sp/>!=<sp/>0)<sp/></highlight></codeline>
<codeline lineno="1233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>smallidx<sp/>+=<sp/>is_smaller;</highlight></codeline>
<codeline lineno="1235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(is_smaller<sp/>&lt;<sp/>0)<sp/></highlight></codeline>
<codeline lineno="1236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>smallnum<sp/>=<sp/>smaller;</highlight></codeline>
<codeline lineno="1238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>smaller<sp/>=<sp/>magicints[smallidx-1]<sp/>/<sp/>2;</highlight></codeline>
<codeline lineno="1239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight></codeline>
<codeline lineno="1240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="1241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>smaller<sp/>=<sp/>smallnum;</highlight></codeline>
<codeline lineno="1243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>smallnum<sp/>=<sp/>magicints[smallidx]<sp/>/<sp/>2;</highlight></codeline>
<codeline lineno="1244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sizesmall[0]<sp/>=<sp/>sizesmall[1]<sp/>=<sp/>sizesmall[2]<sp/>=<sp/>magicints[smallidx];</highlight></codeline>
<codeline lineno="1246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1247"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1248"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(buf2[1]<sp/>!=<sp/>0)<sp/>buf2[0]++;</highlight></codeline>
<codeline lineno="1249"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="xdrfile_8h_1aebeea86c177fe409a3b737f93674137f" kindref="member">xdrfile_write_int</ref>(buf2,1,xfp);<sp/></highlight><highlight class="comment">/*<sp/>buf2[0]<sp/>holds<sp/>the<sp/>length<sp/>in<sp/>bytes<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1250"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp=<ref refid="xdrfile_8h_1ae10b1d0378958230f49849f3ab7c2797" kindref="member">xdrfile_write_opaque</ref>((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)&amp;(buf2[3]),(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)buf2[0],xfp);</highlight></codeline>
<codeline lineno="1251"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(tmp==(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)buf2[0])</highlight></codeline>
<codeline lineno="1252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>size;</highlight></codeline>
<codeline lineno="1253"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="1255"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1256"><highlight class="normal"></highlight></codeline>
<codeline lineno="1257"><highlight class="normal"></highlight></codeline>
<codeline lineno="1258"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1259"><highlight class="normal"><ref refid="xdrfile_8h_1a2d03c376e92eecf3b81a354122be17fe" kindref="member">xdrfile_decompress_coord_double</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*ptr,<sp/></highlight></codeline>
<codeline lineno="1260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*size,</highlight></codeline>
<codeline lineno="1261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*precision,</highlight></codeline>
<codeline lineno="1262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structXDRFILE" kindref="compound">XDRFILE</ref>*<sp/><sp/><sp/>xfp)</highlight></codeline>
<codeline lineno="1263"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1264"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>minint[3],<sp/>maxint[3],<sp/>*lip;</highlight></codeline>
<codeline lineno="1265"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>smallidx,<sp/>minidx,<sp/>maxidx;</highlight></codeline>
<codeline lineno="1266"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>sizeint[3],<sp/>sizesmall[3],<sp/>bitsizeint[3],<sp/>size3;</highlight></codeline>
<codeline lineno="1267"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k,<sp/>*buf1,<sp/>*buf2,<sp/>lsize,<sp/>flag;</highlight></codeline>
<codeline lineno="1268"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>smallnum,<sp/>smaller,<sp/>larger,<sp/>i,<sp/>is_smaller,<sp/>run;</highlight></codeline>
<codeline lineno="1269"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*lfp,<sp/>inv_precision;</highlight></codeline>
<codeline lineno="1270"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>float_prec,<sp/>tmpdata[30];</highlight></codeline>
<codeline lineno="1271"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>tmp,<sp/>*thiscoord,<sp/><sp/>prevcoord[3];</highlight></codeline>
<codeline lineno="1272"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bitsize;</highlight></codeline>
<codeline lineno="1273"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="1274"><highlight class="normal"><sp/><sp/><sp/><sp/>bitsizeint[0]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1275"><highlight class="normal"><sp/><sp/><sp/><sp/>bitsizeint[1]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1276"><highlight class="normal"><sp/><sp/><sp/><sp/>bitsizeint[2]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1277"><highlight class="normal"></highlight></codeline>
<codeline lineno="1278"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(xfp==NULL<sp/>||<sp/>ptr==NULL)</highlight></codeline>
<codeline lineno="1279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="1280"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp=<ref refid="xdrfile_8h_1afd6ea22cd248c0e56c7ba38de3ea29cb" kindref="member">xdrfile_read_int</ref>(&amp;lsize,1,xfp);</highlight></codeline>
<codeline lineno="1281"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(tmp==0)</highlight></codeline>
<codeline lineno="1282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;<sp/></highlight><highlight class="comment">/*<sp/>return<sp/>if<sp/>we<sp/>could<sp/>not<sp/>read<sp/>size<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1283"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*size<sp/>&lt;<sp/>lsize)<sp/></highlight></codeline>
<codeline lineno="1284"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;Requested<sp/>to<sp/>decompress<sp/>%d<sp/>coords,<sp/>file<sp/>contains<sp/>%d\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*size,<sp/>lsize);</highlight></codeline>
<codeline lineno="1287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="1288"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1289"><highlight class="normal"><sp/><sp/><sp/><sp/>*size<sp/>=<sp/>lsize;</highlight></codeline>
<codeline lineno="1290"><highlight class="normal"><sp/><sp/><sp/><sp/>size3<sp/>=<sp/>*size<sp/>*<sp/>3;</highlight></codeline>
<codeline lineno="1291"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(size3&gt;xfp-&gt;<ref refid="structXDRFILE_1a9012ee5348a016a94c5ca634def2c1e4" kindref="member">buf1size</ref>)<sp/></highlight></codeline>
<codeline lineno="1292"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((xfp-&gt;<ref refid="structXDRFILE_1a7274b510f55945af86ae20a6da81d429" kindref="member">buf1</ref>=(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*)malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)*size3))==NULL)<sp/></highlight></codeline>
<codeline lineno="1294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,</highlight><highlight class="stringliteral">&quot;Cannot<sp/>allocate<sp/>memory<sp/>for<sp/>decompression<sp/>coordinates.\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;<sp/></highlight></codeline>
<codeline lineno="1297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xfp-&gt;<ref refid="structXDRFILE_1a9012ee5348a016a94c5ca634def2c1e4" kindref="member">buf1size</ref>=size3;</highlight></codeline>
<codeline lineno="1299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xfp-&gt;<ref refid="structXDRFILE_1a71cedf31f2b15a635fa4fe20094a3133" kindref="member">buf2size</ref>=size3*1.2;</highlight></codeline>
<codeline lineno="1300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((xfp-&gt;<ref refid="structXDRFILE_1a6e8d580fdf18234acfda1f382d89a2d8" kindref="member">buf2</ref>=(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*)malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)*xfp-&gt;<ref refid="structXDRFILE_1a71cedf31f2b15a635fa4fe20094a3133" kindref="member">buf2size</ref>))==NULL)</highlight></codeline>
<codeline lineno="1301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,</highlight><highlight class="stringliteral">&quot;Cannot<sp/>allocate<sp/>memory<sp/>for<sp/>decompressing<sp/>coordinates.\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="1304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1305"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1306"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Dont<sp/>bother<sp/>with<sp/>compression<sp/>for<sp/>three<sp/>atoms<sp/>or<sp/>less<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1307"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(*size&lt;=9)</highlight></codeline>
<codeline lineno="1308"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp=<ref refid="xdrfile_8h_1a0284c6956e48e298820448fc86640e76" kindref="member">xdrfile_read_float</ref>(tmpdata,size3,xfp);</highlight></codeline>
<codeline lineno="1310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i=0;i&lt;9*3;i++)</highlight></codeline>
<codeline lineno="1311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ptr[i]=tmpdata[i];</highlight></codeline>
<codeline lineno="1312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tmp/3;</highlight></codeline>
<codeline lineno="1313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>return<sp/>number<sp/>of<sp/>coords,<sp/>not<sp/>floats<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1314"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1315"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Compression-time<sp/>if<sp/>we<sp/>got<sp/>here.<sp/>Read<sp/>precision<sp/>first<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1316"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="xdrfile_8h_1a0284c6956e48e298820448fc86640e76" kindref="member">xdrfile_read_float</ref>(&amp;float_prec,1,xfp);</highlight></codeline>
<codeline lineno="1317"><highlight class="normal"><sp/><sp/><sp/><sp/>*precision=float_prec;</highlight></codeline>
<codeline lineno="1318"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>avoid<sp/>repeated<sp/>pointer<sp/>dereferencing.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1319"><highlight class="normal"><sp/><sp/><sp/><sp/>buf1=xfp-&gt;<ref refid="structXDRFILE_1a7274b510f55945af86ae20a6da81d429" kindref="member">buf1</ref>;<sp/></highlight></codeline>
<codeline lineno="1320"><highlight class="normal"><sp/><sp/><sp/><sp/>buf2=xfp-&gt;<ref refid="structXDRFILE_1a6e8d580fdf18234acfda1f382d89a2d8" kindref="member">buf2</ref>;</highlight></codeline>
<codeline lineno="1321"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>buf2[0-2]<sp/>are<sp/>special<sp/>and<sp/>do<sp/>not<sp/>contain<sp/>actual<sp/>data<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1322"><highlight class="normal"><sp/><sp/><sp/><sp/>buf2[0]<sp/>=<sp/>buf2[1]<sp/>=<sp/>buf2[2]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1323"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="xdrfile_8h_1afd6ea22cd248c0e56c7ba38de3ea29cb" kindref="member">xdrfile_read_int</ref>(minint,3,xfp);</highlight></codeline>
<codeline lineno="1324"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="xdrfile_8h_1afd6ea22cd248c0e56c7ba38de3ea29cb" kindref="member">xdrfile_read_int</ref>(maxint,3,xfp);</highlight></codeline>
<codeline lineno="1325"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="1326"><highlight class="normal"><sp/><sp/><sp/><sp/>sizeint[0]<sp/>=<sp/>maxint[0]<sp/>-<sp/>minint[0]+1;</highlight></codeline>
<codeline lineno="1327"><highlight class="normal"><sp/><sp/><sp/><sp/>sizeint[1]<sp/>=<sp/>maxint[1]<sp/>-<sp/>minint[1]+1;</highlight></codeline>
<codeline lineno="1328"><highlight class="normal"><sp/><sp/><sp/><sp/>sizeint[2]<sp/>=<sp/>maxint[2]<sp/>-<sp/>minint[2]+1;</highlight></codeline>
<codeline lineno="1329"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1330"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>check<sp/>if<sp/>one<sp/>of<sp/>the<sp/>sizes<sp/>is<sp/>to<sp/>big<sp/>to<sp/>be<sp/>multiplied<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1331"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((sizeint[0]<sp/>|<sp/>sizeint[1]<sp/>|<sp/>sizeint[2]<sp/>)<sp/>&gt;<sp/>0xffffff)</highlight></codeline>
<codeline lineno="1332"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bitsizeint[0]<sp/>=<sp/>sizeofint(sizeint[0]);</highlight></codeline>
<codeline lineno="1334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bitsizeint[1]<sp/>=<sp/>sizeofint(sizeint[1]);</highlight></codeline>
<codeline lineno="1335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bitsizeint[2]<sp/>=<sp/>sizeofint(sizeint[2]);</highlight></codeline>
<codeline lineno="1336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bitsize<sp/>=<sp/>0;<sp/></highlight><highlight class="comment">/*<sp/>flag<sp/>the<sp/>use<sp/>of<sp/>large<sp/>sizes<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1337"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1338"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="1339"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bitsize<sp/>=<sp/>sizeofints(3,<sp/>sizeint);</highlight></codeline>
<codeline lineno="1341"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1342"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1343"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="xdrfile_8h_1afd6ea22cd248c0e56c7ba38de3ea29cb" kindref="member">xdrfile_read_int</ref>(&amp;smallidx,1,xfp)<sp/>==<sp/>0)<sp/></highlight></codeline>
<codeline lineno="1344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="1345"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp=smallidx+8;</highlight></codeline>
<codeline lineno="1346"><highlight class="normal"><sp/><sp/><sp/><sp/>maxidx<sp/>=<sp/>(LASTIDX&lt;tmp)<sp/>?<sp/>LASTIDX<sp/>:<sp/>tmp;</highlight></codeline>
<codeline lineno="1347"><highlight class="normal"><sp/><sp/><sp/><sp/>minidx<sp/>=<sp/>maxidx<sp/>-<sp/>8;<sp/></highlight><highlight class="comment">/*<sp/>often<sp/>this<sp/>equal<sp/>smallidx<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1348"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp<sp/>=<sp/>smallidx-1;</highlight></codeline>
<codeline lineno="1349"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp<sp/>=<sp/>(FIRSTIDX&gt;tmp)<sp/>?<sp/>FIRSTIDX<sp/>:<sp/>tmp;</highlight></codeline>
<codeline lineno="1350"><highlight class="normal"><sp/><sp/><sp/><sp/>smaller<sp/>=<sp/>magicints[tmp]<sp/>/<sp/>2;</highlight></codeline>
<codeline lineno="1351"><highlight class="normal"><sp/><sp/><sp/><sp/>smallnum<sp/>=<sp/>magicints[smallidx]<sp/>/<sp/>2;</highlight></codeline>
<codeline lineno="1352"><highlight class="normal"><sp/><sp/><sp/><sp/>sizesmall[0]<sp/>=<sp/>sizesmall[1]<sp/>=<sp/>sizesmall[2]<sp/>=<sp/>magicints[smallidx]<sp/>;</highlight></codeline>
<codeline lineno="1353"><highlight class="normal"><sp/><sp/><sp/><sp/>larger<sp/>=<sp/>magicints[maxidx];</highlight></codeline>
<codeline lineno="1354"><highlight class="normal"></highlight></codeline>
<codeline lineno="1355"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>buf2[0]<sp/>holds<sp/>the<sp/>length<sp/>in<sp/>bytes<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1356"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="1357"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="xdrfile_8h_1afd6ea22cd248c0e56c7ba38de3ea29cb" kindref="member">xdrfile_read_int</ref>(buf2,1,xfp)<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="1358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="1359"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="xdrfile_8h_1a608b6dfc7dd697062a91f784d7e31e4e" kindref="member">xdrfile_read_opaque</ref>((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)&amp;(buf2[3]),(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)buf2[0],xfp)<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="1360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="1361"><highlight class="normal"><sp/><sp/><sp/><sp/>buf2[0]<sp/>=<sp/>buf2[1]<sp/>=<sp/>buf2[2]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1362"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="1363"><highlight class="normal"><sp/><sp/><sp/><sp/>lfp<sp/>=<sp/>ptr;</highlight></codeline>
<codeline lineno="1364"><highlight class="normal"><sp/><sp/><sp/><sp/>inv_precision<sp/>=<sp/>1.0<sp/>/<sp/>*<sp/>precision;</highlight></codeline>
<codeline lineno="1365"><highlight class="normal"><sp/><sp/><sp/><sp/>run<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1366"><highlight class="normal"><sp/><sp/><sp/><sp/>i<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1367"><highlight class="normal"><sp/><sp/><sp/><sp/>lip<sp/>=<sp/>buf1;</highlight></codeline>
<codeline lineno="1368"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>&lt;<sp/>lsize<sp/>)<sp/></highlight></codeline>
<codeline lineno="1369"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>thiscoord<sp/>=<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*)(lip)<sp/>+<sp/>i<sp/>*<sp/>3;</highlight></codeline>
<codeline lineno="1371"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bitsize<sp/>==<sp/>0)<sp/></highlight></codeline>
<codeline lineno="1373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>thiscoord[0]<sp/>=<sp/>decodebits(buf2,<sp/>bitsizeint[0]);</highlight></codeline>
<codeline lineno="1375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>thiscoord[1]<sp/>=<sp/>decodebits(buf2,<sp/>bitsizeint[1]);</highlight></codeline>
<codeline lineno="1376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>thiscoord[2]<sp/>=<sp/>decodebits(buf2,<sp/>bitsizeint[2]);</highlight></codeline>
<codeline lineno="1377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>decodeints(buf2,<sp/>3,<sp/>bitsize,<sp/>sizeint,<sp/>thiscoord);</highlight></codeline>
<codeline lineno="1379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1380"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i++;</highlight></codeline>
<codeline lineno="1382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>thiscoord[0]<sp/>+=<sp/>minint[0];</highlight></codeline>
<codeline lineno="1383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>thiscoord[1]<sp/>+=<sp/>minint[1];</highlight></codeline>
<codeline lineno="1384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>thiscoord[2]<sp/>+=<sp/>minint[2];</highlight></codeline>
<codeline lineno="1385"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prevcoord[0]<sp/>=<sp/>thiscoord[0];</highlight></codeline>
<codeline lineno="1387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prevcoord[1]<sp/>=<sp/>thiscoord[1];</highlight></codeline>
<codeline lineno="1388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prevcoord[2]<sp/>=<sp/>thiscoord[2];</highlight></codeline>
<codeline lineno="1389"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>flag<sp/>=<sp/>decodebits(buf2,<sp/>1);</highlight></codeline>
<codeline lineno="1391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is_smaller<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(flag<sp/>==<sp/>1)<sp/></highlight></codeline>
<codeline lineno="1393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>run<sp/>=<sp/>decodebits(buf2,<sp/>5);</highlight></codeline>
<codeline lineno="1395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is_smaller<sp/>=<sp/>run<sp/>%<sp/>3;</highlight></codeline>
<codeline lineno="1396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>run<sp/>-=<sp/>is_smaller;</highlight></codeline>
<codeline lineno="1397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is_smaller--;</highlight></codeline>
<codeline lineno="1398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(run<sp/>&gt;<sp/>0)<sp/></highlight></codeline>
<codeline lineno="1400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>thiscoord<sp/>+=<sp/>3;</highlight></codeline>
<codeline lineno="1402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(k<sp/>=<sp/>0;<sp/>k<sp/>&lt;<sp/>run;<sp/>k+=3)<sp/></highlight></codeline>
<codeline lineno="1403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>decodeints(buf2,<sp/>3,<sp/>smallidx,<sp/>sizesmall,<sp/>thiscoord);</highlight></codeline>
<codeline lineno="1405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i++;</highlight></codeline>
<codeline lineno="1406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>thiscoord[0]<sp/>+=<sp/>prevcoord[0]<sp/>-<sp/>smallnum;</highlight></codeline>
<codeline lineno="1407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>thiscoord[1]<sp/>+=<sp/>prevcoord[1]<sp/>-<sp/>smallnum;</highlight></codeline>
<codeline lineno="1408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>thiscoord[2]<sp/>+=<sp/>prevcoord[2]<sp/>-<sp/>smallnum;</highlight></codeline>
<codeline lineno="1409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(k<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="1410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>interchange<sp/>first<sp/>with<sp/>second<sp/>atom<sp/>for<sp/>better</highlight></codeline>
<codeline lineno="1412"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>compression<sp/>of<sp/>water<sp/>molecules</highlight></codeline>
<codeline lineno="1413"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp<sp/>=<sp/>thiscoord[0];<sp/>thiscoord[0]<sp/>=<sp/>prevcoord[0];</highlight></codeline>
<codeline lineno="1415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prevcoord[0]<sp/>=<sp/>tmp;</highlight></codeline>
<codeline lineno="1416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp<sp/>=<sp/>thiscoord[1];<sp/>thiscoord[1]<sp/>=<sp/>prevcoord[1];</highlight></codeline>
<codeline lineno="1417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prevcoord[1]<sp/>=<sp/>tmp;</highlight></codeline>
<codeline lineno="1418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp<sp/>=<sp/>thiscoord[2];<sp/>thiscoord[2]<sp/>=<sp/>prevcoord[2];</highlight></codeline>
<codeline lineno="1419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prevcoord[2]<sp/>=<sp/>tmp;</highlight></codeline>
<codeline lineno="1420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*lfp++<sp/>=<sp/>prevcoord[0]<sp/>*<sp/>inv_precision;</highlight></codeline>
<codeline lineno="1421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*lfp++<sp/>=<sp/>prevcoord[1]<sp/>*<sp/>inv_precision;</highlight></codeline>
<codeline lineno="1422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*lfp++<sp/>=<sp/>prevcoord[2]<sp/>*<sp/>inv_precision;</highlight></codeline>
<codeline lineno="1423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="1425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prevcoord[0]<sp/>=<sp/>thiscoord[0];</highlight></codeline>
<codeline lineno="1427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prevcoord[1]<sp/>=<sp/>thiscoord[1];</highlight></codeline>
<codeline lineno="1428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prevcoord[2]<sp/>=<sp/>thiscoord[2];</highlight></codeline>
<codeline lineno="1429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*lfp++<sp/>=<sp/>thiscoord[0]<sp/>*<sp/>inv_precision;</highlight></codeline>
<codeline lineno="1431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*lfp++<sp/>=<sp/>thiscoord[1]<sp/>*<sp/>inv_precision;</highlight></codeline>
<codeline lineno="1432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*lfp++<sp/>=<sp/>thiscoord[2]<sp/>*<sp/>inv_precision;</highlight></codeline>
<codeline lineno="1433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*lfp++<sp/>=<sp/>thiscoord[0]<sp/>*<sp/>inv_precision;</highlight></codeline>
<codeline lineno="1436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*lfp++<sp/>=<sp/>thiscoord[1]<sp/>*<sp/>inv_precision;</highlight></codeline>
<codeline lineno="1437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*lfp++<sp/>=<sp/>thiscoord[2]<sp/>*<sp/>inv_precision;<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>smallidx<sp/>+=<sp/>is_smaller;</highlight></codeline>
<codeline lineno="1440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(is_smaller<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>smallnum<sp/>=<sp/>smaller;</highlight></codeline>
<codeline lineno="1442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(smallidx<sp/>&gt;<sp/>FIRSTIDX)<sp/>{</highlight></codeline>
<codeline lineno="1443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>smaller<sp/>=<sp/>magicints[smallidx<sp/>-<sp/>1]<sp/>/2;</highlight></codeline>
<codeline lineno="1444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>smaller<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(is_smaller<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>smaller<sp/>=<sp/>smallnum;</highlight></codeline>
<codeline lineno="1449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>smallnum<sp/>=<sp/>magicints[smallidx]<sp/>/<sp/>2;</highlight></codeline>
<codeline lineno="1450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sizesmall[0]<sp/>=<sp/>sizesmall[1]<sp/>=<sp/>sizesmall[2]<sp/>=<sp/>magicints[smallidx]<sp/>;</highlight></codeline>
<codeline lineno="1452"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1453"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*size;</highlight></codeline>
<codeline lineno="1454"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1455"><highlight class="normal"></highlight></codeline>
<codeline lineno="1456"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1457"><highlight class="normal"><ref refid="xdrfile_8h_1ac07f980b8065b642d919296126c44ebc" kindref="member">xdrfile_compress_coord_double</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><sp/><sp/>*ptr,</highlight></codeline>
<codeline lineno="1458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>size,</highlight></codeline>
<codeline lineno="1459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>precision,</highlight></codeline>
<codeline lineno="1460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structXDRFILE" kindref="compound">XDRFILE</ref>*<sp/>xfp)</highlight></codeline>
<codeline lineno="1461"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1462"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>minint[3],<sp/>maxint[3],<sp/>mindiff,<sp/>*lip,<sp/>diff;</highlight></codeline>
<codeline lineno="1463"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lint1,<sp/>lint2,<sp/>lint3,<sp/>oldlint1,<sp/>oldlint2,<sp/>oldlint3,<sp/>smallidx;</highlight></codeline>
<codeline lineno="1464"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>minidx,<sp/>maxidx;</highlight></codeline>
<codeline lineno="1465"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>sizeint[3],<sp/>sizesmall[3],<sp/>bitsizeint[3],<sp/>size3,<sp/>*luip;</highlight></codeline>
<codeline lineno="1466"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k,<sp/>*buf1,<sp/>*buf2;</highlight></codeline>
<codeline lineno="1467"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>smallnum,<sp/>smaller,<sp/>larger,<sp/>i,<sp/>j,<sp/>is_small,<sp/>is_smaller,<sp/>run,<sp/>prevrun;</highlight></codeline>
<codeline lineno="1468"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*lfp;</highlight></codeline>
<codeline lineno="1469"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>float_prec,<sp/>lf,tmpdata[30];</highlight></codeline>
<codeline lineno="1470"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>tmp,<sp/>tmpsum,<sp/>*thiscoord,<sp/><sp/>prevcoord[3];</highlight></codeline>
<codeline lineno="1471"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>tmpcoord[30];</highlight></codeline>
<codeline lineno="1472"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>errval=1;</highlight></codeline>
<codeline lineno="1473"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bitsize;</highlight></codeline>
<codeline lineno="1474"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="1475"><highlight class="normal"><sp/><sp/><sp/><sp/>bitsizeint[0]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1476"><highlight class="normal"><sp/><sp/><sp/><sp/>bitsizeint[1]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1477"><highlight class="normal"><sp/><sp/><sp/><sp/>bitsizeint[2]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1478"><highlight class="normal"></highlight></codeline>
<codeline lineno="1479"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(xfp==NULL)</highlight></codeline>
<codeline lineno="1480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="1481"><highlight class="normal"><sp/><sp/><sp/><sp/>size3=3*size;</highlight></codeline>
<codeline lineno="1482"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(size3&gt;xfp-&gt;<ref refid="structXDRFILE_1a9012ee5348a016a94c5ca634def2c1e4" kindref="member">buf1size</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((xfp-&gt;<ref refid="structXDRFILE_1a7274b510f55945af86ae20a6da81d429" kindref="member">buf1</ref>=(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*)malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)*size3))==NULL)<sp/>{</highlight></codeline>
<codeline lineno="1484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,</highlight><highlight class="stringliteral">&quot;Cannot<sp/>allocate<sp/>memory<sp/>for<sp/>compressing<sp/>coordinates.\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="1486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xfp-&gt;<ref refid="structXDRFILE_1a9012ee5348a016a94c5ca634def2c1e4" kindref="member">buf1size</ref>=size3;</highlight></codeline>
<codeline lineno="1488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xfp-&gt;<ref refid="structXDRFILE_1a71cedf31f2b15a635fa4fe20094a3133" kindref="member">buf2size</ref>=size3*1.2;</highlight></codeline>
<codeline lineno="1489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((xfp-&gt;<ref refid="structXDRFILE_1a6e8d580fdf18234acfda1f382d89a2d8" kindref="member">buf2</ref>=(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*)malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)*xfp-&gt;<ref refid="structXDRFILE_1a71cedf31f2b15a635fa4fe20094a3133" kindref="member">buf2size</ref>))==NULL)<sp/>{</highlight></codeline>
<codeline lineno="1490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,</highlight><highlight class="stringliteral">&quot;Cannot<sp/>allocate<sp/>memory<sp/>for<sp/>compressing<sp/>coordinates.\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="1492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1493"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1494"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="xdrfile_8h_1aebeea86c177fe409a3b737f93674137f" kindref="member">xdrfile_write_int</ref>(&amp;size,1,xfp)==0)</highlight></codeline>
<codeline lineno="1495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;<sp/></highlight><highlight class="comment">/*<sp/>return<sp/>if<sp/>we<sp/>could<sp/>not<sp/>write<sp/>size<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1496"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Dont<sp/>bother<sp/>with<sp/>compression<sp/>for<sp/>three<sp/>atoms<sp/>or<sp/>less<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1497"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(size&lt;=9)<sp/>{</highlight></codeline>
<codeline lineno="1498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i=0;i&lt;9*3;i++)</highlight></codeline>
<codeline lineno="1499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmpdata[i]=ptr[i];</highlight></codeline>
<codeline lineno="1500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="xdrfile_8h_1a07b2f0fbacf3d25f6d6601e6c4285cdf" kindref="member">xdrfile_write_float</ref>(tmpdata,size3,xfp)/3;</highlight></codeline>
<codeline lineno="1501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>return<sp/>number<sp/>of<sp/>coords,<sp/>not<sp/>floats<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1502"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1503"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Compression-time<sp/>if<sp/>we<sp/>got<sp/>here.<sp/>Write<sp/>precision<sp/>first<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1504"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(precision<sp/>&lt;=<sp/>0)</highlight></codeline>
<codeline lineno="1505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>precision<sp/>=<sp/>1000;</highlight></codeline>
<codeline lineno="1506"><highlight class="normal"><sp/><sp/><sp/><sp/>float_prec=precision;</highlight></codeline>
<codeline lineno="1507"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="xdrfile_8h_1a07b2f0fbacf3d25f6d6601e6c4285cdf" kindref="member">xdrfile_write_float</ref>(&amp;float_prec,1,xfp);</highlight></codeline>
<codeline lineno="1508"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>avoid<sp/>repeated<sp/>pointer<sp/>dereferencing.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1509"><highlight class="normal"><sp/><sp/><sp/><sp/>buf1=xfp-&gt;<ref refid="structXDRFILE_1a7274b510f55945af86ae20a6da81d429" kindref="member">buf1</ref>;<sp/></highlight></codeline>
<codeline lineno="1510"><highlight class="normal"><sp/><sp/><sp/><sp/>buf2=xfp-&gt;<ref refid="structXDRFILE_1a6e8d580fdf18234acfda1f382d89a2d8" kindref="member">buf2</ref>;</highlight></codeline>
<codeline lineno="1511"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>buf2[0-2]<sp/>are<sp/>special<sp/>and<sp/>do<sp/>not<sp/>contain<sp/>actual<sp/>data<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1512"><highlight class="normal"><sp/><sp/><sp/><sp/>buf2[0]<sp/>=<sp/>buf2[1]<sp/>=<sp/>buf2[2]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1513"><highlight class="normal"><sp/><sp/><sp/><sp/>minint[0]<sp/>=<sp/>minint[1]<sp/>=<sp/>minint[2]<sp/>=<sp/>INT_MAX;</highlight></codeline>
<codeline lineno="1514"><highlight class="normal"><sp/><sp/><sp/><sp/>maxint[0]<sp/>=<sp/>maxint[1]<sp/>=<sp/>maxint[2]<sp/>=<sp/>INT_MIN;</highlight></codeline>
<codeline lineno="1515"><highlight class="normal"><sp/><sp/><sp/><sp/>prevrun<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="1516"><highlight class="normal"><sp/><sp/><sp/><sp/>lfp<sp/>=<sp/>ptr;</highlight></codeline>
<codeline lineno="1517"><highlight class="normal"><sp/><sp/><sp/><sp/>lip<sp/>=<sp/>buf1;</highlight></codeline>
<codeline lineno="1518"><highlight class="normal"><sp/><sp/><sp/><sp/>mindiff<sp/>=<sp/>INT_MAX;</highlight></codeline>
<codeline lineno="1519"><highlight class="normal"><sp/><sp/><sp/><sp/>oldlint1<sp/>=<sp/>oldlint2<sp/>=<sp/>oldlint3<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1520"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(lfp<sp/>&lt;<sp/>ptr<sp/>+<sp/>size3<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>find<sp/>nearest<sp/>integer<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*lfp<sp/>&gt;=<sp/>0.0)</highlight></codeline>
<codeline lineno="1523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lf<sp/>=<sp/>(float)*lfp<sp/>*<sp/>float_prec<sp/>+<sp/>0.5;</highlight></codeline>
<codeline lineno="1524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lf<sp/>=<sp/>(float)*lfp<sp/>*<sp/>float_prec<sp/>-<sp/>0.5;</highlight></codeline>
<codeline lineno="1526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fabs(lf)<sp/>&gt;<sp/>INT_MAX-2)<sp/>{</highlight></codeline>
<codeline lineno="1527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>scaling<sp/>would<sp/>cause<sp/>overflow<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,</highlight><highlight class="stringliteral">&quot;Internal<sp/>overflow<sp/>compressing<sp/>coordinates.\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>errval=0;</highlight></codeline>
<codeline lineno="1530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lint1<sp/>=<sp/>lf;</highlight></codeline>
<codeline lineno="1532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lint1<sp/>&lt;<sp/>minint[0])<sp/>minint[0]<sp/>=<sp/>lint1;</highlight></codeline>
<codeline lineno="1533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lint1<sp/>&gt;<sp/>maxint[0])<sp/>maxint[0]<sp/>=<sp/>lint1;</highlight></codeline>
<codeline lineno="1534"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*lip++<sp/>=<sp/>lint1;</highlight></codeline>
<codeline lineno="1535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lfp++;</highlight></codeline>
<codeline lineno="1536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*lfp<sp/>&gt;=<sp/>0.0)</highlight></codeline>
<codeline lineno="1537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lf<sp/>=<sp/>(float)*lfp<sp/>*<sp/>float_prec<sp/>+<sp/>0.5;</highlight></codeline>
<codeline lineno="1538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lf<sp/>=<sp/>(float)*lfp<sp/>*<sp/>float_prec<sp/>-<sp/>0.5;</highlight></codeline>
<codeline lineno="1540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fabs(lf)<sp/>&gt;<sp/>INT_MAX-2)<sp/>{</highlight></codeline>
<codeline lineno="1541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>scaling<sp/>would<sp/>cause<sp/>overflow<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,</highlight><highlight class="stringliteral">&quot;Internal<sp/>overflow<sp/>compressing<sp/>coordinates.\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>errval=0;</highlight></codeline>
<codeline lineno="1544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lint2<sp/>=<sp/>lf;</highlight></codeline>
<codeline lineno="1546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lint2<sp/>&lt;<sp/>minint[1])<sp/>minint[1]<sp/>=<sp/>lint2;</highlight></codeline>
<codeline lineno="1547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lint2<sp/>&gt;<sp/>maxint[1])<sp/>maxint[1]<sp/>=<sp/>lint2;</highlight></codeline>
<codeline lineno="1548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*lip++<sp/>=<sp/>lint2;</highlight></codeline>
<codeline lineno="1549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lfp++;</highlight></codeline>
<codeline lineno="1550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*lfp<sp/>&gt;=<sp/>0.0)</highlight></codeline>
<codeline lineno="1551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lf<sp/>=<sp/>(float)*lfp<sp/>*<sp/>float_prec<sp/>+<sp/>0.5;</highlight></codeline>
<codeline lineno="1552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lf<sp/>=<sp/>(float)*lfp<sp/>*<sp/>float_prec<sp/>-<sp/>0.5;</highlight></codeline>
<codeline lineno="1554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fabs(lf)<sp/>&gt;<sp/>INT_MAX-2)<sp/>{</highlight></codeline>
<codeline lineno="1555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>errval=0;<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lint3<sp/>=<sp/>lf;</highlight></codeline>
<codeline lineno="1558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lint3<sp/>&lt;<sp/>minint[2])<sp/>minint[2]<sp/>=<sp/>lint3;</highlight></codeline>
<codeline lineno="1559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lint3<sp/>&gt;<sp/>maxint[2])<sp/>maxint[2]<sp/>=<sp/>lint3;</highlight></codeline>
<codeline lineno="1560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*lip++<sp/>=<sp/>lint3;</highlight></codeline>
<codeline lineno="1561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lfp++;</highlight></codeline>
<codeline lineno="1562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>diff<sp/>=<sp/>abs(oldlint1-lint1)+abs(oldlint2-lint2)+abs(oldlint3-lint3);</highlight></codeline>
<codeline lineno="1563"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(diff<sp/>&lt;<sp/>mindiff<sp/>&amp;&amp;<sp/>lfp<sp/>&gt;<sp/>ptr<sp/>+<sp/>3)</highlight></codeline>
<codeline lineno="1564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mindiff<sp/>=<sp/>diff;</highlight></codeline>
<codeline lineno="1565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>oldlint1<sp/>=<sp/>lint1;</highlight></codeline>
<codeline lineno="1566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>oldlint2<sp/>=<sp/>lint2;</highlight></codeline>
<codeline lineno="1567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>oldlint3<sp/>=<sp/>lint3;</highlight></codeline>
<codeline lineno="1568"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/><sp/></highlight></codeline>
<codeline lineno="1569"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="xdrfile_8h_1aebeea86c177fe409a3b737f93674137f" kindref="member">xdrfile_write_int</ref>(minint,3,xfp);</highlight></codeline>
<codeline lineno="1570"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="xdrfile_8h_1aebeea86c177fe409a3b737f93674137f" kindref="member">xdrfile_write_int</ref>(maxint,3,xfp);</highlight></codeline>
<codeline lineno="1571"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="1572"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)maxint[0]<sp/>-<sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)minint[0]<sp/>&gt;=<sp/>INT_MAX-2<sp/>||</highlight></codeline>
<codeline lineno="1573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)maxint[1]<sp/>-<sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)minint[1]<sp/>&gt;=<sp/>INT_MAX-2<sp/>||</highlight></codeline>
<codeline lineno="1574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)maxint[2]<sp/>-<sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)minint[2]<sp/>&gt;=<sp/>INT_MAX-2)<sp/>{</highlight></codeline>
<codeline lineno="1575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>turning<sp/>value<sp/>in<sp/>unsigned<sp/>by<sp/>subtracting<sp/>minint</highlight></codeline>
<codeline lineno="1576"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>would<sp/>cause<sp/>overflow</highlight></codeline>
<codeline lineno="1577"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,</highlight><highlight class="stringliteral">&quot;Internal<sp/>overflow<sp/>compressing<sp/>coordinates.\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>errval=0;</highlight></codeline>
<codeline lineno="1580"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1581"><highlight class="normal"><sp/><sp/><sp/><sp/>sizeint[0]<sp/>=<sp/>maxint[0]<sp/>-<sp/>minint[0]+1;</highlight></codeline>
<codeline lineno="1582"><highlight class="normal"><sp/><sp/><sp/><sp/>sizeint[1]<sp/>=<sp/>maxint[1]<sp/>-<sp/>minint[1]+1;</highlight></codeline>
<codeline lineno="1583"><highlight class="normal"><sp/><sp/><sp/><sp/>sizeint[2]<sp/>=<sp/>maxint[2]<sp/>-<sp/>minint[2]+1;</highlight></codeline>
<codeline lineno="1584"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="1585"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>check<sp/>if<sp/>one<sp/>of<sp/>the<sp/>sizes<sp/>is<sp/>to<sp/>big<sp/>to<sp/>be<sp/>multiplied<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1586"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((sizeint[0]<sp/>|<sp/>sizeint[1]<sp/>|<sp/>sizeint[2]<sp/>)<sp/>&gt;<sp/>0xffffff)<sp/>{</highlight></codeline>
<codeline lineno="1587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bitsizeint[0]<sp/>=<sp/>sizeofint(sizeint[0]);</highlight></codeline>
<codeline lineno="1588"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bitsizeint[1]<sp/>=<sp/>sizeofint(sizeint[1]);</highlight></codeline>
<codeline lineno="1589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bitsizeint[2]<sp/>=<sp/>sizeofint(sizeint[2]);</highlight></codeline>
<codeline lineno="1590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bitsize<sp/>=<sp/>0;<sp/></highlight><highlight class="comment">/*<sp/>flag<sp/>the<sp/>use<sp/>of<sp/>large<sp/>sizes<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1591"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bitsize<sp/>=<sp/>sizeofints(3,<sp/>sizeint);</highlight></codeline>
<codeline lineno="1593"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1594"><highlight class="normal"><sp/><sp/><sp/><sp/>lip<sp/>=<sp/>buf1;</highlight></codeline>
<codeline lineno="1595"><highlight class="normal"><sp/><sp/><sp/><sp/>luip<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*)<sp/>buf1;</highlight></codeline>
<codeline lineno="1596"><highlight class="normal"><sp/><sp/><sp/><sp/>smallidx<sp/>=<sp/>FIRSTIDX;</highlight></codeline>
<codeline lineno="1597"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(smallidx<sp/>&lt;<sp/>LASTIDX<sp/>&amp;&amp;<sp/>magicints[smallidx]<sp/>&lt;<sp/>mindiff)<sp/>{</highlight></codeline>
<codeline lineno="1598"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>smallidx++;</highlight></codeline>
<codeline lineno="1599"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1600"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="xdrfile_8h_1aebeea86c177fe409a3b737f93674137f" kindref="member">xdrfile_write_int</ref>(&amp;smallidx,1,xfp);</highlight></codeline>
<codeline lineno="1601"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp=smallidx+8;</highlight></codeline>
<codeline lineno="1602"><highlight class="normal"><sp/><sp/><sp/><sp/>maxidx<sp/>=<sp/>(LASTIDX&lt;tmp)<sp/>?<sp/>LASTIDX<sp/>:<sp/>tmp;</highlight></codeline>
<codeline lineno="1603"><highlight class="normal"><sp/><sp/><sp/><sp/>minidx<sp/>=<sp/>maxidx<sp/>-<sp/>8;<sp/></highlight><highlight class="comment">/*<sp/>often<sp/>this<sp/>equal<sp/>smallidx<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1604"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp=smallidx-1;</highlight></codeline>
<codeline lineno="1605"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp=<sp/>(FIRSTIDX&gt;tmp)<sp/>?<sp/>FIRSTIDX<sp/>:<sp/>tmp;</highlight></codeline>
<codeline lineno="1606"><highlight class="normal"><sp/><sp/><sp/><sp/>smaller<sp/>=<sp/>magicints[tmp]<sp/>/<sp/>2;</highlight></codeline>
<codeline lineno="1607"><highlight class="normal"><sp/><sp/><sp/><sp/>smallnum<sp/>=<sp/>magicints[smallidx]<sp/>/<sp/>2;</highlight></codeline>
<codeline lineno="1608"><highlight class="normal"><sp/><sp/><sp/><sp/>sizesmall[0]<sp/>=<sp/>sizesmall[1]<sp/>=<sp/>sizesmall[2]<sp/>=<sp/>magicints[smallidx];</highlight></codeline>
<codeline lineno="1609"><highlight class="normal"><sp/><sp/><sp/><sp/>larger<sp/>=<sp/>magicints[maxidx]<sp/>/<sp/>2;</highlight></codeline>
<codeline lineno="1610"><highlight class="normal"><sp/><sp/><sp/><sp/>i<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1611"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(i<sp/>&lt;<sp/>size)<sp/>{</highlight></codeline>
<codeline lineno="1612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is_small<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>thiscoord<sp/>=<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*)(luip)<sp/>+<sp/>i<sp/>*<sp/>3;</highlight></codeline>
<codeline lineno="1614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(smallidx<sp/>&lt;<sp/>maxidx<sp/>&amp;&amp;<sp/>i<sp/>&gt;=<sp/>1<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>abs(thiscoord[0]<sp/>-<sp/>prevcoord[0])<sp/>&lt;<sp/>larger<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1616"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>abs(thiscoord[1]<sp/>-<sp/>prevcoord[1])<sp/>&lt;<sp/>larger<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1617"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>abs(thiscoord[2]<sp/>-<sp/>prevcoord[2])<sp/>&lt;<sp/>larger)<sp/>{</highlight></codeline>
<codeline lineno="1618"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is_smaller<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1619"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(smallidx<sp/>&gt;<sp/>minidx)<sp/>{</highlight></codeline>
<codeline lineno="1620"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is_smaller<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="1621"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1622"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is_smaller<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1623"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1624"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>+<sp/>1<sp/>&lt;<sp/>size)<sp/>{</highlight></codeline>
<codeline lineno="1625"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(abs(thiscoord[0]<sp/>-<sp/>thiscoord[3])<sp/>&lt;<sp/>smallnum<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1626"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>abs(thiscoord[1]<sp/>-<sp/>thiscoord[4])<sp/>&lt;<sp/>smallnum<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1627"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>abs(thiscoord[2]<sp/>-<sp/>thiscoord[5])<sp/>&lt;<sp/>smallnum)<sp/>{</highlight></codeline>
<codeline lineno="1628"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>interchange<sp/>first<sp/>with<sp/>second<sp/>atom<sp/>for<sp/>better</highlight></codeline>
<codeline lineno="1629"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>compression<sp/>of<sp/>water<sp/>molecules</highlight></codeline>
<codeline lineno="1630"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1631"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp<sp/>=<sp/>thiscoord[0];<sp/>thiscoord[0]<sp/>=<sp/>thiscoord[3];</highlight></codeline>
<codeline lineno="1632"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>thiscoord[3]<sp/>=<sp/>tmp;</highlight></codeline>
<codeline lineno="1633"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp<sp/>=<sp/>thiscoord[1];<sp/>thiscoord[1]<sp/>=<sp/>thiscoord[4];</highlight></codeline>
<codeline lineno="1634"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>thiscoord[4]<sp/>=<sp/>tmp;</highlight></codeline>
<codeline lineno="1635"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp<sp/>=<sp/>thiscoord[2];<sp/>thiscoord[2]<sp/>=<sp/>thiscoord[5];</highlight></codeline>
<codeline lineno="1636"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>thiscoord[5]<sp/>=<sp/>tmp;</highlight></codeline>
<codeline lineno="1637"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is_small<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1638"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight></codeline>
<codeline lineno="1639"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1640"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmpcoord[0]<sp/>=<sp/>thiscoord[0]<sp/>-<sp/>minint[0];</highlight></codeline>
<codeline lineno="1641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmpcoord[1]<sp/>=<sp/>thiscoord[1]<sp/>-<sp/>minint[1];</highlight></codeline>
<codeline lineno="1642"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmpcoord[2]<sp/>=<sp/>thiscoord[2]<sp/>-<sp/>minint[2];</highlight></codeline>
<codeline lineno="1643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bitsize<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>encodebits(buf2,<sp/>bitsizeint[0],<sp/>tmpcoord[0]);</highlight></codeline>
<codeline lineno="1645"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>encodebits(buf2,<sp/>bitsizeint[1],<sp/>tmpcoord[1]);</highlight></codeline>
<codeline lineno="1646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>encodebits(buf2,<sp/>bitsizeint[2],<sp/>tmpcoord[2]);</highlight></codeline>
<codeline lineno="1647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>encodeints(buf2,<sp/>3,<sp/>bitsize,<sp/>sizeint,<sp/>tmpcoord);</highlight></codeline>
<codeline lineno="1649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1650"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prevcoord[0]<sp/>=<sp/>thiscoord[0];</highlight></codeline>
<codeline lineno="1651"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prevcoord[1]<sp/>=<sp/>thiscoord[1];</highlight></codeline>
<codeline lineno="1652"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prevcoord[2]<sp/>=<sp/>thiscoord[2];</highlight></codeline>
<codeline lineno="1653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>thiscoord<sp/>=<sp/>thiscoord<sp/>+<sp/>3;</highlight></codeline>
<codeline lineno="1654"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i++;</highlight></codeline>
<codeline lineno="1655"><highlight class="normal"></highlight></codeline>
<codeline lineno="1656"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>run<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1657"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(is_small<sp/>==<sp/>0<sp/>&amp;&amp;<sp/>is_smaller<sp/>==<sp/>-1)</highlight></codeline>
<codeline lineno="1658"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is_smaller<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(is_small<sp/>&amp;&amp;<sp/>run<sp/>&lt;<sp/>8*3)<sp/>{</highlight></codeline>
<codeline lineno="1660"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmpsum=0;</highlight></codeline>
<codeline lineno="1661"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(j=0;j&lt;3;j++)<sp/>{</highlight></codeline>
<codeline lineno="1662"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp=thiscoord[j]<sp/>-<sp/>prevcoord[j];</highlight></codeline>
<codeline lineno="1663"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmpsum+=tmp*tmp;</highlight></codeline>
<codeline lineno="1664"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1665"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(is_smaller<sp/>==<sp/>-1<sp/>&amp;&amp;<sp/>tmpsum<sp/>&gt;=<sp/>smaller<sp/>*<sp/>smaller)<sp/>{</highlight></codeline>
<codeline lineno="1666"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is_smaller<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1667"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1668"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1669"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmpcoord[run++]<sp/>=<sp/>thiscoord[0]<sp/>-<sp/>prevcoord[0]<sp/>+<sp/>smallnum;</highlight></codeline>
<codeline lineno="1670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmpcoord[run++]<sp/>=<sp/>thiscoord[1]<sp/>-<sp/>prevcoord[1]<sp/>+<sp/>smallnum;</highlight></codeline>
<codeline lineno="1671"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmpcoord[run++]<sp/>=<sp/>thiscoord[2]<sp/>-<sp/>prevcoord[2]<sp/>+<sp/>smallnum;</highlight></codeline>
<codeline lineno="1672"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1673"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prevcoord[0]<sp/>=<sp/>thiscoord[0];</highlight></codeline>
<codeline lineno="1674"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prevcoord[1]<sp/>=<sp/>thiscoord[1];</highlight></codeline>
<codeline lineno="1675"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prevcoord[2]<sp/>=<sp/>thiscoord[2];</highlight></codeline>
<codeline lineno="1676"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1677"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i++;</highlight></codeline>
<codeline lineno="1678"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>thiscoord<sp/>=<sp/>thiscoord<sp/>+<sp/>3;</highlight></codeline>
<codeline lineno="1679"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is_small<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1680"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>&lt;<sp/>size<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1681"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>abs(thiscoord[0]<sp/>-<sp/>prevcoord[0])<sp/>&lt;<sp/>smallnum<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1682"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>abs(thiscoord[1]<sp/>-<sp/>prevcoord[1])<sp/>&lt;<sp/>smallnum<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1683"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>abs(thiscoord[2]<sp/>-<sp/>prevcoord[2])<sp/>&lt;<sp/>smallnum)<sp/>{</highlight></codeline>
<codeline lineno="1684"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is_small<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1685"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1686"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1687"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(run<sp/>!=<sp/>prevrun<sp/>||<sp/>is_smaller<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1688"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prevrun<sp/>=<sp/>run;</highlight></codeline>
<codeline lineno="1689"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>encodebits(buf2,<sp/>1,<sp/>1);<sp/></highlight><highlight class="comment">/*<sp/>flag<sp/>the<sp/>change<sp/>in<sp/>run-length<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1690"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>encodebits(buf2,<sp/>5,<sp/>run+is_smaller+1);</highlight></codeline>
<codeline lineno="1691"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>encodebits(buf2,<sp/>1,<sp/>0);<sp/></highlight><highlight class="comment">/*<sp/>flag<sp/>the<sp/>fact<sp/>that<sp/>runlength<sp/>did<sp/>not<sp/>change<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1693"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1694"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(k=0;<sp/>k<sp/>&lt;<sp/>run;<sp/>k+=3)<sp/>{</highlight></codeline>
<codeline lineno="1695"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>encodeints(buf2,<sp/>3,<sp/>smallidx,<sp/>sizesmall,<sp/>&amp;tmpcoord[k]);<sp/></highlight></codeline>
<codeline lineno="1696"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1697"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(is_smaller<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1698"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>smallidx<sp/>+=<sp/>is_smaller;</highlight></codeline>
<codeline lineno="1699"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(is_smaller<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1700"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>smallnum<sp/>=<sp/>smaller;</highlight></codeline>
<codeline lineno="1701"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>smaller<sp/>=<sp/>magicints[smallidx-1]<sp/>/<sp/>2;</highlight></codeline>
<codeline lineno="1702"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1703"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>smaller<sp/>=<sp/>smallnum;</highlight></codeline>
<codeline lineno="1704"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>smallnum<sp/>=<sp/>magicints[smallidx]<sp/>/<sp/>2;</highlight></codeline>
<codeline lineno="1705"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1706"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sizesmall[0]<sp/>=<sp/>sizesmall[1]<sp/>=<sp/>sizesmall[2]<sp/>=<sp/>magicints[smallidx];</highlight></codeline>
<codeline lineno="1707"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1708"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1709"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(buf2[1]<sp/>!=<sp/>0)<sp/>buf2[0]++;</highlight></codeline>
<codeline lineno="1710"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="xdrfile_8h_1aebeea86c177fe409a3b737f93674137f" kindref="member">xdrfile_write_int</ref>(buf2,1,xfp);<sp/></highlight><highlight class="comment">/*<sp/>buf2[0]<sp/>holds<sp/>the<sp/>length<sp/>in<sp/>bytes<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1711"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp=<ref refid="xdrfile_8h_1ae10b1d0378958230f49849f3ab7c2797" kindref="member">xdrfile_write_opaque</ref>((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)&amp;(buf2[3]),(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)buf2[0],xfp);</highlight></codeline>
<codeline lineno="1712"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(tmp==(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)buf2[0])</highlight></codeline>
<codeline lineno="1713"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>size;</highlight></codeline>
<codeline lineno="1714"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1715"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;<sp/></highlight></codeline>
<codeline lineno="1716"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1717"><highlight class="normal"></highlight></codeline>
<codeline lineno="1718"><highlight class="normal"></highlight></codeline>
<codeline lineno="1719"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Dont<sp/>try<sp/>do<sp/>document<sp/>Fortran<sp/>interface,<sp/>since</highlight></codeline>
<codeline lineno="1720"><highlight class="comment"><sp/>*<sp/>Doxygen<sp/>barfs<sp/>at<sp/>the<sp/>F77_FUNC<sp/>macro<sp/></highlight></codeline>
<codeline lineno="1721"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1722"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>DOXYGEN<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1723"><highlight class="normal"></highlight></codeline>
<codeline lineno="1724"><highlight class="normal"></highlight><highlight class="comment">/*************************************************************</highlight></codeline>
<codeline lineno="1725"><highlight class="comment"><sp/>*<sp/>Fortran77<sp/>interface<sp/>for<sp/>reading/writing<sp/>portable<sp/>data<sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="1726"><highlight class="comment"><sp/>*<sp/>The<sp/>routine<sp/>are<sp/>not<sp/>threadsafe<sp/>when<sp/>called<sp/>from<sp/>Fortran<sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="1727"><highlight class="comment"><sp/>*<sp/>(as<sp/>they<sp/>are<sp/>when<sp/>called<sp/>from<sp/>C)<sp/>unless<sp/>you<sp/>compile<sp/>with<sp/><sp/>*</highlight></codeline>
<codeline lineno="1728"><highlight class="comment"><sp/>*<sp/>this<sp/>file<sp/>with<sp/>posix<sp/>thread<sp/>support.<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="1729"><highlight class="comment"><sp/>*<sp/>Note<sp/>that<sp/>these<sp/>are<sp/>not<sp/>multithread-safe.<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/></highlight></codeline>
<codeline lineno="1730"><highlight class="comment"><sp/>*************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1731"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MAX_FORTRAN_XDR<sp/>1024</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1732"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structXDRFILE" kindref="compound">XDRFILE</ref><sp/>*f77xdr[MAX_FORTRAN_XDR];<sp/></highlight><highlight class="comment">/*<sp/>array<sp/>of<sp/>file<sp/>handles<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1733"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>f77init<sp/>=<sp/>1;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>zero<sp/>array<sp/>first<sp/>time<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1734"><highlight class="normal"></highlight></codeline>
<codeline lineno="1735"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>internal<sp/>to<sp/>this<sp/>file:<sp/>C&lt;--&gt;Fortran<sp/>string<sp/>conversion<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1736"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ftocstr(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*dest,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dest_len,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*src,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>src_len);</highlight></codeline>
<codeline lineno="1737"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ctofstr(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*dest,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dest_len,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*src);</highlight></codeline>
<codeline lineno="1738"><highlight class="normal"></highlight></codeline>
<codeline lineno="1739"><highlight class="normal"></highlight></codeline>
<codeline lineno="1740"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1741"><highlight class="normal">F77_FUNC(xdropen,XDROPEN)(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*fid,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*filename,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*mode,</highlight></codeline>
<codeline lineno="1742"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fn_len,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mode_len)</highlight></codeline>
<codeline lineno="1743"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1744"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>cfilename[512];</highlight></codeline>
<codeline lineno="1745"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>cmode[5];</highlight></codeline>
<codeline lineno="1746"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="1747"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="1748"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>zero<sp/>array<sp/>at<sp/>first<sp/>invocation<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1749"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(f77init)<sp/>{</highlight></codeline>
<codeline lineno="1750"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i=0;i&lt;MAX_FORTRAN_XDR;i++)</highlight></codeline>
<codeline lineno="1751"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f77xdr[i]=NULL;</highlight></codeline>
<codeline lineno="1752"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f77init=0;</highlight></codeline>
<codeline lineno="1753"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1754"><highlight class="normal"><sp/><sp/><sp/><sp/>i=0;</highlight></codeline>
<codeline lineno="1755"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="1756"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>nf77xdr<sp/>is<sp/>always<sp/>smaller<sp/>or<sp/>equal<sp/>to<sp/>MAX_FORTRAN_XDR<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1757"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(i&lt;MAX_FORTRAN_XDR<sp/>&amp;&amp;<sp/>f77xdr[i]!=NULL)</highlight></codeline>
<codeline lineno="1758"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i++;</highlight></codeline>
<codeline lineno="1759"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(i==MAX_FORTRAN_XDR)<sp/>{</highlight></codeline>
<codeline lineno="1760"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*fid<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="1761"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ftocstr(cfilename,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(cfilename),<sp/>filename,<sp/>fn_len))<sp/>{</highlight></codeline>
<codeline lineno="1762"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*fid<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="1763"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ftocstr(cmode,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(cmode),<sp/>mode,mode_len))<sp/>{</highlight></codeline>
<codeline lineno="1764"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*fid<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="1765"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1766"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f77xdr[i]=<ref refid="xdrfile_8h_1a8ae08773e2f7fab7b88a37bf530ea558" kindref="member">xdrfile_open</ref>(cfilename,cmode);</highlight></codeline>
<codeline lineno="1767"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>return<sp/>the<sp/>index<sp/>in<sp/>the<sp/>array<sp/>as<sp/>a<sp/>fortran<sp/>file<sp/>handle<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1768"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*fid=i;<sp/></highlight></codeline>
<codeline lineno="1769"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1770"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1771"><highlight class="normal"></highlight></codeline>
<codeline lineno="1772"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1773"><highlight class="normal">F77_FUNC(xdrclose,XDRCLOSE)(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*fid)</highlight></codeline>
<codeline lineno="1774"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1775"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>first<sp/>close<sp/>it<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1776"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="xdrfile_8h_1ac6ed9a0cbb2e66e63be2765dec55ef45" kindref="member">xdrfile_close</ref>(f77xdr[*fid]);</highlight></codeline>
<codeline lineno="1777"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>the<sp/>remove<sp/>it<sp/>from<sp/>file<sp/>handle<sp/>list<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1778"><highlight class="normal"><sp/><sp/><sp/><sp/>f77xdr[*fid]=NULL;</highlight></codeline>
<codeline lineno="1779"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1780"><highlight class="normal"></highlight></codeline>
<codeline lineno="1781"><highlight class="normal"></highlight></codeline>
<codeline lineno="1782"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1783"><highlight class="normal">F77_FUNC(xdrrint,XDRRINT)(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*fid,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*data,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*ndata,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*ret)</highlight></codeline>
<codeline lineno="1784"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1785"><highlight class="normal"><sp/><sp/><sp/><sp/>*ret<sp/>=<sp/><ref refid="xdrfile_8h_1afd6ea22cd248c0e56c7ba38de3ea29cb" kindref="member">xdrfile_read_int</ref>(data,*ndata,f77xdr[*fid]);</highlight></codeline>
<codeline lineno="1786"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1787"><highlight class="normal"></highlight></codeline>
<codeline lineno="1788"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1789"><highlight class="normal">F77_FUNC(xdrwint,XDRWINT)(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*fid,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*data,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*ndata,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*ret)</highlight></codeline>
<codeline lineno="1790"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1791"><highlight class="normal"><sp/><sp/><sp/><sp/>*ret<sp/>=<sp/><ref refid="xdrfile_8h_1aebeea86c177fe409a3b737f93674137f" kindref="member">xdrfile_write_int</ref>(data,*ndata,f77xdr[*fid]);</highlight></codeline>
<codeline lineno="1792"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1793"><highlight class="normal"></highlight></codeline>
<codeline lineno="1794"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1795"><highlight class="normal">F77_FUNC(xdrruint,XDRRUINT)(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*fid,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*data,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*ndata,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*ret)</highlight></codeline>
<codeline lineno="1796"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1797"><highlight class="normal"><sp/><sp/><sp/><sp/>*ret<sp/>=<sp/><ref refid="xdrfile_8h_1ab8c3a97279a88f549001113659a980a1" kindref="member">xdrfile_read_uint</ref>(data,*ndata,f77xdr[*fid]);</highlight></codeline>
<codeline lineno="1798"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1799"><highlight class="normal"></highlight></codeline>
<codeline lineno="1800"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1801"><highlight class="normal">F77_FUNC(xdrwuint,XDRWUINT)(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*fid,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*data,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*ndata,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*ret)</highlight></codeline>
<codeline lineno="1802"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1803"><highlight class="normal"><sp/><sp/><sp/><sp/>*ret<sp/>=<sp/><ref refid="xdrfile_8h_1ad242afa21abcace1239f9e73552afa3a" kindref="member">xdrfile_write_uint</ref>(data,*ndata,f77xdr[*fid]);</highlight></codeline>
<codeline lineno="1804"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1805"><highlight class="normal"></highlight></codeline>
<codeline lineno="1806"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1807"><highlight class="normal">F77_FUNC(xdrrchar,XDRRCHAR)(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*fid,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*ip,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*ndata,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*ret)</highlight></codeline>
<codeline lineno="1808"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1809"><highlight class="normal"><sp/><sp/><sp/><sp/>*ret<sp/>=<sp/><ref refid="xdrfile_8h_1af7c7a33d1407f75a82f6ab703a788b63" kindref="member">xdrfile_read_char</ref>(ip,*ndata,f77xdr[*fid]);</highlight></codeline>
<codeline lineno="1810"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1811"><highlight class="normal"></highlight></codeline>
<codeline lineno="1812"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1813"><highlight class="normal">F77_FUNC(xdrwchar,XDRWCHAR)(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*fid,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*ip,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*ndata,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*ret)</highlight></codeline>
<codeline lineno="1814"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1815"><highlight class="normal"><sp/><sp/><sp/><sp/>*ret<sp/>=<sp/><ref refid="xdrfile_8h_1a1d033b25e5815e33074bdde87a5d6c6b" kindref="member">xdrfile_write_char</ref>(ip,*ndata,f77xdr[*fid]);</highlight></codeline>
<codeline lineno="1816"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1817"><highlight class="normal"></highlight></codeline>
<codeline lineno="1818"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1819"><highlight class="normal">F77_FUNC(xdrruchar,XDRRUCHAR)(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*fid,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*ip,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*ndata,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*ret)</highlight></codeline>
<codeline lineno="1820"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1821"><highlight class="normal"><sp/><sp/><sp/><sp/>*ret<sp/>=<sp/><ref refid="xdrfile_8h_1aad58c6b4f38c651832d3023e614ec0c2" kindref="member">xdrfile_read_uchar</ref>(ip,*ndata,f77xdr[*fid]);</highlight></codeline>
<codeline lineno="1822"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1823"><highlight class="normal"></highlight></codeline>
<codeline lineno="1824"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1825"><highlight class="normal">F77_FUNC(xdrwuchar,XDRWUCHAR)(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*fid,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*ip,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*ndata,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*ret)</highlight></codeline>
<codeline lineno="1826"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1827"><highlight class="normal"><sp/><sp/><sp/><sp/>*ret<sp/>=<sp/><ref refid="xdrfile_8h_1a4113ec632fc6ca57b3fc9a5bb654c7f6" kindref="member">xdrfile_write_uchar</ref>(ip,*ndata,f77xdr[*fid]);</highlight></codeline>
<codeline lineno="1828"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1829"><highlight class="normal"></highlight></codeline>
<codeline lineno="1830"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1831"><highlight class="normal">F77_FUNC(xdrrshort,XDRRSHORT)(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*fid,<sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>*ip,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*ndata,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*ret)</highlight></codeline>
<codeline lineno="1832"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1833"><highlight class="normal"><sp/><sp/><sp/><sp/>*ret<sp/>=<sp/><ref refid="xdrfile_8h_1ae290f8ebe1675e7149b5b6934a49f6cb" kindref="member">xdrfile_read_short</ref>(ip,*ndata,f77xdr[*fid]);</highlight></codeline>
<codeline lineno="1834"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1835"><highlight class="normal"></highlight></codeline>
<codeline lineno="1836"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1837"><highlight class="normal">F77_FUNC(xdrwshort,XDRWSHORT)(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*fid,<sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>*ip,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*ndata,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*ret)</highlight></codeline>
<codeline lineno="1838"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1839"><highlight class="normal"><sp/><sp/><sp/><sp/>*ret<sp/>=<sp/><ref refid="xdrfile_8h_1ac846d7c595e8233275d02da313af4a65" kindref="member">xdrfile_write_short</ref>(ip,*ndata,f77xdr[*fid]);</highlight></codeline>
<codeline lineno="1840"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1841"><highlight class="normal"></highlight></codeline>
<codeline lineno="1842"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1843"><highlight class="normal">F77_FUNC(xdrrushort,XDRRUSHORT)(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*fid,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>*ip,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*ndata,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*ret)</highlight></codeline>
<codeline lineno="1844"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1845"><highlight class="normal"><sp/><sp/><sp/><sp/>*ret<sp/>=<sp/><ref refid="xdrfile_8h_1a1305e5491face504b51608e8124ff897" kindref="member">xdrfile_read_ushort</ref>(ip,*ndata,f77xdr[*fid]);</highlight></codeline>
<codeline lineno="1846"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1847"><highlight class="normal"></highlight></codeline>
<codeline lineno="1848"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1849"><highlight class="normal">F77_FUNC(xdrwushort,XDRWUSHORT)(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*fid,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>*ip,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*ndata,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*ret)</highlight></codeline>
<codeline lineno="1850"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1851"><highlight class="normal"><sp/><sp/><sp/><sp/>*ret<sp/>=<sp/><ref refid="xdrfile_8h_1a1666dc36baa317ff0856cb7526410069" kindref="member">xdrfile_write_ushort</ref>(ip,*ndata,f77xdr[*fid]);</highlight></codeline>
<codeline lineno="1852"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1853"><highlight class="normal"></highlight></codeline>
<codeline lineno="1854"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1855"><highlight class="normal">F77_FUNC(xdrrsingle,XDRRSINGLE)(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*fid,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*data,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*ndata,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*ret)</highlight></codeline>
<codeline lineno="1856"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1857"><highlight class="normal"><sp/><sp/><sp/><sp/>*ret<sp/>=<sp/><ref refid="xdrfile_8h_1a0284c6956e48e298820448fc86640e76" kindref="member">xdrfile_read_float</ref>(data,*ndata,f77xdr[*fid]);</highlight></codeline>
<codeline lineno="1858"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1859"><highlight class="normal"></highlight></codeline>
<codeline lineno="1860"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1861"><highlight class="normal">F77_FUNC(xdrwsingle,XDRWSINGLE)(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*fid,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*data,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*ndata,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*ret)</highlight></codeline>
<codeline lineno="1862"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1863"><highlight class="normal"><sp/><sp/><sp/><sp/>*ret<sp/>=<sp/><ref refid="xdrfile_8h_1a07b2f0fbacf3d25f6d6601e6c4285cdf" kindref="member">xdrfile_write_float</ref>(data,*ndata,f77xdr[*fid]);</highlight></codeline>
<codeline lineno="1864"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1865"><highlight class="normal"></highlight></codeline>
<codeline lineno="1866"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1867"><highlight class="normal">F77_FUNC(xdrrdouble,XDRRDOUBLE)(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*fid,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*data,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*ndata,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*ret)</highlight></codeline>
<codeline lineno="1868"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1869"><highlight class="normal"><sp/><sp/><sp/><sp/>*ret<sp/>=<sp/><ref refid="xdrfile_8h_1ad5be7d297094580d000cb372e2441a48" kindref="member">xdrfile_read_double</ref>(data,*ndata,f77xdr[*fid]);</highlight></codeline>
<codeline lineno="1870"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1871"><highlight class="normal"></highlight></codeline>
<codeline lineno="1872"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1873"><highlight class="normal">F77_FUNC(xdrwdouble,XDRWDOUBLE)(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*fid,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*data,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*ndata,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*ret)</highlight></codeline>
<codeline lineno="1874"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1875"><highlight class="normal"><sp/><sp/><sp/><sp/>*ret<sp/>=<sp/><ref refid="xdrfile_8h_1a423d0a114162a2be532c1933bb4171fb" kindref="member">xdrfile_write_double</ref>(data,*ndata,f77xdr[*fid]);</highlight></codeline>
<codeline lineno="1876"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1877"><highlight class="normal"></highlight></codeline>
<codeline lineno="1878"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ftocstr(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*dest,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>destlen,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*src,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>srclen)</highlight></codeline>
<codeline lineno="1879"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1880"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*p;</highlight></codeline>
<codeline lineno="1881"><highlight class="normal"></highlight></codeline>
<codeline lineno="1882"><highlight class="normal"><sp/><sp/><sp/><sp/>p<sp/>=<sp/>src<sp/>+<sp/>srclen;</highlight></codeline>
<codeline lineno="1883"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(<sp/>--p<sp/>&gt;=<sp/>src<sp/>&amp;&amp;<sp/>*p<sp/>==<sp/></highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="1884"><highlight class="normal"><sp/><sp/><sp/><sp/>srclen<sp/>=<sp/>p<sp/>-<sp/>src<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="1885"><highlight class="normal"><sp/><sp/><sp/><sp/>destlen--;</highlight></codeline>
<codeline lineno="1886"><highlight class="normal"><sp/><sp/><sp/><sp/>dest[0]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1887"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(srclen<sp/>&gt;<sp/>destlen)</highlight></codeline>
<codeline lineno="1888"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="1889"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(srclen--)</highlight></codeline>
<codeline lineno="1890"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*dest++<sp/>=<sp/>*src++);</highlight></codeline>
<codeline lineno="1891"><highlight class="normal"><sp/><sp/><sp/><sp/>*dest<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1892"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="1893"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1894"><highlight class="normal"></highlight></codeline>
<codeline lineno="1895"><highlight class="normal"></highlight></codeline>
<codeline lineno="1896"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ctofstr(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*dest,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>destlen,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*src)</highlight></codeline>
<codeline lineno="1897"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1898"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(destlen<sp/>&amp;&amp;<sp/>*src)<sp/>{</highlight></codeline>
<codeline lineno="1899"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*dest++<sp/>=<sp/>*src++;</highlight></codeline>
<codeline lineno="1900"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>destlen--;</highlight></codeline>
<codeline lineno="1901"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1902"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(destlen--)</highlight></codeline>
<codeline lineno="1903"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*dest++<sp/>=<sp/></highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1904"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="1905"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1906"><highlight class="normal"></highlight></codeline>
<codeline lineno="1907"><highlight class="normal"></highlight></codeline>
<codeline lineno="1908"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1909"><highlight class="normal">F77_FUNC(xdrrstring,XDRRSTRING)(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*fid,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*str,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*ret,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len)</highlight></codeline>
<codeline lineno="1910"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1911"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*cstr;</highlight></codeline>
<codeline lineno="1912"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="1913"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((cstr=(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)malloc((len+1)*</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">)))==NULL)<sp/>{</highlight></codeline>
<codeline lineno="1914"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*ret<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1915"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1916"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1917"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ftocstr(cstr,<sp/>len+1,<sp/>str,<sp/>len))<sp/>{</highlight></codeline>
<codeline lineno="1918"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*ret<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1919"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(cstr);</highlight></codeline>
<codeline lineno="1920"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1921"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1922"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="1923"><highlight class="normal"><sp/><sp/><sp/><sp/>*ret<sp/>=<sp/><ref refid="xdrfile_8h_1a5df896d6b1635fb4901cc7e5c148163b" kindref="member">xdrfile_read_string</ref>(cstr,<sp/>len+1,f77xdr[*fid]);</highlight></codeline>
<codeline lineno="1924"><highlight class="normal"><sp/><sp/><sp/><sp/>ctofstr(<sp/>str,<sp/>len<sp/>,<sp/>cstr);</highlight></codeline>
<codeline lineno="1925"><highlight class="normal"><sp/><sp/><sp/><sp/>free(cstr);</highlight></codeline>
<codeline lineno="1926"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1927"><highlight class="normal"></highlight></codeline>
<codeline lineno="1928"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1929"><highlight class="normal">F77_FUNC(xdrwstring,XDRWSTRING)(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*fid,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*str,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*ret,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len)</highlight></codeline>
<codeline lineno="1930"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1931"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*cstr;</highlight></codeline>
<codeline lineno="1932"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="1933"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((cstr=(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)malloc((len+1)*</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">)))==NULL)<sp/>{</highlight></codeline>
<codeline lineno="1934"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*ret<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1935"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1936"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1937"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ftocstr(cstr,<sp/>len+1,<sp/>str,<sp/>len))<sp/>{</highlight></codeline>
<codeline lineno="1938"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*ret<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1939"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(cstr);</highlight></codeline>
<codeline lineno="1940"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1941"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1942"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="1943"><highlight class="normal"><sp/><sp/><sp/><sp/>*ret<sp/>=<sp/><ref refid="xdrfile_8h_1a80badf578ca42f275c2aae1d0788b9d1" kindref="member">xdrfile_write_string</ref>(cstr,<sp/>f77xdr[*fid]);</highlight></codeline>
<codeline lineno="1944"><highlight class="normal"><sp/><sp/><sp/><sp/>ctofstr(<sp/>str,<sp/>len<sp/>,<sp/>cstr);</highlight></codeline>
<codeline lineno="1945"><highlight class="normal"><sp/><sp/><sp/><sp/>free(cstr);</highlight></codeline>
<codeline lineno="1946"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1947"><highlight class="normal"></highlight></codeline>
<codeline lineno="1948"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1949"><highlight class="normal">F77_FUNC(xdrropaque,XDRROPAQUE)(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*fid,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*data,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*ndata,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*ret)</highlight></codeline>
<codeline lineno="1950"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1951"><highlight class="normal"><sp/><sp/><sp/><sp/>*ret<sp/>=<sp/><ref refid="xdrfile_8h_1a608b6dfc7dd697062a91f784d7e31e4e" kindref="member">xdrfile_read_opaque</ref>(data,*ndata,f77xdr[*fid]);</highlight></codeline>
<codeline lineno="1952"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1953"><highlight class="normal"></highlight></codeline>
<codeline lineno="1954"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1955"><highlight class="normal">F77_FUNC(xdrwopaque,XDRWOPAQUE)(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*fid,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*data,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*ndata,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*ret)</highlight></codeline>
<codeline lineno="1956"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1957"><highlight class="normal"><sp/><sp/><sp/><sp/>*ret<sp/>=<sp/><ref refid="xdrfile_8h_1ae10b1d0378958230f49849f3ab7c2797" kindref="member">xdrfile_write_opaque</ref>(data,*ndata,f77xdr[*fid]);</highlight></codeline>
<codeline lineno="1958"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1959"><highlight class="normal"></highlight></codeline>
<codeline lineno="1960"><highlight class="normal"></highlight></codeline>
<codeline lineno="1961"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Write<sp/>single-precision<sp/>compressed<sp/>3d<sp/>coordinates<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1962"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1963"><highlight class="normal">F77_FUNC(xdrccs,XDRCCS)(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*fid,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*data,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*ncoord,<sp/></highlight></codeline>
<codeline lineno="1964"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*precision,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*ret)</highlight></codeline>
<codeline lineno="1965"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1966"><highlight class="normal"><sp/><sp/><sp/><sp/>*ret<sp/>=<sp/><ref refid="xdrfile_8h_1a91f4daa33bda1086fad70aa1c399e016" kindref="member">xdrfile_compress_coord_float</ref>(data,*ncoord,*precision,f77xdr[*fid]);</highlight></codeline>
<codeline lineno="1967"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1968"><highlight class="normal"></highlight></codeline>
<codeline lineno="1969"><highlight class="normal"></highlight></codeline>
<codeline lineno="1970"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Read<sp/>single-precision<sp/>compressed<sp/>3d<sp/>coordinates<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1971"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1972"><highlight class="normal">F77_FUNC(xdrdcs,XDRDCS)(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*fid,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*data,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*ncoord,<sp/></highlight></codeline>
<codeline lineno="1973"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*precision,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*ret)</highlight></codeline>
<codeline lineno="1974"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1975"><highlight class="normal"><sp/><sp/><sp/><sp/>*ret<sp/>=<sp/><ref refid="xdrfile_8h_1a7e6af0e7fe9b3fd96c79ceba9ea3e7c3" kindref="member">xdrfile_decompress_coord_float</ref>(data,ncoord,precision,f77xdr[*fid]);</highlight></codeline>
<codeline lineno="1976"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1977"><highlight class="normal"></highlight></codeline>
<codeline lineno="1978"><highlight class="normal"></highlight></codeline>
<codeline lineno="1979"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Write<sp/>compressed<sp/>3d<sp/>coordinates<sp/>from<sp/>double<sp/>precision<sp/>data<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1980"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1981"><highlight class="normal">F77_FUNC(xdrccd,XDRCCD)(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*fid,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*data,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*ncoord,<sp/></highlight></codeline>
<codeline lineno="1982"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*precision,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*ret)</highlight></codeline>
<codeline lineno="1983"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1984"><highlight class="normal"><sp/><sp/><sp/><sp/>*ret<sp/>=<sp/><ref refid="xdrfile_8h_1ac07f980b8065b642d919296126c44ebc" kindref="member">xdrfile_compress_coord_double</ref>(data,*ncoord,*precision,f77xdr[*fid]);</highlight></codeline>
<codeline lineno="1985"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1986"><highlight class="normal"></highlight></codeline>
<codeline lineno="1987"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Read<sp/>compressed<sp/>3d<sp/>coordinates<sp/>into<sp/>double<sp/>precision<sp/>data<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1988"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1989"><highlight class="normal">F77_FUNC(xddcd,XDRDCD)(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*fid,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*data,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*ncoord,<sp/></highlight></codeline>
<codeline lineno="1990"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*precision,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*ret)</highlight></codeline>
<codeline lineno="1991"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1992"><highlight class="normal"><sp/><sp/><sp/><sp/>*ret<sp/>=<sp/><ref refid="xdrfile_8h_1a2d03c376e92eecf3b81a354122be17fe" kindref="member">xdrfile_decompress_coord_double</ref>(data,ncoord,precision,f77xdr[*fid]);</highlight></codeline>
<codeline lineno="1993"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1994"><highlight class="normal"></highlight></codeline>
<codeline lineno="1995"><highlight class="normal"></highlight></codeline>
<codeline lineno="1996"><highlight class="normal"></highlight></codeline>
<codeline lineno="1997"><highlight class="normal"></highlight></codeline>
<codeline lineno="1998"><highlight class="normal"></highlight></codeline>
<codeline lineno="1999"><highlight class="normal"></highlight></codeline>
<codeline lineno="2000"><highlight class="normal"></highlight></codeline>
<codeline lineno="2001"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>DOXYGEN<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2002"><highlight class="normal"></highlight></codeline>
<codeline lineno="2003"><highlight class="normal"></highlight><highlight class="comment">/*************************************************************</highlight></codeline>
<codeline lineno="2004"><highlight class="comment"><sp/>*<sp/>End<sp/>of<sp/>higher-level<sp/>routines<sp/>-<sp/>dont<sp/>change<sp/>things<sp/>below!<sp/><sp/>*</highlight></codeline>
<codeline lineno="2005"><highlight class="comment"><sp/>*************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2006"><highlight class="normal"></highlight></codeline>
<codeline lineno="2007"><highlight class="normal"></highlight></codeline>
<codeline lineno="2008"><highlight class="normal"></highlight></codeline>
<codeline lineno="2009"><highlight class="normal"></highlight></codeline>
<codeline lineno="2010"><highlight class="normal"></highlight></codeline>
<codeline lineno="2011"><highlight class="normal"></highlight></codeline>
<codeline lineno="2012"><highlight class="normal"></highlight></codeline>
<codeline lineno="2013"><highlight class="normal"></highlight></codeline>
<codeline lineno="2014"><highlight class="normal"></highlight></codeline>
<codeline lineno="2015"><highlight class="normal"></highlight></codeline>
<codeline lineno="2016"><highlight class="normal"></highlight></codeline>
<codeline lineno="2017"><highlight class="normal"></highlight></codeline>
<codeline lineno="2018"><highlight class="normal"></highlight></codeline>
<codeline lineno="2019"><highlight class="normal"></highlight></codeline>
<codeline lineno="2020"><highlight class="normal"></highlight></codeline>
<codeline lineno="2021"><highlight class="normal"></highlight></codeline>
<codeline lineno="2022"><highlight class="normal"></highlight></codeline>
<codeline lineno="2023"><highlight class="normal"></highlight></codeline>
<codeline lineno="2024"><highlight class="normal"></highlight></codeline>
<codeline lineno="2025"><highlight class="normal"></highlight></codeline>
<codeline lineno="2026"><highlight class="normal"></highlight><highlight class="comment">/*************************************************************</highlight></codeline>
<codeline lineno="2027"><highlight class="comment"><sp/>*<sp/>The<sp/>rest<sp/>of<sp/>this<sp/>file<sp/>contains<sp/>our<sp/>own<sp/>implementation<sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="2028"><highlight class="comment"><sp/>*<sp/>of<sp/>the<sp/>XDR<sp/>calls<sp/>in<sp/>case<sp/>you<sp/>are<sp/>compiling<sp/>without<sp/>them.<sp/><sp/>*</highlight></codeline>
<codeline lineno="2029"><highlight class="comment"><sp/>*<sp/>You<sp/>do<sp/>NOT<sp/>want<sp/>to<sp/>change<sp/>things<sp/>here<sp/>since<sp/>it<sp/>would<sp/>make<sp/>*</highlight></codeline>
<codeline lineno="2030"><highlight class="comment"><sp/>*<sp/>things<sp/>incompatible<sp/>with<sp/>the<sp/>standard<sp/>RPC/XDR<sp/>routines.<sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="2031"><highlight class="comment"><sp/>*************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2032"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>HAVE_RPC_XDR_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2033"><highlight class="normal"></highlight></codeline>
<codeline lineno="2034"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2035"><highlight class="comment"><sp/>*<sp/>What<sp/>follows<sp/>is<sp/>a<sp/>modified<sp/>version<sp/>of<sp/>the<sp/>Sun<sp/>XDR<sp/>code.<sp/>For<sp/>reference</highlight></codeline>
<codeline lineno="2036"><highlight class="comment"><sp/>*<sp/>we<sp/>include<sp/>their<sp/>copyright<sp/>and<sp/>license:</highlight></codeline>
<codeline lineno="2037"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="2038"><highlight class="comment"><sp/>*<sp/>Sun<sp/>RPC<sp/>is<sp/>a<sp/>product<sp/>of<sp/>Sun<sp/>Microsystems,<sp/>Inc.<sp/>and<sp/>is<sp/>provided<sp/>for</highlight></codeline>
<codeline lineno="2039"><highlight class="comment"><sp/>*<sp/>unrestricted<sp/>use<sp/>provided<sp/>that<sp/>this<sp/>legend<sp/>is<sp/>included<sp/>on<sp/>all<sp/>tape</highlight></codeline>
<codeline lineno="2040"><highlight class="comment"><sp/>*<sp/>media<sp/>and<sp/>as<sp/>a<sp/>part<sp/>of<sp/>the<sp/>software<sp/>program<sp/>in<sp/>whole<sp/>or<sp/>part.<sp/><sp/>Users</highlight></codeline>
<codeline lineno="2041"><highlight class="comment"><sp/>*<sp/>may<sp/>copy<sp/>or<sp/>modify<sp/>Sun<sp/>RPC<sp/>without<sp/>charge,<sp/>but<sp/>are<sp/>not<sp/>authorized</highlight></codeline>
<codeline lineno="2042"><highlight class="comment"><sp/>*<sp/>to<sp/>license<sp/>or<sp/>distribute<sp/>it<sp/>to<sp/>anyone<sp/>else<sp/>except<sp/>as<sp/>part<sp/>of<sp/>a<sp/>product<sp/>or</highlight></codeline>
<codeline lineno="2043"><highlight class="comment"><sp/>*<sp/>program<sp/>developed<sp/>by<sp/>the<sp/>user.</highlight></codeline>
<codeline lineno="2044"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="2045"><highlight class="comment"><sp/>*<sp/>SUN<sp/>RPC<sp/>IS<sp/>PROVIDED<sp/>AS<sp/>IS<sp/>WITH<sp/>NO<sp/>WARRANTIES<sp/>OF<sp/>ANY<sp/>KIND<sp/>INCLUDING<sp/>THE</highlight></codeline>
<codeline lineno="2046"><highlight class="comment"><sp/>*<sp/>WARRANTIES<sp/>OF<sp/>DESIGN,<sp/>MERCHANTIBILITY<sp/>AND<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR</highlight></codeline>
<codeline lineno="2047"><highlight class="comment"><sp/>*<sp/>PURPOSE,<sp/>OR<sp/>ARISING<sp/>FROM<sp/>A<sp/>COURSE<sp/>OF<sp/>DEALING,<sp/>USAGE<sp/>OR<sp/>TRADE<sp/>PRACTICE.</highlight></codeline>
<codeline lineno="2048"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="2049"><highlight class="comment"><sp/>*<sp/>Sun<sp/>RPC<sp/>is<sp/>provided<sp/>with<sp/>no<sp/>support<sp/>and<sp/>without<sp/>any<sp/>obligation<sp/>on<sp/>the</highlight></codeline>
<codeline lineno="2050"><highlight class="comment"><sp/>*<sp/>part<sp/>of<sp/>Sun<sp/>Microsystems,<sp/>Inc.<sp/>to<sp/>assist<sp/>in<sp/>its<sp/>use,<sp/>correction,</highlight></codeline>
<codeline lineno="2051"><highlight class="comment"><sp/>*<sp/>modification<sp/>or<sp/>enhancement.</highlight></codeline>
<codeline lineno="2052"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="2053"><highlight class="comment"><sp/>*<sp/>SUN<sp/>MICROSYSTEMS,<sp/>INC.<sp/>SHALL<sp/>HAVE<sp/>NO<sp/>LIABILITY<sp/>WITH<sp/>RESPECT<sp/>TO<sp/>THE</highlight></codeline>
<codeline lineno="2054"><highlight class="comment"><sp/>*<sp/>INFRINGEMENT<sp/>OF<sp/>COPYRIGHTS,<sp/>TRADE<sp/>SECRETS<sp/>OR<sp/>ANY<sp/>PATENTS<sp/>BY<sp/>SUN<sp/>RPC</highlight></codeline>
<codeline lineno="2055"><highlight class="comment"><sp/>*<sp/>OR<sp/>ANY<sp/>PART<sp/>THEREOF.</highlight></codeline>
<codeline lineno="2056"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="2057"><highlight class="comment"><sp/>*<sp/>In<sp/>no<sp/>event<sp/>will<sp/>Sun<sp/>Microsystems,<sp/>Inc.<sp/>be<sp/>liable<sp/>for<sp/>any<sp/>lost<sp/>revenue</highlight></codeline>
<codeline lineno="2058"><highlight class="comment"><sp/>*<sp/>or<sp/>profits<sp/>or<sp/>other<sp/>special,<sp/>indirect<sp/>and<sp/>consequential<sp/>damages,<sp/>even<sp/>if</highlight></codeline>
<codeline lineno="2059"><highlight class="comment"><sp/>*<sp/>Sun<sp/>has<sp/>been<sp/>advised<sp/>of<sp/>the<sp/>possibility<sp/>of<sp/>such<sp/>damages.</highlight></codeline>
<codeline lineno="2060"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="2061"><highlight class="comment"><sp/>*<sp/>Sun<sp/>Microsystems,<sp/>Inc.</highlight></codeline>
<codeline lineno="2062"><highlight class="comment"><sp/>*<sp/>2550<sp/>Garcia<sp/>Avenue</highlight></codeline>
<codeline lineno="2063"><highlight class="comment"><sp/>*<sp/>Mountain<sp/>View,<sp/>California<sp/><sp/>94043</highlight></codeline>
<codeline lineno="2064"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2065"><highlight class="normal"></highlight></codeline>
<codeline lineno="2066"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>INT_MAX<sp/>is<sp/>defined<sp/>in<sp/>limits.h<sp/>according<sp/>to<sp/>ANSI<sp/>C<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2067"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(INT_MAX<sp/>&gt;<sp/>2147483647)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2068"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/>error<sp/>Error:<sp/>Cannot<sp/>use<sp/>builtin<sp/>XDR<sp/>support<sp/>when<sp/>size<sp/>of<sp/>int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2069"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/>error<sp/>is<sp/>larger<sp/>than<sp/>4<sp/>bytes.<sp/>Use<sp/>your<sp/>system<sp/>XDR<sp/>libraries<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2070"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/>error<sp/>instead,<sp/>or<sp/>modify<sp/>the<sp/>source<sp/>code<sp/>in<sp/>xdrfile.c</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2071"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>Check<sp/>for<sp/>4<sp/>byte<sp/>int<sp/>type<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2072"><highlight class="normal"></highlight></codeline>
<codeline lineno="2073"><highlight class="normal"></highlight></codeline>
<codeline lineno="2074"><highlight class="normal"></highlight></codeline>
<codeline lineno="2075"><highlight class="normal"></highlight></codeline>
<codeline lineno="2076"><highlight class="normal"></highlight></codeline>
<codeline lineno="2077"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>int<sp/>(*xdrproc_t)<sp/>(<ref refid="structXDR" kindref="compound">XDR</ref><sp/>*,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*,...);</highlight></codeline>
<codeline lineno="2078"><highlight class="normal"></highlight></codeline>
<codeline lineno="2079"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>xdr_getlong(xdrs,<sp/>longp)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2080"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>(*(xdrs)-&gt;x_ops-&gt;x_getlong)(xdrs,<sp/>longp)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2081"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>xdr_putlong(xdrs,<sp/>longp)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2082"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>(*(xdrs)-&gt;x_ops-&gt;x_putlong)(xdrs,<sp/>longp)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2083"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>xdr_getbytes(xdrs,<sp/>addr,<sp/>len)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2084"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>(*(xdrs)-&gt;x_ops-&gt;x_getbytes)(xdrs,<sp/>addr,<sp/>len)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2085"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>xdr_putbytes(xdrs,<sp/>addr,<sp/>len)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2086"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>(*(xdrs)-&gt;x_ops-&gt;x_putbytes)(xdrs,<sp/>addr,<sp/>len)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2087"><highlight class="normal"></highlight></codeline>
<codeline lineno="2088"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BYTES_PER_XDR_UNIT<sp/>4<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2089"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>xdr_zero[BYTES_PER_XDR_UNIT]<sp/>=<sp/>{0,<sp/>0,<sp/>0,<sp/>0};</highlight></codeline>
<codeline lineno="2090"><highlight class="normal"></highlight></codeline>
<codeline lineno="2091"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>int32_t</highlight></codeline>
<codeline lineno="2092"><highlight class="normal">xdr_swapbytes(int32_t<sp/>x)</highlight></codeline>
<codeline lineno="2093"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2094"><highlight class="normal"><sp/><sp/><sp/><sp/>int32_t<sp/>y,i;</highlight></codeline>
<codeline lineno="2095"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*px=(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)&amp;x;</highlight></codeline>
<codeline lineno="2096"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*py=(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)&amp;y;</highlight></codeline>
<codeline lineno="2097"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="2098"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i=0;i&lt;4;i++)</highlight></codeline>
<codeline lineno="2099"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>py[i]=px[3-i];</highlight></codeline>
<codeline lineno="2100"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="2101"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>y;</highlight></codeline>
<codeline lineno="2102"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2103"><highlight class="normal"></highlight></codeline>
<codeline lineno="2104"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>int32_t</highlight></codeline>
<codeline lineno="2105"><highlight class="normal">xdr_htonl(int32_t<sp/>x)</highlight></codeline>
<codeline lineno="2106"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2107"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>s=0x1234;</highlight></codeline>
<codeline lineno="2108"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>*((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)&amp;s)==(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">)0x34)<sp/>{</highlight></codeline>
<codeline lineno="2109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>smallendian,swap<sp/>bytes<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>xdr_swapbytes(x);</highlight></codeline>
<codeline lineno="2111"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>bigendian,<sp/>do<sp/>nothing<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x;</highlight></codeline>
<codeline lineno="2114"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2115"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2116"><highlight class="normal"></highlight></codeline>
<codeline lineno="2117"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>int32_t</highlight></codeline>
<codeline lineno="2118"><highlight class="normal">xdr_ntohl(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x)</highlight></codeline>
<codeline lineno="2119"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2120"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>s=0x1234;</highlight></codeline>
<codeline lineno="2121"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>*((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)&amp;s)==(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">)0x34)<sp/>{</highlight></codeline>
<codeline lineno="2122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>smallendian,<sp/>swap<sp/>bytes<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>xdr_swapbytes(x);</highlight></codeline>
<codeline lineno="2124"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>bigendian,<sp/>do<sp/>nothing<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x;</highlight></codeline>
<codeline lineno="2127"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2128"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2129"><highlight class="normal"></highlight></codeline>
<codeline lineno="2130"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2131"><highlight class="normal">xdr_int<sp/>(XDR<sp/>*xdrs,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*ip)</highlight></codeline>
<codeline lineno="2132"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2133"><highlight class="normal"><sp/><sp/><sp/><sp/>int32_t<sp/>i32;</highlight></codeline>
<codeline lineno="2134"><highlight class="normal"></highlight></codeline>
<codeline lineno="2135"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(xdrs-&gt;x_op)</highlight></codeline>
<codeline lineno="2136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>XDR_ENCODE:</highlight></codeline>
<codeline lineno="2138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i32<sp/>=<sp/>(int32_t)<sp/>*ip;</highlight></codeline>
<codeline lineno="2139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>xdr_putlong<sp/>(xdrs,<sp/>&amp;i32);</highlight></codeline>
<codeline lineno="2140"><highlight class="normal"></highlight></codeline>
<codeline lineno="2141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>XDR_DECODE:</highlight></codeline>
<codeline lineno="2142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!xdr_getlong<sp/>(xdrs,<sp/>&amp;i32))</highlight></codeline>
<codeline lineno="2143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="2145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*ip<sp/>=<sp/>(int)<sp/>i32;</highlight></codeline>
<codeline lineno="2147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>XDR_FREE:</highlight></codeline>
<codeline lineno="2148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="2149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2150"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="2151"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2152"><highlight class="normal"></highlight></codeline>
<codeline lineno="2153"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2154"><highlight class="normal">xdr_u_int<sp/>(XDR<sp/>*xdrs,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*up)</highlight></codeline>
<codeline lineno="2155"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2156"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>ui32;</highlight></codeline>
<codeline lineno="2157"><highlight class="normal"></highlight></codeline>
<codeline lineno="2158"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(xdrs-&gt;x_op)</highlight></codeline>
<codeline lineno="2159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>XDR_ENCODE:</highlight></codeline>
<codeline lineno="2161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ui32<sp/>=<sp/>(uint32_t)<sp/>*<sp/>up;</highlight></codeline>
<codeline lineno="2162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>xdr_putlong<sp/>(xdrs,<sp/>(int32_t<sp/>*)&amp;ui32);</highlight></codeline>
<codeline lineno="2163"><highlight class="normal"></highlight></codeline>
<codeline lineno="2164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>XDR_DECODE:</highlight></codeline>
<codeline lineno="2165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!xdr_getlong<sp/>(xdrs,<sp/>(int32_t<sp/>*)&amp;ui32))</highlight></codeline>
<codeline lineno="2166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="2168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*up<sp/>=<sp/>(uint32_t)<sp/>ui32;</highlight></codeline>
<codeline lineno="2170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>XDR_FREE:</highlight></codeline>
<codeline lineno="2171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="2172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2173"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="2174"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2175"><highlight class="normal"></highlight></codeline>
<codeline lineno="2176"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2177"><highlight class="normal">xdr_short<sp/>(XDR<sp/>*xdrs,<sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>*sp)</highlight></codeline>
<codeline lineno="2178"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2179"><highlight class="normal"><sp/><sp/><sp/><sp/>int32_t<sp/>i32;</highlight></codeline>
<codeline lineno="2180"><highlight class="normal"></highlight></codeline>
<codeline lineno="2181"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(xdrs-&gt;x_op)</highlight></codeline>
<codeline lineno="2182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>XDR_ENCODE:</highlight></codeline>
<codeline lineno="2184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i32<sp/>=<sp/>(int32_t)<sp/>*sp;</highlight></codeline>
<codeline lineno="2185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>xdr_putlong<sp/>(xdrs,<sp/>&amp;i32);</highlight></codeline>
<codeline lineno="2186"><highlight class="normal"></highlight></codeline>
<codeline lineno="2187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>XDR_DECODE:</highlight></codeline>
<codeline lineno="2188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!xdr_getlong<sp/>(xdrs,<sp/>&amp;i32))</highlight></codeline>
<codeline lineno="2189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="2191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*sp<sp/>=<sp/>(short)<sp/>i32;</highlight></codeline>
<codeline lineno="2193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="2194"><highlight class="normal"></highlight></codeline>
<codeline lineno="2195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>XDR_FREE:</highlight></codeline>
<codeline lineno="2196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="2197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2198"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="2199"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2200"><highlight class="normal"></highlight></codeline>
<codeline lineno="2201"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2202"><highlight class="normal">xdr_u_short<sp/>(XDR<sp/>*xdrs,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>*sp)</highlight></codeline>
<codeline lineno="2203"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2204"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>ui32;</highlight></codeline>
<codeline lineno="2205"><highlight class="normal"></highlight></codeline>
<codeline lineno="2206"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(xdrs-&gt;x_op)</highlight></codeline>
<codeline lineno="2207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>XDR_ENCODE:</highlight></codeline>
<codeline lineno="2209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ui32<sp/>=<sp/>(uint32_t)<sp/>*sp;</highlight></codeline>
<codeline lineno="2210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>xdr_putlong<sp/>(xdrs,<sp/>(int32_t<sp/>*)&amp;ui32);</highlight></codeline>
<codeline lineno="2211"><highlight class="normal"></highlight></codeline>
<codeline lineno="2212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>XDR_DECODE:</highlight></codeline>
<codeline lineno="2213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!xdr_getlong<sp/>(xdrs,<sp/>(int32_t<sp/>*)&amp;ui32))</highlight></codeline>
<codeline lineno="2214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="2216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*sp<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>short)<sp/>ui32;</highlight></codeline>
<codeline lineno="2218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="2219"><highlight class="normal"></highlight></codeline>
<codeline lineno="2220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>XDR_FREE:</highlight></codeline>
<codeline lineno="2221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="2222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2223"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="2224"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2225"><highlight class="normal"></highlight></codeline>
<codeline lineno="2226"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2227"><highlight class="normal">xdr_char<sp/>(XDR<sp/>*xdrs,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*cp)</highlight></codeline>
<codeline lineno="2228"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2229"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="2230"><highlight class="normal"></highlight></codeline>
<codeline lineno="2231"><highlight class="normal"><sp/><sp/><sp/><sp/>i<sp/>=<sp/>(*cp);</highlight></codeline>
<codeline lineno="2232"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!xdr_int<sp/>(xdrs,<sp/>&amp;i))</highlight></codeline>
<codeline lineno="2233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="2235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2236"><highlight class="normal"><sp/><sp/><sp/><sp/>*cp<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="2237"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="2238"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2239"><highlight class="normal"></highlight></codeline>
<codeline lineno="2240"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2241"><highlight class="normal">xdr_u_char<sp/>(XDR<sp/>*xdrs,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*cp)</highlight></codeline>
<codeline lineno="2242"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2243"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>u;</highlight></codeline>
<codeline lineno="2244"><highlight class="normal"></highlight></codeline>
<codeline lineno="2245"><highlight class="normal"><sp/><sp/><sp/><sp/>u<sp/>=<sp/>(*cp);</highlight></codeline>
<codeline lineno="2246"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!xdr_u_int<sp/>(xdrs,<sp/>&amp;u))</highlight></codeline>
<codeline lineno="2247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="2249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2250"><highlight class="normal"><sp/><sp/><sp/><sp/>*cp<sp/>=<sp/>u;</highlight></codeline>
<codeline lineno="2251"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="2252"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2253"><highlight class="normal"></highlight></codeline>
<codeline lineno="2254"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2255"><highlight class="comment"><sp/>*<sp/>XDR<sp/>opaque<sp/>data</highlight></codeline>
<codeline lineno="2256"><highlight class="comment"><sp/>*<sp/>Allows<sp/>the<sp/>specification<sp/>of<sp/>a<sp/>fixed<sp/>size<sp/>sequence<sp/>of<sp/>opaque<sp/>bytes.</highlight></codeline>
<codeline lineno="2257"><highlight class="comment"><sp/>*<sp/>cp<sp/>points<sp/>to<sp/>the<sp/>opaque<sp/>object<sp/>and<sp/>cnt<sp/>gives<sp/>the<sp/>byte<sp/>length.</highlight></codeline>
<codeline lineno="2258"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2259"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2260"><highlight class="normal">xdr_opaque<sp/>(XDR<sp/>*xdrs,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*cp,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cnt)</highlight></codeline>
<codeline lineno="2261"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2262"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rndup;</highlight></codeline>
<codeline lineno="2263"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>crud[BYTES_PER_XDR_UNIT];</highlight></codeline>
<codeline lineno="2264"><highlight class="normal"></highlight></codeline>
<codeline lineno="2265"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2266"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>if<sp/>no<sp/>data<sp/>we<sp/>are<sp/>done</highlight></codeline>
<codeline lineno="2267"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2268"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cnt<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="2269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="2270"><highlight class="normal"></highlight></codeline>
<codeline lineno="2271"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2272"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>round<sp/>byte<sp/>count<sp/>to<sp/>full<sp/>xdr<sp/>units</highlight></codeline>
<codeline lineno="2273"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2274"><highlight class="normal"><sp/><sp/><sp/><sp/>rndup<sp/>=<sp/>cnt<sp/>%<sp/>BYTES_PER_XDR_UNIT;</highlight></codeline>
<codeline lineno="2275"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rndup<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="2276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rndup<sp/>=<sp/>BYTES_PER_XDR_UNIT<sp/>-<sp/>rndup;</highlight></codeline>
<codeline lineno="2277"><highlight class="normal"></highlight></codeline>
<codeline lineno="2278"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(xdrs-&gt;x_op)</highlight></codeline>
<codeline lineno="2279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>XDR_DECODE:</highlight></codeline>
<codeline lineno="2281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!xdr_getbytes<sp/>(xdrs,<sp/>cp,<sp/>cnt))</highlight></codeline>
<codeline lineno="2282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="2284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rndup<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="2286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="2287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>xdr_getbytes<sp/>(xdrs,<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)crud,<sp/>rndup);</highlight></codeline>
<codeline lineno="2288"><highlight class="normal"></highlight></codeline>
<codeline lineno="2289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>XDR_ENCODE:</highlight></codeline>
<codeline lineno="2290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!xdr_putbytes<sp/>(xdrs,<sp/>cp,<sp/>cnt))</highlight></codeline>
<codeline lineno="2291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="2293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rndup<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="2295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="2296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>xdr_putbytes<sp/>(xdrs,<sp/>xdr_zero,<sp/>rndup);</highlight></codeline>
<codeline lineno="2297"><highlight class="normal"></highlight></codeline>
<codeline lineno="2298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>XDR_FREE:</highlight></codeline>
<codeline lineno="2299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="2300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2301"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>BYTES_PER_XDR_UNIT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2302"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="2303"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2304"><highlight class="normal"></highlight></codeline>
<codeline lineno="2305"><highlight class="normal"></highlight></codeline>
<codeline lineno="2306"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2307"><highlight class="comment"><sp/>*<sp/>XDR<sp/>null<sp/>terminated<sp/>ASCII<sp/>strings</highlight></codeline>
<codeline lineno="2308"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2309"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2310"><highlight class="normal">xdr_string<sp/>(XDR<sp/>*xdrs,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**cpp,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>maxsize)</highlight></codeline>
<codeline lineno="2311"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2312"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*sp<sp/>=<sp/>*cpp;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>sp<sp/>is<sp/>the<sp/>actual<sp/>string<sp/>pointer<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2313"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size;</highlight></codeline>
<codeline lineno="2314"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nodesize;</highlight></codeline>
<codeline lineno="2315"><highlight class="normal"></highlight></codeline>
<codeline lineno="2316"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2317"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>first<sp/>deal<sp/>with<sp/>the<sp/>length<sp/>since<sp/>xdr<sp/>strings<sp/>are<sp/>counted-strings</highlight></codeline>
<codeline lineno="2318"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2319"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(xdrs-&gt;x_op)</highlight></codeline>
<codeline lineno="2320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>XDR_FREE:</highlight></codeline>
<codeline lineno="2322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sp<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="2323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>already<sp/>free<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>fall<sp/>through...<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>XDR_ENCODE:</highlight></codeline>
<codeline lineno="2328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sp<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="2329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="2330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>size<sp/>=<sp/>strlen<sp/>(sp);</highlight></codeline>
<codeline lineno="2331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>XDR_DECODE:</highlight></codeline>
<codeline lineno="2333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2335"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!xdr_u_int<sp/>(xdrs,<sp/>&amp;size))</highlight></codeline>
<codeline lineno="2336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="2338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2339"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(size<sp/>&gt;<sp/>maxsize)</highlight></codeline>
<codeline lineno="2340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="2342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2343"><highlight class="normal"><sp/><sp/><sp/><sp/>nodesize<sp/>=<sp/>size<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="2344"><highlight class="normal"></highlight></codeline>
<codeline lineno="2345"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2346"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>now<sp/>deal<sp/>with<sp/>the<sp/>actual<sp/>bytes</highlight></codeline>
<codeline lineno="2347"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2348"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(xdrs-&gt;x_op)</highlight></codeline>
<codeline lineno="2349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>XDR_DECODE:</highlight></codeline>
<codeline lineno="2351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nodesize<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="2352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="2354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sp<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="2356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*cpp<sp/>=<sp/>sp<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>malloc<sp/>(nodesize);</highlight></codeline>
<codeline lineno="2357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sp<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="2358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(void)<sp/>fputs<sp/>(</highlight><highlight class="stringliteral">&quot;xdr_string:<sp/>out<sp/>of<sp/>memory\n&quot;</highlight><highlight class="normal">,<sp/>stderr);</highlight></codeline>
<codeline lineno="2360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="2361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sp[size]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>fall<sp/>into<sp/>...<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2364"><highlight class="normal"></highlight></codeline>
<codeline lineno="2365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>XDR_ENCODE:</highlight></codeline>
<codeline lineno="2366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>xdr_opaque<sp/>(xdrs,<sp/>sp,<sp/>size);</highlight></codeline>
<codeline lineno="2367"><highlight class="normal"></highlight></codeline>
<codeline lineno="2368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>XDR_FREE:</highlight></codeline>
<codeline lineno="2369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free<sp/>(sp);</highlight></codeline>
<codeline lineno="2370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*cpp<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="2371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="2372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2373"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="2374"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2375"><highlight class="normal"></highlight></codeline>
<codeline lineno="2376"><highlight class="normal"></highlight></codeline>
<codeline lineno="2377"><highlight class="normal"></highlight></codeline>
<codeline lineno="2378"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Floating-point<sp/>stuff<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2379"><highlight class="normal"></highlight></codeline>
<codeline lineno="2380"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2381"><highlight class="normal">xdr_float(XDR<sp/>*xdrs,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*fp)</highlight></codeline>
<codeline lineno="2382"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2383"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(xdrs-&gt;x_op)<sp/>{</highlight></codeline>
<codeline lineno="2384"><highlight class="normal"></highlight></codeline>
<codeline lineno="2385"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>XDR_ENCODE:</highlight></codeline>
<codeline lineno="2386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)<sp/>==<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(int32_t))</highlight></codeline>
<codeline lineno="2387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(xdr_putlong(xdrs,<sp/>(int32_t<sp/>*)fp));</highlight></codeline>
<codeline lineno="2388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)<sp/>==<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="2389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int32_t<sp/>tmp<sp/>=<sp/>*(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*)fp;</highlight></codeline>
<codeline lineno="2390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(xdr_putlong(xdrs,<sp/>&amp;tmp));</highlight></codeline>
<codeline lineno="2391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2393"><highlight class="normal"></highlight></codeline>
<codeline lineno="2394"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>XDR_DECODE:</highlight></codeline>
<codeline lineno="2395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)<sp/>==<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(int32_t))</highlight></codeline>
<codeline lineno="2396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(xdr_getlong(xdrs,<sp/>(int32_t<sp/>*)fp));</highlight></codeline>
<codeline lineno="2397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)<sp/>==<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(int))<sp/>{</highlight></codeline>
<codeline lineno="2398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int32_t<sp/>tmp;</highlight></codeline>
<codeline lineno="2399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(xdr_getlong(xdrs,<sp/>&amp;tmp))<sp/>{</highlight></codeline>
<codeline lineno="2400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*)fp<sp/>=<sp/>tmp;</highlight></codeline>
<codeline lineno="2401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(1);</highlight></codeline>
<codeline lineno="2402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2405"><highlight class="normal"></highlight></codeline>
<codeline lineno="2406"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>XDR_FREE:</highlight></codeline>
<codeline lineno="2407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(1);</highlight></codeline>
<codeline lineno="2408"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2409"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(0);</highlight></codeline>
<codeline lineno="2410"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2411"><highlight class="normal"></highlight></codeline>
<codeline lineno="2412"><highlight class="normal"></highlight></codeline>
<codeline lineno="2413"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2414"><highlight class="normal">xdr_double(XDR<sp/>*xdrs,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*dp)</highlight></codeline>
<codeline lineno="2415"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2416"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Gromacs<sp/>detects<sp/>floating-point<sp/>stuff<sp/>at<sp/>compile<sp/>time,<sp/>which<sp/>is<sp/>faster<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2417"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>GROMACS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2418"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>ifndef<sp/>FLOAT_FORMAT_IEEE754<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2419"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/>error<sp/>non-IEEE<sp/>floating<sp/>point<sp/>system,<sp/>or<sp/>you<sp/>defined<sp/>GROMACS<sp/>yourself...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2420"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2421"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>LSW;</highlight></codeline>
<codeline lineno="2422"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>ifdef<sp/>IEEE754_BIG_ENDIAN_WORD_ORDER<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2423"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>LSW=1;</highlight></codeline>
<codeline lineno="2424"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2425"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>LSW=0;</highlight></codeline>
<codeline lineno="2426"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>endif<sp/></highlight><highlight class="comment">/*<sp/>Big<sp/>endian<sp/>word<sp/>order<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2427"><highlight class="normal"></highlight><highlight class="preprocessor">#else<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2428"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Outside<sp/>Gromacs<sp/>we<sp/>rely<sp/>on<sp/>dynamic<sp/>detection<sp/>of<sp/>FP<sp/>order.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2429"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>LSW;<sp/></highlight><highlight class="comment">/*<sp/>Least<sp/>significant<sp/>fp<sp/>word<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2430"><highlight class="normal"></highlight></codeline>
<codeline lineno="2431"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x=0.987654321;<sp/></highlight><highlight class="comment">/*<sp/>Just<sp/>a<sp/>number<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2432"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>ix<sp/>=<sp/>*((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)&amp;x);</highlight></codeline>
<codeline lineno="2433"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2434"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Possible<sp/>representations<sp/>in<sp/>IEEE<sp/>double<sp/>precision:<sp/></highlight></codeline>
<codeline lineno="2435"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>(S=small<sp/>endian,<sp/>B=big<sp/>endian)</highlight></codeline>
<codeline lineno="2436"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/></highlight></codeline>
<codeline lineno="2437"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Byte<sp/>order,<sp/>Word<sp/>order,<sp/>Hex</highlight></codeline>
<codeline lineno="2438"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/>S<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>S<sp/><sp/><sp/><sp/><sp/><sp/><sp/>b8<sp/>56<sp/>0e<sp/>3c<sp/>dd<sp/>9a<sp/>ef<sp/>3f<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2439"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/>B<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>S<sp/><sp/><sp/><sp/><sp/><sp/><sp/>3c<sp/>0e<sp/>56<sp/>b8<sp/>3f<sp/>ef<sp/>9a<sp/>dd</highlight></codeline>
<codeline lineno="2440"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/>S<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>B<sp/><sp/><sp/><sp/><sp/><sp/><sp/>dd<sp/>9a<sp/>ef<sp/>3f<sp/>b8<sp/>56<sp/>0e<sp/>3c</highlight></codeline>
<codeline lineno="2441"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/>B<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>B<sp/><sp/><sp/><sp/><sp/><sp/><sp/>3f<sp/>ef<sp/>9a<sp/>dd<sp/>3c<sp/>0e<sp/>56<sp/>b8</highlight></codeline>
<codeline lineno="2442"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="2443"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(ix==0xdd<sp/>||<sp/>ix==0x3f)</highlight></codeline>
<codeline lineno="2444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LSW=1;<sp/><sp/></highlight><highlight class="comment">/*<sp/>Big<sp/>endian<sp/>word<sp/>order<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2445"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(ix==0xb8<sp/>||<sp/>ix==0x3c)</highlight></codeline>
<codeline lineno="2446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LSW=0;<sp/><sp/></highlight><highlight class="comment">/*<sp/>Small<sp/>endian<sp/>word<sp/>order<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2447"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="comment">/*<sp/>Catch<sp/>strange<sp/>errors<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,</highlight><highlight class="stringliteral">&quot;Cannot<sp/>detect<sp/>floating-point<sp/>word<sp/>order.\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Do<sp/>you<sp/>have<sp/>a<sp/>non-IEEE<sp/>system?\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Use<sp/>system<sp/>XDR<sp/>libraries<sp/>or<sp/>fix<sp/>xdr_double().\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>abort();</highlight></codeline>
<codeline lineno="2452"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2453"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>end<sp/>of<sp/>dynamic<sp/>detection<sp/>of<sp/>fp<sp/>word<sp/>order<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2454"><highlight class="normal"></highlight></codeline>
<codeline lineno="2455"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(xdrs-&gt;x_op)<sp/>{</highlight></codeline>
<codeline lineno="2456"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2457"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>XDR_ENCODE:</highlight></codeline>
<codeline lineno="2458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(2*</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(int32_t)<sp/>==<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="2459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int32_t<sp/>*lp<sp/>=<sp/>(int32_t<sp/>*)dp;</highlight></codeline>
<codeline lineno="2460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(xdr_putlong(xdrs,<sp/>lp+!LSW)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="2461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xdr_putlong(xdrs,<sp/>lp+LSW));</highlight></codeline>
<codeline lineno="2462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(2*</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>==<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(double))<sp/>{</highlight></codeline>
<codeline lineno="2463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*ip<sp/>=<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*)dp;</highlight></codeline>
<codeline lineno="2464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int32_t<sp/>tmp[2];</highlight></codeline>
<codeline lineno="2465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp[0]<sp/>=<sp/>ip[!LSW];</highlight></codeline>
<codeline lineno="2466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp[1]<sp/>=<sp/>ip[LSW];</highlight></codeline>
<codeline lineno="2467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(xdr_putlong(xdrs,<sp/>tmp)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="2468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xdr_putlong(xdrs,<sp/>tmp+1));</highlight></codeline>
<codeline lineno="2469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2471"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2472"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>XDR_DECODE:</highlight></codeline>
<codeline lineno="2473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(2*</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(int32_t)<sp/>==<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(double))<sp/>{</highlight></codeline>
<codeline lineno="2474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int32_t<sp/>*lp<sp/>=<sp/>(int32_t<sp/>*)dp;</highlight></codeline>
<codeline lineno="2475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(xdr_getlong(xdrs,<sp/>lp+!LSW)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="2476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xdr_getlong(xdrs,<sp/>lp+LSW));</highlight></codeline>
<codeline lineno="2477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(2*</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>==<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(double))<sp/>{</highlight></codeline>
<codeline lineno="2478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*ip<sp/>=<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*)dp;</highlight></codeline>
<codeline lineno="2479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int32_t<sp/>tmp[2];</highlight></codeline>
<codeline lineno="2480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(xdr_getlong(xdrs,<sp/>tmp+!LSW)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="2481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xdr_getlong(xdrs,<sp/>tmp+LSW))<sp/>{</highlight></codeline>
<codeline lineno="2482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ip[0]<sp/>=<sp/>tmp[0];</highlight></codeline>
<codeline lineno="2483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ip[1]<sp/>=<sp/>tmp[1];</highlight></codeline>
<codeline lineno="2484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(1);</highlight></codeline>
<codeline lineno="2485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2488"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2489"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>XDR_FREE:</highlight></codeline>
<codeline lineno="2490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(1);</highlight></codeline>
<codeline lineno="2491"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2492"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(0);</highlight></codeline>
<codeline lineno="2493"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2494"><highlight class="normal"></highlight></codeline>
<codeline lineno="2495"><highlight class="normal"></highlight></codeline>
<codeline lineno="2496"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>xdrstdio_getlong<sp/>(XDR<sp/>*,<sp/>int32_t<sp/>*);</highlight></codeline>
<codeline lineno="2497"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>xdrstdio_putlong<sp/>(XDR<sp/>*,<sp/>int32_t<sp/>*);</highlight></codeline>
<codeline lineno="2498"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>xdrstdio_getbytes<sp/>(XDR<sp/>*,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2499"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>xdrstdio_putbytes<sp/>(XDR<sp/>*,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2500"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>xdrstdio_getpos<sp/>(XDR<sp/>*);</highlight></codeline>
<codeline lineno="2501"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>xdrstdio_setpos<sp/>(XDR<sp/>*,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2502"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>xdrstdio_destroy<sp/>(XDR<sp/>*);</highlight></codeline>
<codeline lineno="2503"><highlight class="normal"></highlight></codeline>
<codeline lineno="2504"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2505"><highlight class="comment"><sp/>*<sp/>Ops<sp/>vector<sp/>for<sp/>stdio<sp/>type<sp/>XDR</highlight></codeline>
<codeline lineno="2506"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2507"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">xdr_ops<sp/>xdrstdio_ops<sp/>=</highlight></codeline>
<codeline lineno="2508"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xdrstdio_getlong,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>deserialize<sp/>a<sp/>long<sp/>int<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xdrstdio_putlong,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>serialize<sp/>a<sp/>long<sp/>int<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xdrstdio_getbytes,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>deserialize<sp/>counted<sp/>bytes<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xdrstdio_putbytes,<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>serialize<sp/>counted<sp/>bytes<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xdrstdio_getpos,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>get<sp/>offset<sp/>in<sp/>the<sp/>stream<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xdrstdio_setpos,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>set<sp/>offset<sp/>in<sp/>the<sp/>stream<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xdrstdio_destroy,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>destroy<sp/>stream<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2516"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="2517"><highlight class="normal"></highlight></codeline>
<codeline lineno="2518"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2519"><highlight class="comment"><sp/>*<sp/>Initialize<sp/>a<sp/>stdio<sp/>xdr<sp/>stream.</highlight></codeline>
<codeline lineno="2520"><highlight class="comment"><sp/>*<sp/>Sets<sp/>the<sp/>xdr<sp/>stream<sp/>handle<sp/>xdrs<sp/>for<sp/>use<sp/>on<sp/>the<sp/>stream<sp/>file.</highlight></codeline>
<codeline lineno="2521"><highlight class="comment"><sp/>*<sp/>Operation<sp/>flag<sp/>is<sp/>set<sp/>to<sp/>op.</highlight></codeline>
<codeline lineno="2522"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2523"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2524"><highlight class="normal">xdrstdio_create<sp/>(XDR<sp/>*xdrs,<sp/>FILE<sp/>*file,<sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>xdr_op<sp/>op)</highlight></codeline>
<codeline lineno="2525"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2526"><highlight class="normal"><sp/><sp/><sp/><sp/>xdrs-&gt;x_op<sp/>=<sp/>op;</highlight></codeline>
<codeline lineno="2527"><highlight class="normal"></highlight></codeline>
<codeline lineno="2528"><highlight class="normal"><sp/><sp/><sp/><sp/>xdrs-&gt;x_ops<sp/>=<sp/>(</highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">xdr_ops<sp/>*)<sp/>&amp;xdrstdio_ops;</highlight></codeline>
<codeline lineno="2529"><highlight class="normal"><sp/><sp/><sp/><sp/>xdrs-&gt;x_private<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>file;</highlight></codeline>
<codeline lineno="2530"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2531"><highlight class="normal"></highlight></codeline>
<codeline lineno="2532"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2533"><highlight class="comment"><sp/>*<sp/>Destroy<sp/>a<sp/>stdio<sp/>xdr<sp/>stream.</highlight></codeline>
<codeline lineno="2534"><highlight class="comment"><sp/>*<sp/>Cleans<sp/>up<sp/>the<sp/>xdr<sp/>stream<sp/>handle<sp/>xdrs<sp/>previously<sp/>set<sp/>up<sp/>by<sp/>xdrstdio_create.</highlight></codeline>
<codeline lineno="2535"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2536"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2537"><highlight class="normal">xdrstdio_destroy<sp/>(XDR<sp/>*xdrs)</highlight></codeline>
<codeline lineno="2538"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2539"><highlight class="normal"><sp/><sp/><sp/><sp/>(void)<sp/>fflush<sp/>((FILE<sp/>*)<sp/>xdrs-&gt;x_private);</highlight></codeline>
<codeline lineno="2540"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>xx<sp/>should<sp/>we<sp/>close<sp/>the<sp/>file<sp/>??<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2541"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2542"><highlight class="normal"></highlight></codeline>
<codeline lineno="2543"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2544"><highlight class="normal">xdrstdio_getlong<sp/>(XDR<sp/>*xdrs,<sp/>int32_t<sp/>*lp)</highlight></codeline>
<codeline lineno="2545"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2546"><highlight class="normal"><sp/><sp/><sp/><sp/>int32_t<sp/>mycopy;</highlight></codeline>
<codeline lineno="2547"><highlight class="normal"></highlight></codeline>
<codeline lineno="2548"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fread<sp/>((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>&amp;<sp/>mycopy,<sp/>4,<sp/>1,<sp/>(FILE<sp/>*)<sp/>xdrs-&gt;x_private)<sp/>!=<sp/>1)</highlight></codeline>
<codeline lineno="2549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="2550"><highlight class="normal"><sp/><sp/><sp/><sp/>*lp<sp/>=<sp/>(int32_t)<sp/>xdr_ntohl<sp/>(mycopy);</highlight></codeline>
<codeline lineno="2551"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="2552"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2553"><highlight class="normal"></highlight></codeline>
<codeline lineno="2554"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2555"><highlight class="normal">xdrstdio_putlong<sp/>(XDR<sp/>*xdrs,<sp/>int32_t<sp/>*lp)</highlight></codeline>
<codeline lineno="2556"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2557"><highlight class="normal"><sp/><sp/><sp/><sp/>int32_t<sp/>mycopy<sp/>=<sp/>xdr_htonl<sp/>(*lp);</highlight></codeline>
<codeline lineno="2558"><highlight class="normal"><sp/><sp/><sp/><sp/>lp<sp/>=<sp/>&amp;mycopy;</highlight></codeline>
<codeline lineno="2559"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fwrite<sp/>((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>lp,<sp/>4,<sp/>1,<sp/>(FILE<sp/>*)<sp/>xdrs-&gt;x_private)<sp/>!=<sp/>1)</highlight></codeline>
<codeline lineno="2560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="2561"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="2562"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2563"><highlight class="normal"></highlight></codeline>
<codeline lineno="2564"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2565"><highlight class="normal">xdrstdio_getbytes<sp/>(XDR<sp/>*xdrs,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*addr,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len)</highlight></codeline>
<codeline lineno="2566"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2567"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((len<sp/>!=<sp/>0)<sp/>&amp;&amp;<sp/>(fread<sp/>(addr,<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>len,<sp/>1,</highlight></codeline>
<codeline lineno="2568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(FILE<sp/>*)<sp/>xdrs-&gt;x_private)<sp/>!=<sp/>1))</highlight></codeline>
<codeline lineno="2569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="2570"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="2571"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2572"><highlight class="normal"></highlight></codeline>
<codeline lineno="2573"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2574"><highlight class="normal">xdrstdio_putbytes<sp/>(XDR<sp/>*xdrs,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*addr,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len)</highlight></codeline>
<codeline lineno="2575"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2576"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((len<sp/>!=<sp/>0)<sp/>&amp;&amp;<sp/>(fwrite<sp/>(addr,<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>len,<sp/>1,</highlight></codeline>
<codeline lineno="2577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(FILE<sp/>*)<sp/>xdrs-&gt;x_private)<sp/>!=<sp/>1))<sp/></highlight></codeline>
<codeline lineno="2578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="2579"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="2580"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2581"><highlight class="normal"></highlight></codeline>
<codeline lineno="2582"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>32<sp/>bit<sp/>fileseek<sp/>operations<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2583"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2584"><highlight class="normal">xdrstdio_getpos<sp/>(XDR<sp/>*xdrs)</highlight></codeline>
<codeline lineno="2585"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2586"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>ftell<sp/>((FILE<sp/>*)<sp/>xdrs-&gt;x_private);</highlight></codeline>
<codeline lineno="2587"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2588"><highlight class="normal"></highlight></codeline>
<codeline lineno="2589"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2590"><highlight class="normal">xdrstdio_setpos<sp/>(XDR<sp/>*xdrs,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pos)</highlight></codeline>
<codeline lineno="2591"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2592"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>fseek<sp/>((FILE<sp/>*)<sp/>xdrs-&gt;x_private,<sp/>pos,<sp/>0)<sp/>&lt;<sp/>0<sp/>?<sp/>0<sp/>:<sp/>1;</highlight></codeline>
<codeline lineno="2593"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2594"><highlight class="normal"></highlight></codeline>
<codeline lineno="2595"><highlight class="normal"></highlight></codeline>
<codeline lineno="2596"><highlight class="normal"></highlight></codeline>
<codeline lineno="2597"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>HAVE_RPC_XDR_H<sp/>not<sp/>defined<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="/home/wes/libgmxcpp/src/xdrfile.c"/>
  </compounddef>
</doxygen>
