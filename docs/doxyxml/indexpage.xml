<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.9.1">
  <compounddef id="indexpage" kind="page">
    <compoundname>index</compoundname>
    <title>libgmxcpp</title>
    <detaileddescription>
<para>&lt;img src=&quot;https://travis-ci.org/wesbarnett/libgmxcpp.svg?branch=master&quot; alt=&quot;&quot;Build status&quot;&quot;/&gt;</para><para>This is a small library used for reading in Gromacs files (.xtc and .ndx) for use in analyzing the results. This basically interfaces with libxdrfile and implements an object-oriented style. The main usage of the library is to be able to create a <ref refid="classTrajectory" kindref="compound">Trajectory</ref> object which reads in an XTC file along with an optional GROMACS index file.</para><para>The development branch is &quot;master&quot;. Releases are merged into the &quot;release&quot; branch.</para><para><heading level="2">Advantages</heading>
</para><para><itemizedlist>
<listitem><para>Only one object construction needs to be called to read in both .xtc and .ndx files.</para></listitem><listitem><para><ref refid="classIndex" kindref="compound">Index</ref> groups can be used by name within the program to get a desired atom&apos;s coordinates.</para></listitem><listitem><para>Custom classes for atomic coordinates and simulation box allow overloading of operators to simplify coding.</para></listitem><listitem><para>Common functions such as distance, magnitude, and cross product are built-in.</para></listitem><listitem><para>Analysis loops can easily be parallelized with class getter functions, since all data frames are initially read in and can be accessed simultaneously.</para></listitem><listitem><para>No other libraries needed (the relevant parts of libxdrfile are included with this project).</para></listitem></itemizedlist>
</para><para><image type="html" name="screenshot.png"></image>
</para><para><ulink url="http://wesbarnett.github.io/libgmxcpp">Full documentation is located here.</ulink></para><para><heading level="2">Requirements</heading>
</para><para>cmake</para><para><heading level="2">Installation</heading>
</para><para><heading level="3">From Source</heading>
</para><para><programlisting><codeline><highlight class="normal">git<sp/>clone<sp/>https://github.com/wesbarnett/libgmxcpp.git</highlight></codeline>
<codeline><highlight class="normal">cd<sp/>libgmxcpp</highlight></codeline>
<codeline><highlight class="normal">mkdir<sp/>build</highlight></codeline>
<codeline><highlight class="normal">cd<sp/>build</highlight></codeline>
<codeline><highlight class="normal">cmake<sp/>..</highlight></codeline>
<codeline><highlight class="normal">make</highlight></codeline>
<codeline><highlight class="normal">make<sp/>install</highlight></codeline>
</programlisting></para><para><heading level="3">From AUR</heading>
</para><para><ulink url="https://aur.archlinux.org/packages/libgmxcpp/">libgmxcpp is now in the AUR repository.</ulink> If you&apos;re on Arch you know what to do.</para><para><heading level="2">Testing the build</heading>
</para><para>To test your build you can run the following in the build directory (see above):</para><para><programlisting><codeline><highlight class="normal">make<sp/>test</highlight></codeline>
</programlisting></para><para>Automated tests are performed <ulink url="https://travis-ci.org/wesbarnett/libgmxcpp">via Travis</ulink> when new commits are pushed. Tests are in the &quot;tests&quot; directory.</para><para><heading level="2">Example Program</heading>
</para><para>There is an example program in the &quot;example&quot; directory. Use &quot;make&quot; to compile it and test it out on an .xtc and .ndx file from a recent simulation.</para><para><heading level="2">Usage</heading>
</para><para>See the example file as well as the comments in the source, especially <ref refid="classTrajectory" kindref="compound">Trajectory</ref>.</para><para>The main idea is that you create a <ref refid="classTrajectory" kindref="compound">Trajectory</ref> object which contains all the information from both the .xtc file (and optionally .ndx file). <ref refid="classTrajectory" kindref="compound">Trajectory</ref> object methods are then used for analyzing the data.</para><para><heading level="3">Construction</heading>
</para><para>First, you should create a <ref refid="classTrajectory" kindref="compound">Trajectory</ref> object:</para><para><programlisting><codeline><highlight class="comment">//<sp/>Creates<sp/>a<sp/>Trajectory<sp/>object<sp/>with<sp/>&quot;traj.xtc&quot;<sp/>and<sp/>&quot;index.ndx&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>index<sp/>file<sp/>is<sp/>optional</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Both<sp/>arguments<sp/>are<sp/>C++<sp/>strings</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><ref refid="classTrajectory" kindref="compound">Trajectory</ref><sp/>traj(</highlight><highlight class="stringliteral">&quot;traj.xtc&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;index.ndx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting></para><para>You could also make it a pointer:</para><para><programlisting><codeline><highlight class="normal"><ref refid="classTrajectory" kindref="compound">Trajectory</ref><sp/>*traj<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classTrajectory" kindref="compound">Trajectory</ref>(</highlight><highlight class="stringliteral">&quot;traj.xtc&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;index.ndx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting></para><para>In that case just remember to use &quot;-&gt;&quot; instead of &quot;.&quot; when calling its methods.</para><para>Upon construction of a <ref refid="classTrajectory" kindref="compound">Trajectory</ref> object both the xtc file and the index file are read into memory. The following sections detail how to access the data.</para><para>Additionally, one thing to consider is that the object initially allocates enough memory for 100,000 frames and then reduces that to the correct amount of frames read in. If you have more frames than that to read in, or you memory is precious and you want to initially allocate for less, you can pass the number of initial frames as a parameter in the construction:</para><para><programlisting><codeline><highlight class="comment">//<sp/>2<sp/>million<sp/>frames!<sp/>With<sp/>an<sp/>index<sp/>file.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><ref refid="classTrajectory" kindref="compound">Trajectory</ref><sp/>traj(</highlight><highlight class="stringliteral">&quot;traj.xtc&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;index.ndx&quot;</highlight><highlight class="normal">,2000000);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Without<sp/>an<sp/>index<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><ref refid="classTrajectory" kindref="compound">Trajectory</ref><sp/>traj(</highlight><highlight class="stringliteral">&quot;traj.xtc&quot;</highlight><highlight class="normal">,2000000);</highlight></codeline>
</programlisting></para><para><heading level="3">Atomic Coordinates</heading>
</para><para>To get the coordinates of an atom use GetXYZ() method. There are several different options. Note that coordinates is simply a vector with double precision. triclinicbox is a two dimensional vector with double precision.</para><para>You can get the coordinates for every atom in the system for a specific frame.</para><para><programlisting><codeline><highlight class="comment">//<sp/>For<sp/>the<sp/>3rd<sp/>frame</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">vector<sp/>&lt;coordinates&gt;<sp/>a<sp/>=<sp/>traj.<ref refid="classTrajectory_1ab563312e48059f867368f83ae3e5b768" kindref="member">GetXYZ</ref>(2);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>To<sp/>print<sp/>out<sp/>the<sp/>first<sp/>atom&apos;s<sp/>coordinates<sp/>in<sp/>this<sp/>vector:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">cout<sp/>&lt;&lt;<sp/>a.at(0);</highlight></codeline>
</programlisting></para><para>You can get the coordinates for every atom in an index group for a specific</para><para><programlisting><codeline><highlight class="comment">//<sp/>For<sp/>group<sp/>&quot;C&quot;<sp/>in<sp/>the<sp/>3rd<sp/>frame</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">vector<sp/>&lt;coordinates&gt;<sp/>a<sp/>=<sp/>traj.<ref refid="classTrajectory_1ab563312e48059f867368f83ae3e5b768" kindref="member">GetXYZ</ref>(2,</highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal">)</highlight></codeline>
</programlisting></para><para>You can get the coordinates for one specific atom in the system for a specific frame:</para><para><programlisting><codeline><highlight class="comment">//<sp/>Second<sp/>atom<sp/>in<sp/>the<sp/>3rd<sp/>frame</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><ref refid="classcoordinates" kindref="compound">coordinates</ref><sp/>a<sp/>=<sp/>traj.<ref refid="classTrajectory_1ab563312e48059f867368f83ae3e5b768" kindref="member">GetXYZ</ref>(2,1);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>You<sp/>can<sp/>print<sp/>cleanly:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">cout<sp/>&lt;&lt;<sp/>a;</highlight></codeline>
</programlisting></para><para>You can get the coordinates for one specific atom in an index group for a frame:</para><para><programlisting><codeline><highlight class="comment">//<sp/>2nd<sp/>atom<sp/>in<sp/>group<sp/>&quot;C&quot;<sp/>in<sp/>the<sp/>3rd<sp/>frame</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><ref refid="classcoordinates" kindref="compound">coordinates</ref><sp/>a<sp/>=<sp/>traj.<ref refid="classTrajectory_1ab563312e48059f867368f83ae3e5b768" kindref="member">GetXYZ</ref>(2,</highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal">,1);</highlight></codeline>
</programlisting></para><para>Usually you&apos;ll throw GetXYZ in a couple of loops to access the data you need.</para><para><heading level="3">Box Dimensions</heading>
</para><para>To get the box dimensions use GetBox() method:</para><para><programlisting><codeline><highlight class="comment">//<sp/>Gets<sp/>the<sp/>box<sp/>dimensions<sp/>from<sp/>the<sp/>first<sp/>frame:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><ref refid="classtriclinicbox" kindref="compound">triclinicbox</ref><sp/>box<sp/>=<sp/>traj.<ref refid="classTrajectory_1a80f7607e48d695907ea904f6185bdfa5" kindref="member">GetBox</ref>(0);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>You<sp/>can<sp/>print<sp/>cleanly:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">cout<sp/>&lt;&lt;<sp/>box;</highlight></codeline>
</programlisting></para><para><heading level="3">Box Volume</heading>
</para><para>To get the volume of the simulation box for any frame:</para><para><programlisting><codeline><highlight class="comment">//<sp/>For<sp/>frame<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>vol<sp/>=<sp/>traj.<ref refid="classTrajectory_1a147406783cfebe3072057b37609c2d3a" kindref="member">GetBoxVolume</ref>(0);</highlight></codeline>
</programlisting></para><para><heading level="3">Number of Frames</heading>
</para><para>To get the number of frames in the simulation use GetNFrames():</para><para><programlisting><codeline><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nframes<sp/>=<sp/>traj.<ref refid="classTrajectory_1a3bc23364e250667c611a1a2b77b5a7ca" kindref="member">GetNFrames</ref>();</highlight></codeline>
</programlisting></para><para><heading level="3">Number of Atoms</heading>
</para><para>To get the number of atoms in the entire system use GetNAtoms():</para><para><programlisting><codeline><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>natoms<sp/>=<sp/>traj.<ref refid="classTrajectory_1afdb7df7848002e17e21f93e9d64aea61" kindref="member">GetNAtoms</ref>();</highlight></codeline>
</programlisting></para><para>To get the size (number of atoms in) a specific group pass the index name as an argument:</para><para><programlisting><codeline><highlight class="comment">//<sp/>Gets<sp/>the<sp/>number<sp/>of<sp/>atoms<sp/>in<sp/>group<sp/>&quot;SOL&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>solsize<sp/>=<sp/>traj.<ref refid="classTrajectory_1afdb7df7848002e17e21f93e9d64aea61" kindref="member">GetNAtoms</ref>(</highlight><highlight class="stringliteral">&quot;SOL&quot;</highlight><highlight class="normal">):</highlight></codeline>
</programlisting></para><para><heading level="3">Time and Step</heading>
</para><para>To get the time (in ps) corresponding with a frame use GetTime(frame):</para><para><programlisting><codeline><highlight class="comment">//<sp/>Gets<sp/>the<sp/>time<sp/>of<sp/>the<sp/>5th<sp/>frame</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>time<sp/>=<sp/>traj.<ref refid="classTrajectory_1a3d8ba3dccd4b77e8da7202ae5e1b4f57" kindref="member">GetTime</ref>(4);</highlight></codeline>
</programlisting></para><para>To get the step for a frame use GetStep(frame): <programlisting><codeline><highlight class="comment">//<sp/>Gets<sp/>the<sp/>step<sp/>corresponding<sp/>with<sp/>the<sp/>5th<sp/>frame</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>step<sp/>=<sp/>traj.<ref refid="classTrajectory_1afb9c2f6337f280b4ad7a79bbc1922fd9" kindref="member">GetStep</ref>(4);</highlight></codeline>
</programlisting></para><para><heading level="3">Utilities</heading>
</para><para>Be sure to check out <ref refid="Utils_8h" kindref="compound">Utils.h</ref> which includes utilies in calculating atomic distances, the periodic boundary condition, and more.</para><para><heading level="1">License</heading>
</para><para>libgmxcpp Copyright (C) 2015 James W. Barnett <ulink url="mailto:jbarnet4@tulane.edu">jbarnet4@tulane.edu</ulink></para><para>This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.</para><para>This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.</para><para>You should have received a copy of the GNU General Public License along with this program; if not, write to the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.</para><para>The full license is located in a text file titled &quot;LICENSE&quot; in the root directory of the source and includes a licence for each part of this package.</para><para><heading level="1">Citing</heading>
</para><para>I hope you find this library useful. There is no paper associated with this project to cite as is common in some projects. However, if you do use this code in a published work I humbly ask that you acknowledge it in some way. </para>    </detaileddescription>
  </compounddef>
</doxygen>
